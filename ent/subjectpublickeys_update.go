// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/predicate"
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/subjectpublickeys"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectPublicKeysUpdate is the builder for updating SubjectPublicKeys entities.
type SubjectPublicKeysUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectPublicKeysMutation
}

// Where appends a list predicates to the SubjectPublicKeysUpdate builder.
func (spku *SubjectPublicKeysUpdate) Where(ps ...predicate.SubjectPublicKeys) *SubjectPublicKeysUpdate {
	spku.mutation.Where(ps...)
	return spku
}

// SetPublicKeyScopeID sets the "public_key_scope" edge to the PublicKeyScopes entity by ID.
func (spku *SubjectPublicKeysUpdate) SetPublicKeyScopeID(id string) *SubjectPublicKeysUpdate {
	spku.mutation.SetPublicKeyScopeID(id)
	return spku
}

// SetNillablePublicKeyScopeID sets the "public_key_scope" edge to the PublicKeyScopes entity by ID if the given value is not nil.
func (spku *SubjectPublicKeysUpdate) SetNillablePublicKeyScopeID(id *string) *SubjectPublicKeysUpdate {
	if id != nil {
		spku = spku.SetPublicKeyScopeID(*id)
	}
	return spku
}

// SetPublicKeyScope sets the "public_key_scope" edge to the PublicKeyScopes entity.
func (spku *SubjectPublicKeysUpdate) SetPublicKeyScope(p *PublicKeyScopes) *SubjectPublicKeysUpdate {
	return spku.SetPublicKeyScopeID(p.ID)
}

// SetIssuerPublicKeyIDID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity by ID.
func (spku *SubjectPublicKeysUpdate) SetIssuerPublicKeyIDID(id string) *SubjectPublicKeysUpdate {
	spku.mutation.SetIssuerPublicKeyIDID(id)
	return spku
}

// SetNillableIssuerPublicKeyIDID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity by ID if the given value is not nil.
func (spku *SubjectPublicKeysUpdate) SetNillableIssuerPublicKeyIDID(id *string) *SubjectPublicKeysUpdate {
	if id != nil {
		spku = spku.SetIssuerPublicKeyIDID(*id)
	}
	return spku
}

// SetIssuerPublicKeyID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity.
func (spku *SubjectPublicKeysUpdate) SetIssuerPublicKeyID(i *IssuerPublicKeys) *SubjectPublicKeysUpdate {
	return spku.SetIssuerPublicKeyIDID(i.ID)
}

// Mutation returns the SubjectPublicKeysMutation object of the builder.
func (spku *SubjectPublicKeysUpdate) Mutation() *SubjectPublicKeysMutation {
	return spku.mutation
}

// ClearPublicKeyScope clears the "public_key_scope" edge to the PublicKeyScopes entity.
func (spku *SubjectPublicKeysUpdate) ClearPublicKeyScope() *SubjectPublicKeysUpdate {
	spku.mutation.ClearPublicKeyScope()
	return spku
}

// ClearIssuerPublicKeyID clears the "issuer_public_key_id" edge to the IssuerPublicKeys entity.
func (spku *SubjectPublicKeysUpdate) ClearIssuerPublicKeyID() *SubjectPublicKeysUpdate {
	spku.mutation.ClearIssuerPublicKeyID()
	return spku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spku *SubjectPublicKeysUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spku.sqlSave, spku.mutation, spku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spku *SubjectPublicKeysUpdate) SaveX(ctx context.Context) int {
	affected, err := spku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spku *SubjectPublicKeysUpdate) Exec(ctx context.Context) error {
	_, err := spku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spku *SubjectPublicKeysUpdate) ExecX(ctx context.Context) {
	if err := spku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (spku *SubjectPublicKeysUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subjectpublickeys.Table, subjectpublickeys.Columns, sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString))
	if ps := spku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spku.mutation.PublicKeyScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subjectpublickeys.PublicKeyScopeTable,
			Columns: []string{subjectpublickeys.PublicKeyScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spku.mutation.PublicKeyScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subjectpublickeys.PublicKeyScopeTable,
			Columns: []string{subjectpublickeys.PublicKeyScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spku.mutation.IssuerPublicKeyIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectpublickeys.IssuerPublicKeyIDTable,
			Columns: []string{subjectpublickeys.IssuerPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuerpublickeys.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spku.mutation.IssuerPublicKeyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectpublickeys.IssuerPublicKeyIDTable,
			Columns: []string{subjectpublickeys.IssuerPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuerpublickeys.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectpublickeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spku.mutation.done = true
	return n, nil
}

// SubjectPublicKeysUpdateOne is the builder for updating a single SubjectPublicKeys entity.
type SubjectPublicKeysUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectPublicKeysMutation
}

// SetPublicKeyScopeID sets the "public_key_scope" edge to the PublicKeyScopes entity by ID.
func (spkuo *SubjectPublicKeysUpdateOne) SetPublicKeyScopeID(id string) *SubjectPublicKeysUpdateOne {
	spkuo.mutation.SetPublicKeyScopeID(id)
	return spkuo
}

// SetNillablePublicKeyScopeID sets the "public_key_scope" edge to the PublicKeyScopes entity by ID if the given value is not nil.
func (spkuo *SubjectPublicKeysUpdateOne) SetNillablePublicKeyScopeID(id *string) *SubjectPublicKeysUpdateOne {
	if id != nil {
		spkuo = spkuo.SetPublicKeyScopeID(*id)
	}
	return spkuo
}

// SetPublicKeyScope sets the "public_key_scope" edge to the PublicKeyScopes entity.
func (spkuo *SubjectPublicKeysUpdateOne) SetPublicKeyScope(p *PublicKeyScopes) *SubjectPublicKeysUpdateOne {
	return spkuo.SetPublicKeyScopeID(p.ID)
}

// SetIssuerPublicKeyIDID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity by ID.
func (spkuo *SubjectPublicKeysUpdateOne) SetIssuerPublicKeyIDID(id string) *SubjectPublicKeysUpdateOne {
	spkuo.mutation.SetIssuerPublicKeyIDID(id)
	return spkuo
}

// SetNillableIssuerPublicKeyIDID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity by ID if the given value is not nil.
func (spkuo *SubjectPublicKeysUpdateOne) SetNillableIssuerPublicKeyIDID(id *string) *SubjectPublicKeysUpdateOne {
	if id != nil {
		spkuo = spkuo.SetIssuerPublicKeyIDID(*id)
	}
	return spkuo
}

// SetIssuerPublicKeyID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity.
func (spkuo *SubjectPublicKeysUpdateOne) SetIssuerPublicKeyID(i *IssuerPublicKeys) *SubjectPublicKeysUpdateOne {
	return spkuo.SetIssuerPublicKeyIDID(i.ID)
}

// Mutation returns the SubjectPublicKeysMutation object of the builder.
func (spkuo *SubjectPublicKeysUpdateOne) Mutation() *SubjectPublicKeysMutation {
	return spkuo.mutation
}

// ClearPublicKeyScope clears the "public_key_scope" edge to the PublicKeyScopes entity.
func (spkuo *SubjectPublicKeysUpdateOne) ClearPublicKeyScope() *SubjectPublicKeysUpdateOne {
	spkuo.mutation.ClearPublicKeyScope()
	return spkuo
}

// ClearIssuerPublicKeyID clears the "issuer_public_key_id" edge to the IssuerPublicKeys entity.
func (spkuo *SubjectPublicKeysUpdateOne) ClearIssuerPublicKeyID() *SubjectPublicKeysUpdateOne {
	spkuo.mutation.ClearIssuerPublicKeyID()
	return spkuo
}

// Where appends a list predicates to the SubjectPublicKeysUpdate builder.
func (spkuo *SubjectPublicKeysUpdateOne) Where(ps ...predicate.SubjectPublicKeys) *SubjectPublicKeysUpdateOne {
	spkuo.mutation.Where(ps...)
	return spkuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spkuo *SubjectPublicKeysUpdateOne) Select(field string, fields ...string) *SubjectPublicKeysUpdateOne {
	spkuo.fields = append([]string{field}, fields...)
	return spkuo
}

// Save executes the query and returns the updated SubjectPublicKeys entity.
func (spkuo *SubjectPublicKeysUpdateOne) Save(ctx context.Context) (*SubjectPublicKeys, error) {
	return withHooks(ctx, spkuo.sqlSave, spkuo.mutation, spkuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spkuo *SubjectPublicKeysUpdateOne) SaveX(ctx context.Context) *SubjectPublicKeys {
	node, err := spkuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spkuo *SubjectPublicKeysUpdateOne) Exec(ctx context.Context) error {
	_, err := spkuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spkuo *SubjectPublicKeysUpdateOne) ExecX(ctx context.Context) {
	if err := spkuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (spkuo *SubjectPublicKeysUpdateOne) sqlSave(ctx context.Context) (_node *SubjectPublicKeys, err error) {
	_spec := sqlgraph.NewUpdateSpec(subjectpublickeys.Table, subjectpublickeys.Columns, sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString))
	id, ok := spkuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubjectPublicKeys.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spkuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subjectpublickeys.FieldID)
		for _, f := range fields {
			if !subjectpublickeys.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subjectpublickeys.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spkuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if spkuo.mutation.PublicKeyScopeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subjectpublickeys.PublicKeyScopeTable,
			Columns: []string{subjectpublickeys.PublicKeyScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spkuo.mutation.PublicKeyScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subjectpublickeys.PublicKeyScopeTable,
			Columns: []string{subjectpublickeys.PublicKeyScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spkuo.mutation.IssuerPublicKeyIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectpublickeys.IssuerPublicKeyIDTable,
			Columns: []string{subjectpublickeys.IssuerPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuerpublickeys.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spkuo.mutation.IssuerPublicKeyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectpublickeys.IssuerPublicKeyIDTable,
			Columns: []string{subjectpublickeys.IssuerPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuerpublickeys.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubjectPublicKeys{config: spkuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spkuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectpublickeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spkuo.mutation.done = true
	return _node, nil
}
