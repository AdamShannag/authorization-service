// Code generated by ent, DO NOT EDIT.

package subjectpublickeys

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the subjectpublickeys type in the database.
	Label = "subject_public_keys"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgePublicKeyScope holds the string denoting the public_key_scope edge name in mutations.
	EdgePublicKeyScope = "public_key_scope"
	// EdgeIssuerPublicKeyID holds the string denoting the issuer_public_key_id edge name in mutations.
	EdgeIssuerPublicKeyID = "issuer_public_key_id"
	// Table holds the table name of the subjectpublickeys in the database.
	Table = "subject_public_keys"
	// PublicKeyScopeTable is the table that holds the public_key_scope relation/edge.
	PublicKeyScopeTable = "public_key_scopes"
	// PublicKeyScopeInverseTable is the table name for the PublicKeyScopes entity.
	// It exists in this package in order to avoid circular dependency with the "publickeyscopes" package.
	PublicKeyScopeInverseTable = "public_key_scopes"
	// PublicKeyScopeColumn is the table column denoting the public_key_scope relation/edge.
	PublicKeyScopeColumn = "subject_public_keys_public_key_scope"
	// IssuerPublicKeyIDTable is the table that holds the issuer_public_key_id relation/edge.
	IssuerPublicKeyIDTable = "subject_public_keys"
	// IssuerPublicKeyIDInverseTable is the table name for the IssuerPublicKeys entity.
	// It exists in this package in order to avoid circular dependency with the "issuerpublickeys" package.
	IssuerPublicKeyIDInverseTable = "issuer_public_keys"
	// IssuerPublicKeyIDColumn is the table column denoting the issuer_public_key_id relation/edge.
	IssuerPublicKeyIDColumn = "issuer_public_keys_subject_public_key"
)

// Columns holds all SQL columns for subjectpublickeys fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "subject_public_keys"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"issuer_public_keys_subject_public_key",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the SubjectPublicKeys queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublicKeyScopeField orders the results by public_key_scope field.
func ByPublicKeyScopeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPublicKeyScopeStep(), sql.OrderByField(field, opts...))
	}
}

// ByIssuerPublicKeyIDField orders the results by issuer_public_key_id field.
func ByIssuerPublicKeyIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIssuerPublicKeyIDStep(), sql.OrderByField(field, opts...))
	}
}
func newPublicKeyScopeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PublicKeyScopeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PublicKeyScopeTable, PublicKeyScopeColumn),
	)
}
func newIssuerPublicKeyIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IssuerPublicKeyIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, IssuerPublicKeyIDTable, IssuerPublicKeyIDColumn),
	)
}
