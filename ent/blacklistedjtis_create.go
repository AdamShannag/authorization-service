// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/blacklistedjtis"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlacklistedJTIsCreate is the builder for creating a BlacklistedJTIs entity.
type BlacklistedJTIsCreate struct {
	config
	mutation *BlacklistedJTIsMutation
	hooks    []Hook
}

// SetExpiry sets the "expiry" field.
func (bjic *BlacklistedJTIsCreate) SetExpiry(t time.Time) *BlacklistedJTIsCreate {
	bjic.mutation.SetExpiry(t)
	return bjic
}

// SetID sets the "id" field.
func (bjic *BlacklistedJTIsCreate) SetID(s string) *BlacklistedJTIsCreate {
	bjic.mutation.SetID(s)
	return bjic
}

// Mutation returns the BlacklistedJTIsMutation object of the builder.
func (bjic *BlacklistedJTIsCreate) Mutation() *BlacklistedJTIsMutation {
	return bjic.mutation
}

// Save creates the BlacklistedJTIs in the database.
func (bjic *BlacklistedJTIsCreate) Save(ctx context.Context) (*BlacklistedJTIs, error) {
	return withHooks(ctx, bjic.sqlSave, bjic.mutation, bjic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bjic *BlacklistedJTIsCreate) SaveX(ctx context.Context) *BlacklistedJTIs {
	v, err := bjic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bjic *BlacklistedJTIsCreate) Exec(ctx context.Context) error {
	_, err := bjic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bjic *BlacklistedJTIsCreate) ExecX(ctx context.Context) {
	if err := bjic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bjic *BlacklistedJTIsCreate) check() error {
	if _, ok := bjic.mutation.Expiry(); !ok {
		return &ValidationError{Name: "expiry", err: errors.New(`ent: missing required field "BlacklistedJTIs.expiry"`)}
	}
	return nil
}

func (bjic *BlacklistedJTIsCreate) sqlSave(ctx context.Context) (*BlacklistedJTIs, error) {
	if err := bjic.check(); err != nil {
		return nil, err
	}
	_node, _spec := bjic.createSpec()
	if err := sqlgraph.CreateNode(ctx, bjic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected BlacklistedJTIs.ID type: %T", _spec.ID.Value)
		}
	}
	bjic.mutation.id = &_node.ID
	bjic.mutation.done = true
	return _node, nil
}

func (bjic *BlacklistedJTIsCreate) createSpec() (*BlacklistedJTIs, *sqlgraph.CreateSpec) {
	var (
		_node = &BlacklistedJTIs{config: bjic.config}
		_spec = sqlgraph.NewCreateSpec(blacklistedjtis.Table, sqlgraph.NewFieldSpec(blacklistedjtis.FieldID, field.TypeString))
	)
	if id, ok := bjic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bjic.mutation.Expiry(); ok {
		_spec.SetField(blacklistedjtis.FieldExpiry, field.TypeTime, value)
		_node.Expiry = value
	}
	return _node, _spec
}

// BlacklistedJTIsCreateBulk is the builder for creating many BlacklistedJTIs entities in bulk.
type BlacklistedJTIsCreateBulk struct {
	config
	builders []*BlacklistedJTIsCreate
}

// Save creates the BlacklistedJTIs entities in the database.
func (bjicb *BlacklistedJTIsCreateBulk) Save(ctx context.Context) ([]*BlacklistedJTIs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bjicb.builders))
	nodes := make([]*BlacklistedJTIs, len(bjicb.builders))
	mutators := make([]Mutator, len(bjicb.builders))
	for i := range bjicb.builders {
		func(i int, root context.Context) {
			builder := bjicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlacklistedJTIsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bjicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bjicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bjicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bjicb *BlacklistedJTIsCreateBulk) SaveX(ctx context.Context) []*BlacklistedJTIs {
	v, err := bjicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bjicb *BlacklistedJTIsCreateBulk) Exec(ctx context.Context) error {
	_, err := bjicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bjicb *BlacklistedJTIsCreateBulk) ExecX(ctx context.Context) {
	if err := bjicb.Exec(ctx); err != nil {
		panic(err)
	}
}
