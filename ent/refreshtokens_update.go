// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/predicate"
	"authorization-service/ent/refreshtokens"
	"authorization-service/ent/request"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RefreshTokensUpdate is the builder for updating RefreshTokens entities.
type RefreshTokensUpdate struct {
	config
	hooks    []Hook
	mutation *RefreshTokensMutation
}

// Where appends a list predicates to the RefreshTokensUpdate builder.
func (rtu *RefreshTokensUpdate) Where(ps ...predicate.RefreshTokens) *RefreshTokensUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetActive sets the "active" field.
func (rtu *RefreshTokensUpdate) SetActive(b bool) *RefreshTokensUpdate {
	rtu.mutation.SetActive(b)
	return rtu
}

// SetRequestIDID sets the "request_id" edge to the Request entity by ID.
func (rtu *RefreshTokensUpdate) SetRequestIDID(id string) *RefreshTokensUpdate {
	rtu.mutation.SetRequestIDID(id)
	return rtu
}

// SetNillableRequestIDID sets the "request_id" edge to the Request entity by ID if the given value is not nil.
func (rtu *RefreshTokensUpdate) SetNillableRequestIDID(id *string) *RefreshTokensUpdate {
	if id != nil {
		rtu = rtu.SetRequestIDID(*id)
	}
	return rtu
}

// SetRequestID sets the "request_id" edge to the Request entity.
func (rtu *RefreshTokensUpdate) SetRequestID(r *Request) *RefreshTokensUpdate {
	return rtu.SetRequestIDID(r.ID)
}

// Mutation returns the RefreshTokensMutation object of the builder.
func (rtu *RefreshTokensUpdate) Mutation() *RefreshTokensMutation {
	return rtu.mutation
}

// ClearRequestID clears the "request_id" edge to the Request entity.
func (rtu *RefreshTokensUpdate) ClearRequestID() *RefreshTokensUpdate {
	rtu.mutation.ClearRequestID()
	return rtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RefreshTokensUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RefreshTokensUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RefreshTokensUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RefreshTokensUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtu *RefreshTokensUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(refreshtokens.Table, refreshtokens.Columns, sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.Active(); ok {
		_spec.SetField(refreshtokens.FieldActive, field.TypeBool, value)
	}
	if rtu.mutation.RequestIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   refreshtokens.RequestIDTable,
			Columns: []string{refreshtokens.RequestIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.RequestIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   refreshtokens.RequestIDTable,
			Columns: []string{refreshtokens.RequestIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtokens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// RefreshTokensUpdateOne is the builder for updating a single RefreshTokens entity.
type RefreshTokensUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefreshTokensMutation
}

// SetActive sets the "active" field.
func (rtuo *RefreshTokensUpdateOne) SetActive(b bool) *RefreshTokensUpdateOne {
	rtuo.mutation.SetActive(b)
	return rtuo
}

// SetRequestIDID sets the "request_id" edge to the Request entity by ID.
func (rtuo *RefreshTokensUpdateOne) SetRequestIDID(id string) *RefreshTokensUpdateOne {
	rtuo.mutation.SetRequestIDID(id)
	return rtuo
}

// SetNillableRequestIDID sets the "request_id" edge to the Request entity by ID if the given value is not nil.
func (rtuo *RefreshTokensUpdateOne) SetNillableRequestIDID(id *string) *RefreshTokensUpdateOne {
	if id != nil {
		rtuo = rtuo.SetRequestIDID(*id)
	}
	return rtuo
}

// SetRequestID sets the "request_id" edge to the Request entity.
func (rtuo *RefreshTokensUpdateOne) SetRequestID(r *Request) *RefreshTokensUpdateOne {
	return rtuo.SetRequestIDID(r.ID)
}

// Mutation returns the RefreshTokensMutation object of the builder.
func (rtuo *RefreshTokensUpdateOne) Mutation() *RefreshTokensMutation {
	return rtuo.mutation
}

// ClearRequestID clears the "request_id" edge to the Request entity.
func (rtuo *RefreshTokensUpdateOne) ClearRequestID() *RefreshTokensUpdateOne {
	rtuo.mutation.ClearRequestID()
	return rtuo
}

// Where appends a list predicates to the RefreshTokensUpdate builder.
func (rtuo *RefreshTokensUpdateOne) Where(ps ...predicate.RefreshTokens) *RefreshTokensUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RefreshTokensUpdateOne) Select(field string, fields ...string) *RefreshTokensUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RefreshTokens entity.
func (rtuo *RefreshTokensUpdateOne) Save(ctx context.Context) (*RefreshTokens, error) {
	return withHooks(ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RefreshTokensUpdateOne) SaveX(ctx context.Context) *RefreshTokens {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RefreshTokensUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RefreshTokensUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtuo *RefreshTokensUpdateOne) sqlSave(ctx context.Context) (_node *RefreshTokens, err error) {
	_spec := sqlgraph.NewUpdateSpec(refreshtokens.Table, refreshtokens.Columns, sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RefreshTokens.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refreshtokens.FieldID)
		for _, f := range fields {
			if !refreshtokens.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != refreshtokens.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.Active(); ok {
		_spec.SetField(refreshtokens.FieldActive, field.TypeBool, value)
	}
	if rtuo.mutation.RequestIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   refreshtokens.RequestIDTable,
			Columns: []string{refreshtokens.RequestIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.RequestIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   refreshtokens.RequestIDTable,
			Columns: []string{refreshtokens.RequestIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RefreshTokens{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtokens.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}
