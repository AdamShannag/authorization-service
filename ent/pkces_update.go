// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/clients"
	"authorization-service/ent/pkces"
	"authorization-service/ent/predicate"
	"authorization-service/ent/session"
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"golang.org/x/text/language"
)

// PKCESUpdate is the builder for updating PKCES entities.
type PKCESUpdate struct {
	config
	hooks    []Hook
	mutation *PKCESMutation
}

// Where appends a list predicates to the PKCESUpdate builder.
func (pu *PKCESUpdate) Where(ps ...predicate.PKCES) *PKCESUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetRequestID sets the "request_id" field.
func (pu *PKCESUpdate) SetRequestID(s string) *PKCESUpdate {
	pu.mutation.SetRequestID(s)
	return pu
}

// SetRequestedAt sets the "requestedAt" field.
func (pu *PKCESUpdate) SetRequestedAt(t time.Time) *PKCESUpdate {
	pu.mutation.SetRequestedAt(t)
	return pu
}

// SetScopes sets the "scopes" field.
func (pu *PKCESUpdate) SetScopes(s []string) *PKCESUpdate {
	pu.mutation.SetScopes(s)
	return pu
}

// AppendScopes appends s to the "scopes" field.
func (pu *PKCESUpdate) AppendScopes(s []string) *PKCESUpdate {
	pu.mutation.AppendScopes(s)
	return pu
}

// SetGrantedScopes sets the "granted_scopes" field.
func (pu *PKCESUpdate) SetGrantedScopes(s []string) *PKCESUpdate {
	pu.mutation.SetGrantedScopes(s)
	return pu
}

// AppendGrantedScopes appends s to the "granted_scopes" field.
func (pu *PKCESUpdate) AppendGrantedScopes(s []string) *PKCESUpdate {
	pu.mutation.AppendGrantedScopes(s)
	return pu
}

// SetRequestedAudience sets the "requested_audience" field.
func (pu *PKCESUpdate) SetRequestedAudience(s []string) *PKCESUpdate {
	pu.mutation.SetRequestedAudience(s)
	return pu
}

// AppendRequestedAudience appends s to the "requested_audience" field.
func (pu *PKCESUpdate) AppendRequestedAudience(s []string) *PKCESUpdate {
	pu.mutation.AppendRequestedAudience(s)
	return pu
}

// SetGrantedAudience sets the "granted_audience" field.
func (pu *PKCESUpdate) SetGrantedAudience(s []string) *PKCESUpdate {
	pu.mutation.SetGrantedAudience(s)
	return pu
}

// AppendGrantedAudience appends s to the "granted_audience" field.
func (pu *PKCESUpdate) AppendGrantedAudience(s []string) *PKCESUpdate {
	pu.mutation.AppendGrantedAudience(s)
	return pu
}

// SetForm sets the "form" field.
func (pu *PKCESUpdate) SetForm(u url.Values) *PKCESUpdate {
	pu.mutation.SetForm(u)
	return pu
}

// SetLang sets the "lang" field.
func (pu *PKCESUpdate) SetLang(l language.Tag) *PKCESUpdate {
	pu.mutation.SetLang(l)
	return pu
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (pu *PKCESUpdate) SetNillableLang(l *language.Tag) *PKCESUpdate {
	if l != nil {
		pu.SetLang(*l)
	}
	return pu
}

// ClearLang clears the value of the "lang" field.
func (pu *PKCESUpdate) ClearLang() *PKCESUpdate {
	pu.mutation.ClearLang()
	return pu
}

// SetClientIDID sets the "client_id" edge to the Clients entity by ID.
func (pu *PKCESUpdate) SetClientIDID(id string) *PKCESUpdate {
	pu.mutation.SetClientIDID(id)
	return pu
}

// SetNillableClientIDID sets the "client_id" edge to the Clients entity by ID if the given value is not nil.
func (pu *PKCESUpdate) SetNillableClientIDID(id *string) *PKCESUpdate {
	if id != nil {
		pu = pu.SetClientIDID(*id)
	}
	return pu
}

// SetClientID sets the "client_id" edge to the Clients entity.
func (pu *PKCESUpdate) SetClientID(c *Clients) *PKCESUpdate {
	return pu.SetClientIDID(c.ID)
}

// SetSessionIDID sets the "session_id" edge to the Session entity by ID.
func (pu *PKCESUpdate) SetSessionIDID(id string) *PKCESUpdate {
	pu.mutation.SetSessionIDID(id)
	return pu
}

// SetNillableSessionIDID sets the "session_id" edge to the Session entity by ID if the given value is not nil.
func (pu *PKCESUpdate) SetNillableSessionIDID(id *string) *PKCESUpdate {
	if id != nil {
		pu = pu.SetSessionIDID(*id)
	}
	return pu
}

// SetSessionID sets the "session_id" edge to the Session entity.
func (pu *PKCESUpdate) SetSessionID(s *Session) *PKCESUpdate {
	return pu.SetSessionIDID(s.ID)
}

// Mutation returns the PKCESMutation object of the builder.
func (pu *PKCESUpdate) Mutation() *PKCESMutation {
	return pu.mutation
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (pu *PKCESUpdate) ClearClientID() *PKCESUpdate {
	pu.mutation.ClearClientID()
	return pu
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (pu *PKCESUpdate) ClearSessionID() *PKCESUpdate {
	pu.mutation.ClearSessionID()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PKCESUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PKCESUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PKCESUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PKCESUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PKCESUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(pkces.Table, pkces.Columns, sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.RequestID(); ok {
		_spec.SetField(pkces.FieldRequestID, field.TypeString, value)
	}
	if value, ok := pu.mutation.RequestedAt(); ok {
		_spec.SetField(pkces.FieldRequestedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Scopes(); ok {
		_spec.SetField(pkces.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldScopes, value)
		})
	}
	if value, ok := pu.mutation.GrantedScopes(); ok {
		_spec.SetField(pkces.FieldGrantedScopes, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedGrantedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldGrantedScopes, value)
		})
	}
	if value, ok := pu.mutation.RequestedAudience(); ok {
		_spec.SetField(pkces.FieldRequestedAudience, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedRequestedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldRequestedAudience, value)
		})
	}
	if value, ok := pu.mutation.GrantedAudience(); ok {
		_spec.SetField(pkces.FieldGrantedAudience, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedGrantedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldGrantedAudience, value)
		})
	}
	if value, ok := pu.mutation.Form(); ok {
		_spec.SetField(pkces.FieldForm, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.Lang(); ok {
		_spec.SetField(pkces.FieldLang, field.TypeJSON, value)
	}
	if pu.mutation.LangCleared() {
		_spec.ClearField(pkces.FieldLang, field.TypeJSON)
	}
	if pu.mutation.ClientIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.ClientIDTable,
			Columns: []string{pkces.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ClientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.ClientIDTable,
			Columns: []string{pkces.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SessionIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.SessionIDTable,
			Columns: []string{pkces.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SessionIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.SessionIDTable,
			Columns: []string{pkces.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkces.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PKCESUpdateOne is the builder for updating a single PKCES entity.
type PKCESUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PKCESMutation
}

// SetRequestID sets the "request_id" field.
func (puo *PKCESUpdateOne) SetRequestID(s string) *PKCESUpdateOne {
	puo.mutation.SetRequestID(s)
	return puo
}

// SetRequestedAt sets the "requestedAt" field.
func (puo *PKCESUpdateOne) SetRequestedAt(t time.Time) *PKCESUpdateOne {
	puo.mutation.SetRequestedAt(t)
	return puo
}

// SetScopes sets the "scopes" field.
func (puo *PKCESUpdateOne) SetScopes(s []string) *PKCESUpdateOne {
	puo.mutation.SetScopes(s)
	return puo
}

// AppendScopes appends s to the "scopes" field.
func (puo *PKCESUpdateOne) AppendScopes(s []string) *PKCESUpdateOne {
	puo.mutation.AppendScopes(s)
	return puo
}

// SetGrantedScopes sets the "granted_scopes" field.
func (puo *PKCESUpdateOne) SetGrantedScopes(s []string) *PKCESUpdateOne {
	puo.mutation.SetGrantedScopes(s)
	return puo
}

// AppendGrantedScopes appends s to the "granted_scopes" field.
func (puo *PKCESUpdateOne) AppendGrantedScopes(s []string) *PKCESUpdateOne {
	puo.mutation.AppendGrantedScopes(s)
	return puo
}

// SetRequestedAudience sets the "requested_audience" field.
func (puo *PKCESUpdateOne) SetRequestedAudience(s []string) *PKCESUpdateOne {
	puo.mutation.SetRequestedAudience(s)
	return puo
}

// AppendRequestedAudience appends s to the "requested_audience" field.
func (puo *PKCESUpdateOne) AppendRequestedAudience(s []string) *PKCESUpdateOne {
	puo.mutation.AppendRequestedAudience(s)
	return puo
}

// SetGrantedAudience sets the "granted_audience" field.
func (puo *PKCESUpdateOne) SetGrantedAudience(s []string) *PKCESUpdateOne {
	puo.mutation.SetGrantedAudience(s)
	return puo
}

// AppendGrantedAudience appends s to the "granted_audience" field.
func (puo *PKCESUpdateOne) AppendGrantedAudience(s []string) *PKCESUpdateOne {
	puo.mutation.AppendGrantedAudience(s)
	return puo
}

// SetForm sets the "form" field.
func (puo *PKCESUpdateOne) SetForm(u url.Values) *PKCESUpdateOne {
	puo.mutation.SetForm(u)
	return puo
}

// SetLang sets the "lang" field.
func (puo *PKCESUpdateOne) SetLang(l language.Tag) *PKCESUpdateOne {
	puo.mutation.SetLang(l)
	return puo
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (puo *PKCESUpdateOne) SetNillableLang(l *language.Tag) *PKCESUpdateOne {
	if l != nil {
		puo.SetLang(*l)
	}
	return puo
}

// ClearLang clears the value of the "lang" field.
func (puo *PKCESUpdateOne) ClearLang() *PKCESUpdateOne {
	puo.mutation.ClearLang()
	return puo
}

// SetClientIDID sets the "client_id" edge to the Clients entity by ID.
func (puo *PKCESUpdateOne) SetClientIDID(id string) *PKCESUpdateOne {
	puo.mutation.SetClientIDID(id)
	return puo
}

// SetNillableClientIDID sets the "client_id" edge to the Clients entity by ID if the given value is not nil.
func (puo *PKCESUpdateOne) SetNillableClientIDID(id *string) *PKCESUpdateOne {
	if id != nil {
		puo = puo.SetClientIDID(*id)
	}
	return puo
}

// SetClientID sets the "client_id" edge to the Clients entity.
func (puo *PKCESUpdateOne) SetClientID(c *Clients) *PKCESUpdateOne {
	return puo.SetClientIDID(c.ID)
}

// SetSessionIDID sets the "session_id" edge to the Session entity by ID.
func (puo *PKCESUpdateOne) SetSessionIDID(id string) *PKCESUpdateOne {
	puo.mutation.SetSessionIDID(id)
	return puo
}

// SetNillableSessionIDID sets the "session_id" edge to the Session entity by ID if the given value is not nil.
func (puo *PKCESUpdateOne) SetNillableSessionIDID(id *string) *PKCESUpdateOne {
	if id != nil {
		puo = puo.SetSessionIDID(*id)
	}
	return puo
}

// SetSessionID sets the "session_id" edge to the Session entity.
func (puo *PKCESUpdateOne) SetSessionID(s *Session) *PKCESUpdateOne {
	return puo.SetSessionIDID(s.ID)
}

// Mutation returns the PKCESMutation object of the builder.
func (puo *PKCESUpdateOne) Mutation() *PKCESMutation {
	return puo.mutation
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (puo *PKCESUpdateOne) ClearClientID() *PKCESUpdateOne {
	puo.mutation.ClearClientID()
	return puo
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (puo *PKCESUpdateOne) ClearSessionID() *PKCESUpdateOne {
	puo.mutation.ClearSessionID()
	return puo
}

// Where appends a list predicates to the PKCESUpdate builder.
func (puo *PKCESUpdateOne) Where(ps ...predicate.PKCES) *PKCESUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PKCESUpdateOne) Select(field string, fields ...string) *PKCESUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated PKCES entity.
func (puo *PKCESUpdateOne) Save(ctx context.Context) (*PKCES, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PKCESUpdateOne) SaveX(ctx context.Context) *PKCES {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PKCESUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PKCESUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PKCESUpdateOne) sqlSave(ctx context.Context) (_node *PKCES, err error) {
	_spec := sqlgraph.NewUpdateSpec(pkces.Table, pkces.Columns, sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PKCES.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pkces.FieldID)
		for _, f := range fields {
			if !pkces.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pkces.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.RequestID(); ok {
		_spec.SetField(pkces.FieldRequestID, field.TypeString, value)
	}
	if value, ok := puo.mutation.RequestedAt(); ok {
		_spec.SetField(pkces.FieldRequestedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Scopes(); ok {
		_spec.SetField(pkces.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldScopes, value)
		})
	}
	if value, ok := puo.mutation.GrantedScopes(); ok {
		_spec.SetField(pkces.FieldGrantedScopes, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedGrantedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldGrantedScopes, value)
		})
	}
	if value, ok := puo.mutation.RequestedAudience(); ok {
		_spec.SetField(pkces.FieldRequestedAudience, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedRequestedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldRequestedAudience, value)
		})
	}
	if value, ok := puo.mutation.GrantedAudience(); ok {
		_spec.SetField(pkces.FieldGrantedAudience, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedGrantedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, pkces.FieldGrantedAudience, value)
		})
	}
	if value, ok := puo.mutation.Form(); ok {
		_spec.SetField(pkces.FieldForm, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.Lang(); ok {
		_spec.SetField(pkces.FieldLang, field.TypeJSON, value)
	}
	if puo.mutation.LangCleared() {
		_spec.ClearField(pkces.FieldLang, field.TypeJSON)
	}
	if puo.mutation.ClientIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.ClientIDTable,
			Columns: []string{pkces.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ClientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.ClientIDTable,
			Columns: []string{pkces.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SessionIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.SessionIDTable,
			Columns: []string{pkces.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SessionIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pkces.SessionIDTable,
			Columns: []string{pkces.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PKCES{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pkces.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
