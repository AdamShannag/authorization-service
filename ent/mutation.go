// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/accesstokens"
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/blacklistedjtis"
	"authorization-service/ent/clients"
	"authorization-service/ent/idsessions"
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/pkces"
	"authorization-service/ent/predicate"
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/refreshtokens"
	"authorization-service/ent/session"
	"authorization-service/ent/subjectpublickeys"
	"authorization-service/ent/user"
	"context"
	"errors"
	"fmt"
	"net/url"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"golang.org/x/text/language"
	jose "gopkg.in/square/go-jose.v2"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccessTokens      = "AccessTokens"
	TypeAuthorizeCodes    = "AuthorizeCodes"
	TypeBlacklistedJTIs   = "BlacklistedJTIs"
	TypeClients           = "Clients"
	TypeIDSessions        = "IDSessions"
	TypeIssuerPublicKeys  = "IssuerPublicKeys"
	TypePKCES             = "PKCES"
	TypePublicKeyScopes   = "PublicKeyScopes"
	TypeRefreshTokens     = "RefreshTokens"
	TypeSession           = "Session"
	TypeSubjectPublicKeys = "SubjectPublicKeys"
	TypeUser              = "User"
)

// AccessTokensMutation represents an operation that mutates the AccessTokens nodes in the graph.
type AccessTokensMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	request_id               *string
	requestedAt              *time.Time
	scopes                   *[]string
	appendscopes             []string
	granted_scopes           *[]string
	appendgranted_scopes     []string
	requested_audience       *[]string
	appendrequested_audience []string
	granted_audience         *[]string
	appendgranted_audience   []string
	form                     *url.Values
	lang                     *language.Tag
	clearedFields            map[string]struct{}
	client_id                *string
	clearedclient_id         bool
	session_id               *string
	clearedsession_id        bool
	done                     bool
	oldValue                 func(context.Context) (*AccessTokens, error)
	predicates               []predicate.AccessTokens
}

var _ ent.Mutation = (*AccessTokensMutation)(nil)

// accesstokensOption allows management of the mutation configuration using functional options.
type accesstokensOption func(*AccessTokensMutation)

// newAccessTokensMutation creates new mutation for the AccessTokens entity.
func newAccessTokensMutation(c config, op Op, opts ...accesstokensOption) *AccessTokensMutation {
	m := &AccessTokensMutation{
		config:        c,
		op:            op,
		typ:           TypeAccessTokens,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccessTokensID sets the ID field of the mutation.
func withAccessTokensID(id string) accesstokensOption {
	return func(m *AccessTokensMutation) {
		var (
			err   error
			once  sync.Once
			value *AccessTokens
		)
		m.oldValue = func(ctx context.Context) (*AccessTokens, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AccessTokens.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccessTokens sets the old AccessTokens of the mutation.
func withAccessTokens(node *AccessTokens) accesstokensOption {
	return func(m *AccessTokensMutation) {
		m.oldValue = func(context.Context) (*AccessTokens, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccessTokensMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccessTokensMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AccessTokens entities.
func (m *AccessTokensMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccessTokensMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccessTokensMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AccessTokens.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRequestID sets the "request_id" field.
func (m *AccessTokensMutation) SetRequestID(s string) {
	m.request_id = &s
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *AccessTokensMutation) RequestID() (r string, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldRequestID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *AccessTokensMutation) ResetRequestID() {
	m.request_id = nil
}

// SetRequestedAt sets the "requestedAt" field.
func (m *AccessTokensMutation) SetRequestedAt(t time.Time) {
	m.requestedAt = &t
}

// RequestedAt returns the value of the "requestedAt" field in the mutation.
func (m *AccessTokensMutation) RequestedAt() (r time.Time, exists bool) {
	v := m.requestedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAt returns the old "requestedAt" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldRequestedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAt: %w", err)
	}
	return oldValue.RequestedAt, nil
}

// ResetRequestedAt resets all changes to the "requestedAt" field.
func (m *AccessTokensMutation) ResetRequestedAt() {
	m.requestedAt = nil
}

// SetScopes sets the "scopes" field.
func (m *AccessTokensMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *AccessTokensMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *AccessTokensMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *AccessTokensMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ResetScopes resets all changes to the "scopes" field.
func (m *AccessTokensMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
}

// SetGrantedScopes sets the "granted_scopes" field.
func (m *AccessTokensMutation) SetGrantedScopes(s []string) {
	m.granted_scopes = &s
	m.appendgranted_scopes = nil
}

// GrantedScopes returns the value of the "granted_scopes" field in the mutation.
func (m *AccessTokensMutation) GrantedScopes() (r []string, exists bool) {
	v := m.granted_scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedScopes returns the old "granted_scopes" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldGrantedScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedScopes: %w", err)
	}
	return oldValue.GrantedScopes, nil
}

// AppendGrantedScopes adds s to the "granted_scopes" field.
func (m *AccessTokensMutation) AppendGrantedScopes(s []string) {
	m.appendgranted_scopes = append(m.appendgranted_scopes, s...)
}

// AppendedGrantedScopes returns the list of values that were appended to the "granted_scopes" field in this mutation.
func (m *AccessTokensMutation) AppendedGrantedScopes() ([]string, bool) {
	if len(m.appendgranted_scopes) == 0 {
		return nil, false
	}
	return m.appendgranted_scopes, true
}

// ResetGrantedScopes resets all changes to the "granted_scopes" field.
func (m *AccessTokensMutation) ResetGrantedScopes() {
	m.granted_scopes = nil
	m.appendgranted_scopes = nil
}

// SetRequestedAudience sets the "requested_audience" field.
func (m *AccessTokensMutation) SetRequestedAudience(s []string) {
	m.requested_audience = &s
	m.appendrequested_audience = nil
}

// RequestedAudience returns the value of the "requested_audience" field in the mutation.
func (m *AccessTokensMutation) RequestedAudience() (r []string, exists bool) {
	v := m.requested_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAudience returns the old "requested_audience" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldRequestedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAudience: %w", err)
	}
	return oldValue.RequestedAudience, nil
}

// AppendRequestedAudience adds s to the "requested_audience" field.
func (m *AccessTokensMutation) AppendRequestedAudience(s []string) {
	m.appendrequested_audience = append(m.appendrequested_audience, s...)
}

// AppendedRequestedAudience returns the list of values that were appended to the "requested_audience" field in this mutation.
func (m *AccessTokensMutation) AppendedRequestedAudience() ([]string, bool) {
	if len(m.appendrequested_audience) == 0 {
		return nil, false
	}
	return m.appendrequested_audience, true
}

// ResetRequestedAudience resets all changes to the "requested_audience" field.
func (m *AccessTokensMutation) ResetRequestedAudience() {
	m.requested_audience = nil
	m.appendrequested_audience = nil
}

// SetGrantedAudience sets the "granted_audience" field.
func (m *AccessTokensMutation) SetGrantedAudience(s []string) {
	m.granted_audience = &s
	m.appendgranted_audience = nil
}

// GrantedAudience returns the value of the "granted_audience" field in the mutation.
func (m *AccessTokensMutation) GrantedAudience() (r []string, exists bool) {
	v := m.granted_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedAudience returns the old "granted_audience" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldGrantedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedAudience: %w", err)
	}
	return oldValue.GrantedAudience, nil
}

// AppendGrantedAudience adds s to the "granted_audience" field.
func (m *AccessTokensMutation) AppendGrantedAudience(s []string) {
	m.appendgranted_audience = append(m.appendgranted_audience, s...)
}

// AppendedGrantedAudience returns the list of values that were appended to the "granted_audience" field in this mutation.
func (m *AccessTokensMutation) AppendedGrantedAudience() ([]string, bool) {
	if len(m.appendgranted_audience) == 0 {
		return nil, false
	}
	return m.appendgranted_audience, true
}

// ResetGrantedAudience resets all changes to the "granted_audience" field.
func (m *AccessTokensMutation) ResetGrantedAudience() {
	m.granted_audience = nil
	m.appendgranted_audience = nil
}

// SetForm sets the "form" field.
func (m *AccessTokensMutation) SetForm(u url.Values) {
	m.form = &u
}

// Form returns the value of the "form" field in the mutation.
func (m *AccessTokensMutation) Form() (r url.Values, exists bool) {
	v := m.form
	if v == nil {
		return
	}
	return *v, true
}

// OldForm returns the old "form" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldForm(ctx context.Context) (v url.Values, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForm: %w", err)
	}
	return oldValue.Form, nil
}

// ResetForm resets all changes to the "form" field.
func (m *AccessTokensMutation) ResetForm() {
	m.form = nil
}

// SetLang sets the "lang" field.
func (m *AccessTokensMutation) SetLang(l language.Tag) {
	m.lang = &l
}

// Lang returns the value of the "lang" field in the mutation.
func (m *AccessTokensMutation) Lang() (r language.Tag, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the AccessTokens entity.
// If the AccessTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccessTokensMutation) OldLang(ctx context.Context) (v language.Tag, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ClearLang clears the value of the "lang" field.
func (m *AccessTokensMutation) ClearLang() {
	m.lang = nil
	m.clearedFields[accesstokens.FieldLang] = struct{}{}
}

// LangCleared returns if the "lang" field was cleared in this mutation.
func (m *AccessTokensMutation) LangCleared() bool {
	_, ok := m.clearedFields[accesstokens.FieldLang]
	return ok
}

// ResetLang resets all changes to the "lang" field.
func (m *AccessTokensMutation) ResetLang() {
	m.lang = nil
	delete(m.clearedFields, accesstokens.FieldLang)
}

// SetClientIDID sets the "client_id" edge to the Clients entity by id.
func (m *AccessTokensMutation) SetClientIDID(id string) {
	m.client_id = &id
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (m *AccessTokensMutation) ClearClientID() {
	m.clearedclient_id = true
}

// ClientIDCleared reports if the "client_id" edge to the Clients entity was cleared.
func (m *AccessTokensMutation) ClientIDCleared() bool {
	return m.clearedclient_id
}

// ClientIDID returns the "client_id" edge ID in the mutation.
func (m *AccessTokensMutation) ClientIDID() (id string, exists bool) {
	if m.client_id != nil {
		return *m.client_id, true
	}
	return
}

// ClientIDIDs returns the "client_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientIDID instead. It exists only for internal usage by the builders.
func (m *AccessTokensMutation) ClientIDIDs() (ids []string) {
	if id := m.client_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClientID resets all changes to the "client_id" edge.
func (m *AccessTokensMutation) ResetClientID() {
	m.client_id = nil
	m.clearedclient_id = false
}

// SetSessionIDID sets the "session_id" edge to the Session entity by id.
func (m *AccessTokensMutation) SetSessionIDID(id string) {
	m.session_id = &id
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (m *AccessTokensMutation) ClearSessionID() {
	m.clearedsession_id = true
}

// SessionIDCleared reports if the "session_id" edge to the Session entity was cleared.
func (m *AccessTokensMutation) SessionIDCleared() bool {
	return m.clearedsession_id
}

// SessionIDID returns the "session_id" edge ID in the mutation.
func (m *AccessTokensMutation) SessionIDID() (id string, exists bool) {
	if m.session_id != nil {
		return *m.session_id, true
	}
	return
}

// SessionIDIDs returns the "session_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SessionIDID instead. It exists only for internal usage by the builders.
func (m *AccessTokensMutation) SessionIDIDs() (ids []string) {
	if id := m.session_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSessionID resets all changes to the "session_id" edge.
func (m *AccessTokensMutation) ResetSessionID() {
	m.session_id = nil
	m.clearedsession_id = false
}

// Where appends a list predicates to the AccessTokensMutation builder.
func (m *AccessTokensMutation) Where(ps ...predicate.AccessTokens) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccessTokensMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccessTokensMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AccessTokens, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccessTokensMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccessTokensMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AccessTokens).
func (m *AccessTokensMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccessTokensMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.request_id != nil {
		fields = append(fields, accesstokens.FieldRequestID)
	}
	if m.requestedAt != nil {
		fields = append(fields, accesstokens.FieldRequestedAt)
	}
	if m.scopes != nil {
		fields = append(fields, accesstokens.FieldScopes)
	}
	if m.granted_scopes != nil {
		fields = append(fields, accesstokens.FieldGrantedScopes)
	}
	if m.requested_audience != nil {
		fields = append(fields, accesstokens.FieldRequestedAudience)
	}
	if m.granted_audience != nil {
		fields = append(fields, accesstokens.FieldGrantedAudience)
	}
	if m.form != nil {
		fields = append(fields, accesstokens.FieldForm)
	}
	if m.lang != nil {
		fields = append(fields, accesstokens.FieldLang)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccessTokensMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case accesstokens.FieldRequestID:
		return m.RequestID()
	case accesstokens.FieldRequestedAt:
		return m.RequestedAt()
	case accesstokens.FieldScopes:
		return m.Scopes()
	case accesstokens.FieldGrantedScopes:
		return m.GrantedScopes()
	case accesstokens.FieldRequestedAudience:
		return m.RequestedAudience()
	case accesstokens.FieldGrantedAudience:
		return m.GrantedAudience()
	case accesstokens.FieldForm:
		return m.Form()
	case accesstokens.FieldLang:
		return m.Lang()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccessTokensMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case accesstokens.FieldRequestID:
		return m.OldRequestID(ctx)
	case accesstokens.FieldRequestedAt:
		return m.OldRequestedAt(ctx)
	case accesstokens.FieldScopes:
		return m.OldScopes(ctx)
	case accesstokens.FieldGrantedScopes:
		return m.OldGrantedScopes(ctx)
	case accesstokens.FieldRequestedAudience:
		return m.OldRequestedAudience(ctx)
	case accesstokens.FieldGrantedAudience:
		return m.OldGrantedAudience(ctx)
	case accesstokens.FieldForm:
		return m.OldForm(ctx)
	case accesstokens.FieldLang:
		return m.OldLang(ctx)
	}
	return nil, fmt.Errorf("unknown AccessTokens field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessTokensMutation) SetField(name string, value ent.Value) error {
	switch name {
	case accesstokens.FieldRequestID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	case accesstokens.FieldRequestedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAt(v)
		return nil
	case accesstokens.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case accesstokens.FieldGrantedScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedScopes(v)
		return nil
	case accesstokens.FieldRequestedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAudience(v)
		return nil
	case accesstokens.FieldGrantedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedAudience(v)
		return nil
	case accesstokens.FieldForm:
		v, ok := value.(url.Values)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForm(v)
		return nil
	case accesstokens.FieldLang:
		v, ok := value.(language.Tag)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	}
	return fmt.Errorf("unknown AccessTokens field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccessTokensMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccessTokensMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccessTokensMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AccessTokens numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccessTokensMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(accesstokens.FieldLang) {
		fields = append(fields, accesstokens.FieldLang)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccessTokensMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccessTokensMutation) ClearField(name string) error {
	switch name {
	case accesstokens.FieldLang:
		m.ClearLang()
		return nil
	}
	return fmt.Errorf("unknown AccessTokens nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccessTokensMutation) ResetField(name string) error {
	switch name {
	case accesstokens.FieldRequestID:
		m.ResetRequestID()
		return nil
	case accesstokens.FieldRequestedAt:
		m.ResetRequestedAt()
		return nil
	case accesstokens.FieldScopes:
		m.ResetScopes()
		return nil
	case accesstokens.FieldGrantedScopes:
		m.ResetGrantedScopes()
		return nil
	case accesstokens.FieldRequestedAudience:
		m.ResetRequestedAudience()
		return nil
	case accesstokens.FieldGrantedAudience:
		m.ResetGrantedAudience()
		return nil
	case accesstokens.FieldForm:
		m.ResetForm()
		return nil
	case accesstokens.FieldLang:
		m.ResetLang()
		return nil
	}
	return fmt.Errorf("unknown AccessTokens field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccessTokensMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.client_id != nil {
		edges = append(edges, accesstokens.EdgeClientID)
	}
	if m.session_id != nil {
		edges = append(edges, accesstokens.EdgeSessionID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccessTokensMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case accesstokens.EdgeClientID:
		if id := m.client_id; id != nil {
			return []ent.Value{*id}
		}
	case accesstokens.EdgeSessionID:
		if id := m.session_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccessTokensMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccessTokensMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccessTokensMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclient_id {
		edges = append(edges, accesstokens.EdgeClientID)
	}
	if m.clearedsession_id {
		edges = append(edges, accesstokens.EdgeSessionID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccessTokensMutation) EdgeCleared(name string) bool {
	switch name {
	case accesstokens.EdgeClientID:
		return m.clearedclient_id
	case accesstokens.EdgeSessionID:
		return m.clearedsession_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccessTokensMutation) ClearEdge(name string) error {
	switch name {
	case accesstokens.EdgeClientID:
		m.ClearClientID()
		return nil
	case accesstokens.EdgeSessionID:
		m.ClearSessionID()
		return nil
	}
	return fmt.Errorf("unknown AccessTokens unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccessTokensMutation) ResetEdge(name string) error {
	switch name {
	case accesstokens.EdgeClientID:
		m.ResetClientID()
		return nil
	case accesstokens.EdgeSessionID:
		m.ResetSessionID()
		return nil
	}
	return fmt.Errorf("unknown AccessTokens edge %s", name)
}

// AuthorizeCodesMutation represents an operation that mutates the AuthorizeCodes nodes in the graph.
type AuthorizeCodesMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	request_id               *string
	requestedAt              *time.Time
	scopes                   *[]string
	appendscopes             []string
	granted_scopes           *[]string
	appendgranted_scopes     []string
	requested_audience       *[]string
	appendrequested_audience []string
	granted_audience         *[]string
	appendgranted_audience   []string
	form                     *url.Values
	lang                     *language.Tag
	active                   *bool
	clearedFields            map[string]struct{}
	client_id                *string
	clearedclient_id         bool
	session_id               *string
	clearedsession_id        bool
	done                     bool
	oldValue                 func(context.Context) (*AuthorizeCodes, error)
	predicates               []predicate.AuthorizeCodes
}

var _ ent.Mutation = (*AuthorizeCodesMutation)(nil)

// authorizecodesOption allows management of the mutation configuration using functional options.
type authorizecodesOption func(*AuthorizeCodesMutation)

// newAuthorizeCodesMutation creates new mutation for the AuthorizeCodes entity.
func newAuthorizeCodesMutation(c config, op Op, opts ...authorizecodesOption) *AuthorizeCodesMutation {
	m := &AuthorizeCodesMutation{
		config:        c,
		op:            op,
		typ:           TypeAuthorizeCodes,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAuthorizeCodesID sets the ID field of the mutation.
func withAuthorizeCodesID(id string) authorizecodesOption {
	return func(m *AuthorizeCodesMutation) {
		var (
			err   error
			once  sync.Once
			value *AuthorizeCodes
		)
		m.oldValue = func(ctx context.Context) (*AuthorizeCodes, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AuthorizeCodes.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAuthorizeCodes sets the old AuthorizeCodes of the mutation.
func withAuthorizeCodes(node *AuthorizeCodes) authorizecodesOption {
	return func(m *AuthorizeCodesMutation) {
		m.oldValue = func(context.Context) (*AuthorizeCodes, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AuthorizeCodesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AuthorizeCodesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of AuthorizeCodes entities.
func (m *AuthorizeCodesMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AuthorizeCodesMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AuthorizeCodesMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AuthorizeCodes.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRequestID sets the "request_id" field.
func (m *AuthorizeCodesMutation) SetRequestID(s string) {
	m.request_id = &s
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *AuthorizeCodesMutation) RequestID() (r string, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldRequestID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *AuthorizeCodesMutation) ResetRequestID() {
	m.request_id = nil
}

// SetRequestedAt sets the "requestedAt" field.
func (m *AuthorizeCodesMutation) SetRequestedAt(t time.Time) {
	m.requestedAt = &t
}

// RequestedAt returns the value of the "requestedAt" field in the mutation.
func (m *AuthorizeCodesMutation) RequestedAt() (r time.Time, exists bool) {
	v := m.requestedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAt returns the old "requestedAt" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldRequestedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAt: %w", err)
	}
	return oldValue.RequestedAt, nil
}

// ResetRequestedAt resets all changes to the "requestedAt" field.
func (m *AuthorizeCodesMutation) ResetRequestedAt() {
	m.requestedAt = nil
}

// SetScopes sets the "scopes" field.
func (m *AuthorizeCodesMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *AuthorizeCodesMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *AuthorizeCodesMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *AuthorizeCodesMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ResetScopes resets all changes to the "scopes" field.
func (m *AuthorizeCodesMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
}

// SetGrantedScopes sets the "granted_scopes" field.
func (m *AuthorizeCodesMutation) SetGrantedScopes(s []string) {
	m.granted_scopes = &s
	m.appendgranted_scopes = nil
}

// GrantedScopes returns the value of the "granted_scopes" field in the mutation.
func (m *AuthorizeCodesMutation) GrantedScopes() (r []string, exists bool) {
	v := m.granted_scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedScopes returns the old "granted_scopes" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldGrantedScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedScopes: %w", err)
	}
	return oldValue.GrantedScopes, nil
}

// AppendGrantedScopes adds s to the "granted_scopes" field.
func (m *AuthorizeCodesMutation) AppendGrantedScopes(s []string) {
	m.appendgranted_scopes = append(m.appendgranted_scopes, s...)
}

// AppendedGrantedScopes returns the list of values that were appended to the "granted_scopes" field in this mutation.
func (m *AuthorizeCodesMutation) AppendedGrantedScopes() ([]string, bool) {
	if len(m.appendgranted_scopes) == 0 {
		return nil, false
	}
	return m.appendgranted_scopes, true
}

// ResetGrantedScopes resets all changes to the "granted_scopes" field.
func (m *AuthorizeCodesMutation) ResetGrantedScopes() {
	m.granted_scopes = nil
	m.appendgranted_scopes = nil
}

// SetRequestedAudience sets the "requested_audience" field.
func (m *AuthorizeCodesMutation) SetRequestedAudience(s []string) {
	m.requested_audience = &s
	m.appendrequested_audience = nil
}

// RequestedAudience returns the value of the "requested_audience" field in the mutation.
func (m *AuthorizeCodesMutation) RequestedAudience() (r []string, exists bool) {
	v := m.requested_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAudience returns the old "requested_audience" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldRequestedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAudience: %w", err)
	}
	return oldValue.RequestedAudience, nil
}

// AppendRequestedAudience adds s to the "requested_audience" field.
func (m *AuthorizeCodesMutation) AppendRequestedAudience(s []string) {
	m.appendrequested_audience = append(m.appendrequested_audience, s...)
}

// AppendedRequestedAudience returns the list of values that were appended to the "requested_audience" field in this mutation.
func (m *AuthorizeCodesMutation) AppendedRequestedAudience() ([]string, bool) {
	if len(m.appendrequested_audience) == 0 {
		return nil, false
	}
	return m.appendrequested_audience, true
}

// ResetRequestedAudience resets all changes to the "requested_audience" field.
func (m *AuthorizeCodesMutation) ResetRequestedAudience() {
	m.requested_audience = nil
	m.appendrequested_audience = nil
}

// SetGrantedAudience sets the "granted_audience" field.
func (m *AuthorizeCodesMutation) SetGrantedAudience(s []string) {
	m.granted_audience = &s
	m.appendgranted_audience = nil
}

// GrantedAudience returns the value of the "granted_audience" field in the mutation.
func (m *AuthorizeCodesMutation) GrantedAudience() (r []string, exists bool) {
	v := m.granted_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedAudience returns the old "granted_audience" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldGrantedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedAudience: %w", err)
	}
	return oldValue.GrantedAudience, nil
}

// AppendGrantedAudience adds s to the "granted_audience" field.
func (m *AuthorizeCodesMutation) AppendGrantedAudience(s []string) {
	m.appendgranted_audience = append(m.appendgranted_audience, s...)
}

// AppendedGrantedAudience returns the list of values that were appended to the "granted_audience" field in this mutation.
func (m *AuthorizeCodesMutation) AppendedGrantedAudience() ([]string, bool) {
	if len(m.appendgranted_audience) == 0 {
		return nil, false
	}
	return m.appendgranted_audience, true
}

// ResetGrantedAudience resets all changes to the "granted_audience" field.
func (m *AuthorizeCodesMutation) ResetGrantedAudience() {
	m.granted_audience = nil
	m.appendgranted_audience = nil
}

// SetForm sets the "form" field.
func (m *AuthorizeCodesMutation) SetForm(u url.Values) {
	m.form = &u
}

// Form returns the value of the "form" field in the mutation.
func (m *AuthorizeCodesMutation) Form() (r url.Values, exists bool) {
	v := m.form
	if v == nil {
		return
	}
	return *v, true
}

// OldForm returns the old "form" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldForm(ctx context.Context) (v url.Values, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForm: %w", err)
	}
	return oldValue.Form, nil
}

// ResetForm resets all changes to the "form" field.
func (m *AuthorizeCodesMutation) ResetForm() {
	m.form = nil
}

// SetLang sets the "lang" field.
func (m *AuthorizeCodesMutation) SetLang(l language.Tag) {
	m.lang = &l
}

// Lang returns the value of the "lang" field in the mutation.
func (m *AuthorizeCodesMutation) Lang() (r language.Tag, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldLang(ctx context.Context) (v language.Tag, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ClearLang clears the value of the "lang" field.
func (m *AuthorizeCodesMutation) ClearLang() {
	m.lang = nil
	m.clearedFields[authorizecodes.FieldLang] = struct{}{}
}

// LangCleared returns if the "lang" field was cleared in this mutation.
func (m *AuthorizeCodesMutation) LangCleared() bool {
	_, ok := m.clearedFields[authorizecodes.FieldLang]
	return ok
}

// ResetLang resets all changes to the "lang" field.
func (m *AuthorizeCodesMutation) ResetLang() {
	m.lang = nil
	delete(m.clearedFields, authorizecodes.FieldLang)
}

// SetActive sets the "active" field.
func (m *AuthorizeCodesMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *AuthorizeCodesMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the AuthorizeCodes entity.
// If the AuthorizeCodes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AuthorizeCodesMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *AuthorizeCodesMutation) ResetActive() {
	m.active = nil
}

// SetClientIDID sets the "client_id" edge to the Clients entity by id.
func (m *AuthorizeCodesMutation) SetClientIDID(id string) {
	m.client_id = &id
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (m *AuthorizeCodesMutation) ClearClientID() {
	m.clearedclient_id = true
}

// ClientIDCleared reports if the "client_id" edge to the Clients entity was cleared.
func (m *AuthorizeCodesMutation) ClientIDCleared() bool {
	return m.clearedclient_id
}

// ClientIDID returns the "client_id" edge ID in the mutation.
func (m *AuthorizeCodesMutation) ClientIDID() (id string, exists bool) {
	if m.client_id != nil {
		return *m.client_id, true
	}
	return
}

// ClientIDIDs returns the "client_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientIDID instead. It exists only for internal usage by the builders.
func (m *AuthorizeCodesMutation) ClientIDIDs() (ids []string) {
	if id := m.client_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClientID resets all changes to the "client_id" edge.
func (m *AuthorizeCodesMutation) ResetClientID() {
	m.client_id = nil
	m.clearedclient_id = false
}

// SetSessionIDID sets the "session_id" edge to the Session entity by id.
func (m *AuthorizeCodesMutation) SetSessionIDID(id string) {
	m.session_id = &id
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (m *AuthorizeCodesMutation) ClearSessionID() {
	m.clearedsession_id = true
}

// SessionIDCleared reports if the "session_id" edge to the Session entity was cleared.
func (m *AuthorizeCodesMutation) SessionIDCleared() bool {
	return m.clearedsession_id
}

// SessionIDID returns the "session_id" edge ID in the mutation.
func (m *AuthorizeCodesMutation) SessionIDID() (id string, exists bool) {
	if m.session_id != nil {
		return *m.session_id, true
	}
	return
}

// SessionIDIDs returns the "session_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SessionIDID instead. It exists only for internal usage by the builders.
func (m *AuthorizeCodesMutation) SessionIDIDs() (ids []string) {
	if id := m.session_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSessionID resets all changes to the "session_id" edge.
func (m *AuthorizeCodesMutation) ResetSessionID() {
	m.session_id = nil
	m.clearedsession_id = false
}

// Where appends a list predicates to the AuthorizeCodesMutation builder.
func (m *AuthorizeCodesMutation) Where(ps ...predicate.AuthorizeCodes) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AuthorizeCodesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AuthorizeCodesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AuthorizeCodes, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AuthorizeCodesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AuthorizeCodesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AuthorizeCodes).
func (m *AuthorizeCodesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AuthorizeCodesMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.request_id != nil {
		fields = append(fields, authorizecodes.FieldRequestID)
	}
	if m.requestedAt != nil {
		fields = append(fields, authorizecodes.FieldRequestedAt)
	}
	if m.scopes != nil {
		fields = append(fields, authorizecodes.FieldScopes)
	}
	if m.granted_scopes != nil {
		fields = append(fields, authorizecodes.FieldGrantedScopes)
	}
	if m.requested_audience != nil {
		fields = append(fields, authorizecodes.FieldRequestedAudience)
	}
	if m.granted_audience != nil {
		fields = append(fields, authorizecodes.FieldGrantedAudience)
	}
	if m.form != nil {
		fields = append(fields, authorizecodes.FieldForm)
	}
	if m.lang != nil {
		fields = append(fields, authorizecodes.FieldLang)
	}
	if m.active != nil {
		fields = append(fields, authorizecodes.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AuthorizeCodesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case authorizecodes.FieldRequestID:
		return m.RequestID()
	case authorizecodes.FieldRequestedAt:
		return m.RequestedAt()
	case authorizecodes.FieldScopes:
		return m.Scopes()
	case authorizecodes.FieldGrantedScopes:
		return m.GrantedScopes()
	case authorizecodes.FieldRequestedAudience:
		return m.RequestedAudience()
	case authorizecodes.FieldGrantedAudience:
		return m.GrantedAudience()
	case authorizecodes.FieldForm:
		return m.Form()
	case authorizecodes.FieldLang:
		return m.Lang()
	case authorizecodes.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AuthorizeCodesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case authorizecodes.FieldRequestID:
		return m.OldRequestID(ctx)
	case authorizecodes.FieldRequestedAt:
		return m.OldRequestedAt(ctx)
	case authorizecodes.FieldScopes:
		return m.OldScopes(ctx)
	case authorizecodes.FieldGrantedScopes:
		return m.OldGrantedScopes(ctx)
	case authorizecodes.FieldRequestedAudience:
		return m.OldRequestedAudience(ctx)
	case authorizecodes.FieldGrantedAudience:
		return m.OldGrantedAudience(ctx)
	case authorizecodes.FieldForm:
		return m.OldForm(ctx)
	case authorizecodes.FieldLang:
		return m.OldLang(ctx)
	case authorizecodes.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown AuthorizeCodes field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorizeCodesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case authorizecodes.FieldRequestID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	case authorizecodes.FieldRequestedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAt(v)
		return nil
	case authorizecodes.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case authorizecodes.FieldGrantedScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedScopes(v)
		return nil
	case authorizecodes.FieldRequestedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAudience(v)
		return nil
	case authorizecodes.FieldGrantedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedAudience(v)
		return nil
	case authorizecodes.FieldForm:
		v, ok := value.(url.Values)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForm(v)
		return nil
	case authorizecodes.FieldLang:
		v, ok := value.(language.Tag)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	case authorizecodes.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown AuthorizeCodes field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AuthorizeCodesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AuthorizeCodesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AuthorizeCodesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AuthorizeCodes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AuthorizeCodesMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(authorizecodes.FieldLang) {
		fields = append(fields, authorizecodes.FieldLang)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AuthorizeCodesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AuthorizeCodesMutation) ClearField(name string) error {
	switch name {
	case authorizecodes.FieldLang:
		m.ClearLang()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeCodes nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AuthorizeCodesMutation) ResetField(name string) error {
	switch name {
	case authorizecodes.FieldRequestID:
		m.ResetRequestID()
		return nil
	case authorizecodes.FieldRequestedAt:
		m.ResetRequestedAt()
		return nil
	case authorizecodes.FieldScopes:
		m.ResetScopes()
		return nil
	case authorizecodes.FieldGrantedScopes:
		m.ResetGrantedScopes()
		return nil
	case authorizecodes.FieldRequestedAudience:
		m.ResetRequestedAudience()
		return nil
	case authorizecodes.FieldGrantedAudience:
		m.ResetGrantedAudience()
		return nil
	case authorizecodes.FieldForm:
		m.ResetForm()
		return nil
	case authorizecodes.FieldLang:
		m.ResetLang()
		return nil
	case authorizecodes.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeCodes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AuthorizeCodesMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.client_id != nil {
		edges = append(edges, authorizecodes.EdgeClientID)
	}
	if m.session_id != nil {
		edges = append(edges, authorizecodes.EdgeSessionID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AuthorizeCodesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case authorizecodes.EdgeClientID:
		if id := m.client_id; id != nil {
			return []ent.Value{*id}
		}
	case authorizecodes.EdgeSessionID:
		if id := m.session_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AuthorizeCodesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AuthorizeCodesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AuthorizeCodesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclient_id {
		edges = append(edges, authorizecodes.EdgeClientID)
	}
	if m.clearedsession_id {
		edges = append(edges, authorizecodes.EdgeSessionID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AuthorizeCodesMutation) EdgeCleared(name string) bool {
	switch name {
	case authorizecodes.EdgeClientID:
		return m.clearedclient_id
	case authorizecodes.EdgeSessionID:
		return m.clearedsession_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AuthorizeCodesMutation) ClearEdge(name string) error {
	switch name {
	case authorizecodes.EdgeClientID:
		m.ClearClientID()
		return nil
	case authorizecodes.EdgeSessionID:
		m.ClearSessionID()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeCodes unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AuthorizeCodesMutation) ResetEdge(name string) error {
	switch name {
	case authorizecodes.EdgeClientID:
		m.ResetClientID()
		return nil
	case authorizecodes.EdgeSessionID:
		m.ResetSessionID()
		return nil
	}
	return fmt.Errorf("unknown AuthorizeCodes edge %s", name)
}

// BlacklistedJTIsMutation represents an operation that mutates the BlacklistedJTIs nodes in the graph.
type BlacklistedJTIsMutation struct {
	config
	op            Op
	typ           string
	id            *string
	expiry        *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BlacklistedJTIs, error)
	predicates    []predicate.BlacklistedJTIs
}

var _ ent.Mutation = (*BlacklistedJTIsMutation)(nil)

// blacklistedjtisOption allows management of the mutation configuration using functional options.
type blacklistedjtisOption func(*BlacklistedJTIsMutation)

// newBlacklistedJTIsMutation creates new mutation for the BlacklistedJTIs entity.
func newBlacklistedJTIsMutation(c config, op Op, opts ...blacklistedjtisOption) *BlacklistedJTIsMutation {
	m := &BlacklistedJTIsMutation{
		config:        c,
		op:            op,
		typ:           TypeBlacklistedJTIs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBlacklistedJTIsID sets the ID field of the mutation.
func withBlacklistedJTIsID(id string) blacklistedjtisOption {
	return func(m *BlacklistedJTIsMutation) {
		var (
			err   error
			once  sync.Once
			value *BlacklistedJTIs
		)
		m.oldValue = func(ctx context.Context) (*BlacklistedJTIs, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BlacklistedJTIs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBlacklistedJTIs sets the old BlacklistedJTIs of the mutation.
func withBlacklistedJTIs(node *BlacklistedJTIs) blacklistedjtisOption {
	return func(m *BlacklistedJTIsMutation) {
		m.oldValue = func(context.Context) (*BlacklistedJTIs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BlacklistedJTIsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BlacklistedJTIsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of BlacklistedJTIs entities.
func (m *BlacklistedJTIsMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BlacklistedJTIsMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BlacklistedJTIsMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().BlacklistedJTIs.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExpiry sets the "expiry" field.
func (m *BlacklistedJTIsMutation) SetExpiry(t time.Time) {
	m.expiry = &t
}

// Expiry returns the value of the "expiry" field in the mutation.
func (m *BlacklistedJTIsMutation) Expiry() (r time.Time, exists bool) {
	v := m.expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiry returns the old "expiry" field's value of the BlacklistedJTIs entity.
// If the BlacklistedJTIs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BlacklistedJTIsMutation) OldExpiry(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiry: %w", err)
	}
	return oldValue.Expiry, nil
}

// ResetExpiry resets all changes to the "expiry" field.
func (m *BlacklistedJTIsMutation) ResetExpiry() {
	m.expiry = nil
}

// Where appends a list predicates to the BlacklistedJTIsMutation builder.
func (m *BlacklistedJTIsMutation) Where(ps ...predicate.BlacklistedJTIs) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the BlacklistedJTIsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *BlacklistedJTIsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.BlacklistedJTIs, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *BlacklistedJTIsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *BlacklistedJTIsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (BlacklistedJTIs).
func (m *BlacklistedJTIsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BlacklistedJTIsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.expiry != nil {
		fields = append(fields, blacklistedjtis.FieldExpiry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BlacklistedJTIsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case blacklistedjtis.FieldExpiry:
		return m.Expiry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BlacklistedJTIsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case blacklistedjtis.FieldExpiry:
		return m.OldExpiry(ctx)
	}
	return nil, fmt.Errorf("unknown BlacklistedJTIs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlacklistedJTIsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case blacklistedjtis.FieldExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiry(v)
		return nil
	}
	return fmt.Errorf("unknown BlacklistedJTIs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BlacklistedJTIsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BlacklistedJTIsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BlacklistedJTIsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BlacklistedJTIs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BlacklistedJTIsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BlacklistedJTIsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BlacklistedJTIsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BlacklistedJTIs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BlacklistedJTIsMutation) ResetField(name string) error {
	switch name {
	case blacklistedjtis.FieldExpiry:
		m.ResetExpiry()
		return nil
	}
	return fmt.Errorf("unknown BlacklistedJTIs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BlacklistedJTIsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BlacklistedJTIsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BlacklistedJTIsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BlacklistedJTIsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BlacklistedJTIsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BlacklistedJTIsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BlacklistedJTIsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BlacklistedJTIs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BlacklistedJTIsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BlacklistedJTIs edge %s", name)
}

// ClientsMutation represents an operation that mutates the Clients nodes in the graph.
type ClientsMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	client_secret         *[]byte
	rotated_secrets       *[][]uint8
	appendrotated_secrets [][]uint8
	redirect_uris         *[]string
	appendredirect_uris   []string
	grant_types           *[]string
	appendgrant_types     []string
	response_types        *[]string
	appendresponse_types  []string
	scopes                *[]string
	appendscopes          []string
	audience              *[]string
	appendaudience        []string
	public                *bool
	clearedFields         map[string]struct{}
	access_token          map[string]struct{}
	removedaccess_token   map[string]struct{}
	clearedaccess_token   bool
	authorize_code        map[string]struct{}
	removedauthorize_code map[string]struct{}
	clearedauthorize_code bool
	refresh_token         map[string]struct{}
	removedrefresh_token  map[string]struct{}
	clearedrefresh_token  bool
	id_session            map[string]struct{}
	removedid_session     map[string]struct{}
	clearedid_session     bool
	pkce                  map[string]struct{}
	removedpkce           map[string]struct{}
	clearedpkce           bool
	done                  bool
	oldValue              func(context.Context) (*Clients, error)
	predicates            []predicate.Clients
}

var _ ent.Mutation = (*ClientsMutation)(nil)

// clientsOption allows management of the mutation configuration using functional options.
type clientsOption func(*ClientsMutation)

// newClientsMutation creates new mutation for the Clients entity.
func newClientsMutation(c config, op Op, opts ...clientsOption) *ClientsMutation {
	m := &ClientsMutation{
		config:        c,
		op:            op,
		typ:           TypeClients,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withClientsID sets the ID field of the mutation.
func withClientsID(id string) clientsOption {
	return func(m *ClientsMutation) {
		var (
			err   error
			once  sync.Once
			value *Clients
		)
		m.oldValue = func(ctx context.Context) (*Clients, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Clients.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withClients sets the old Clients of the mutation.
func withClients(node *Clients) clientsOption {
	return func(m *ClientsMutation) {
		m.oldValue = func(context.Context) (*Clients, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ClientsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ClientsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Clients entities.
func (m *ClientsMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ClientsMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ClientsMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Clients.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClientSecret sets the "client_secret" field.
func (m *ClientsMutation) SetClientSecret(b []byte) {
	m.client_secret = &b
}

// ClientSecret returns the value of the "client_secret" field in the mutation.
func (m *ClientsMutation) ClientSecret() (r []byte, exists bool) {
	v := m.client_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldClientSecret returns the old "client_secret" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldClientSecret(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientSecret: %w", err)
	}
	return oldValue.ClientSecret, nil
}

// ResetClientSecret resets all changes to the "client_secret" field.
func (m *ClientsMutation) ResetClientSecret() {
	m.client_secret = nil
}

// SetRotatedSecrets sets the "rotated_secrets" field.
func (m *ClientsMutation) SetRotatedSecrets(u [][]uint8) {
	m.rotated_secrets = &u
	m.appendrotated_secrets = nil
}

// RotatedSecrets returns the value of the "rotated_secrets" field in the mutation.
func (m *ClientsMutation) RotatedSecrets() (r [][]uint8, exists bool) {
	v := m.rotated_secrets
	if v == nil {
		return
	}
	return *v, true
}

// OldRotatedSecrets returns the old "rotated_secrets" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldRotatedSecrets(ctx context.Context) (v [][]uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRotatedSecrets is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRotatedSecrets requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRotatedSecrets: %w", err)
	}
	return oldValue.RotatedSecrets, nil
}

// AppendRotatedSecrets adds u to the "rotated_secrets" field.
func (m *ClientsMutation) AppendRotatedSecrets(u [][]uint8) {
	m.appendrotated_secrets = append(m.appendrotated_secrets, u...)
}

// AppendedRotatedSecrets returns the list of values that were appended to the "rotated_secrets" field in this mutation.
func (m *ClientsMutation) AppendedRotatedSecrets() ([][]uint8, bool) {
	if len(m.appendrotated_secrets) == 0 {
		return nil, false
	}
	return m.appendrotated_secrets, true
}

// ResetRotatedSecrets resets all changes to the "rotated_secrets" field.
func (m *ClientsMutation) ResetRotatedSecrets() {
	m.rotated_secrets = nil
	m.appendrotated_secrets = nil
}

// SetRedirectUris sets the "redirect_uris" field.
func (m *ClientsMutation) SetRedirectUris(s []string) {
	m.redirect_uris = &s
	m.appendredirect_uris = nil
}

// RedirectUris returns the value of the "redirect_uris" field in the mutation.
func (m *ClientsMutation) RedirectUris() (r []string, exists bool) {
	v := m.redirect_uris
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirectUris returns the old "redirect_uris" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldRedirectUris(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirectUris is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirectUris requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirectUris: %w", err)
	}
	return oldValue.RedirectUris, nil
}

// AppendRedirectUris adds s to the "redirect_uris" field.
func (m *ClientsMutation) AppendRedirectUris(s []string) {
	m.appendredirect_uris = append(m.appendredirect_uris, s...)
}

// AppendedRedirectUris returns the list of values that were appended to the "redirect_uris" field in this mutation.
func (m *ClientsMutation) AppendedRedirectUris() ([]string, bool) {
	if len(m.appendredirect_uris) == 0 {
		return nil, false
	}
	return m.appendredirect_uris, true
}

// ResetRedirectUris resets all changes to the "redirect_uris" field.
func (m *ClientsMutation) ResetRedirectUris() {
	m.redirect_uris = nil
	m.appendredirect_uris = nil
}

// SetGrantTypes sets the "grant_types" field.
func (m *ClientsMutation) SetGrantTypes(s []string) {
	m.grant_types = &s
	m.appendgrant_types = nil
}

// GrantTypes returns the value of the "grant_types" field in the mutation.
func (m *ClientsMutation) GrantTypes() (r []string, exists bool) {
	v := m.grant_types
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantTypes returns the old "grant_types" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldGrantTypes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantTypes: %w", err)
	}
	return oldValue.GrantTypes, nil
}

// AppendGrantTypes adds s to the "grant_types" field.
func (m *ClientsMutation) AppendGrantTypes(s []string) {
	m.appendgrant_types = append(m.appendgrant_types, s...)
}

// AppendedGrantTypes returns the list of values that were appended to the "grant_types" field in this mutation.
func (m *ClientsMutation) AppendedGrantTypes() ([]string, bool) {
	if len(m.appendgrant_types) == 0 {
		return nil, false
	}
	return m.appendgrant_types, true
}

// ResetGrantTypes resets all changes to the "grant_types" field.
func (m *ClientsMutation) ResetGrantTypes() {
	m.grant_types = nil
	m.appendgrant_types = nil
}

// SetResponseTypes sets the "response_types" field.
func (m *ClientsMutation) SetResponseTypes(s []string) {
	m.response_types = &s
	m.appendresponse_types = nil
}

// ResponseTypes returns the value of the "response_types" field in the mutation.
func (m *ClientsMutation) ResponseTypes() (r []string, exists bool) {
	v := m.response_types
	if v == nil {
		return
	}
	return *v, true
}

// OldResponseTypes returns the old "response_types" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldResponseTypes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResponseTypes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResponseTypes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResponseTypes: %w", err)
	}
	return oldValue.ResponseTypes, nil
}

// AppendResponseTypes adds s to the "response_types" field.
func (m *ClientsMutation) AppendResponseTypes(s []string) {
	m.appendresponse_types = append(m.appendresponse_types, s...)
}

// AppendedResponseTypes returns the list of values that were appended to the "response_types" field in this mutation.
func (m *ClientsMutation) AppendedResponseTypes() ([]string, bool) {
	if len(m.appendresponse_types) == 0 {
		return nil, false
	}
	return m.appendresponse_types, true
}

// ResetResponseTypes resets all changes to the "response_types" field.
func (m *ClientsMutation) ResetResponseTypes() {
	m.response_types = nil
	m.appendresponse_types = nil
}

// SetScopes sets the "scopes" field.
func (m *ClientsMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *ClientsMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *ClientsMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *ClientsMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ResetScopes resets all changes to the "scopes" field.
func (m *ClientsMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
}

// SetAudience sets the "audience" field.
func (m *ClientsMutation) SetAudience(s []string) {
	m.audience = &s
	m.appendaudience = nil
}

// Audience returns the value of the "audience" field in the mutation.
func (m *ClientsMutation) Audience() (r []string, exists bool) {
	v := m.audience
	if v == nil {
		return
	}
	return *v, true
}

// OldAudience returns the old "audience" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAudience: %w", err)
	}
	return oldValue.Audience, nil
}

// AppendAudience adds s to the "audience" field.
func (m *ClientsMutation) AppendAudience(s []string) {
	m.appendaudience = append(m.appendaudience, s...)
}

// AppendedAudience returns the list of values that were appended to the "audience" field in this mutation.
func (m *ClientsMutation) AppendedAudience() ([]string, bool) {
	if len(m.appendaudience) == 0 {
		return nil, false
	}
	return m.appendaudience, true
}

// ClearAudience clears the value of the "audience" field.
func (m *ClientsMutation) ClearAudience() {
	m.audience = nil
	m.appendaudience = nil
	m.clearedFields[clients.FieldAudience] = struct{}{}
}

// AudienceCleared returns if the "audience" field was cleared in this mutation.
func (m *ClientsMutation) AudienceCleared() bool {
	_, ok := m.clearedFields[clients.FieldAudience]
	return ok
}

// ResetAudience resets all changes to the "audience" field.
func (m *ClientsMutation) ResetAudience() {
	m.audience = nil
	m.appendaudience = nil
	delete(m.clearedFields, clients.FieldAudience)
}

// SetPublic sets the "public" field.
func (m *ClientsMutation) SetPublic(b bool) {
	m.public = &b
}

// Public returns the value of the "public" field in the mutation.
func (m *ClientsMutation) Public() (r bool, exists bool) {
	v := m.public
	if v == nil {
		return
	}
	return *v, true
}

// OldPublic returns the old "public" field's value of the Clients entity.
// If the Clients object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ClientsMutation) OldPublic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublic: %w", err)
	}
	return oldValue.Public, nil
}

// ClearPublic clears the value of the "public" field.
func (m *ClientsMutation) ClearPublic() {
	m.public = nil
	m.clearedFields[clients.FieldPublic] = struct{}{}
}

// PublicCleared returns if the "public" field was cleared in this mutation.
func (m *ClientsMutation) PublicCleared() bool {
	_, ok := m.clearedFields[clients.FieldPublic]
	return ok
}

// ResetPublic resets all changes to the "public" field.
func (m *ClientsMutation) ResetPublic() {
	m.public = nil
	delete(m.clearedFields, clients.FieldPublic)
}

// AddAccessTokenIDs adds the "access_token" edge to the AccessTokens entity by ids.
func (m *ClientsMutation) AddAccessTokenIDs(ids ...string) {
	if m.access_token == nil {
		m.access_token = make(map[string]struct{})
	}
	for i := range ids {
		m.access_token[ids[i]] = struct{}{}
	}
}

// ClearAccessToken clears the "access_token" edge to the AccessTokens entity.
func (m *ClientsMutation) ClearAccessToken() {
	m.clearedaccess_token = true
}

// AccessTokenCleared reports if the "access_token" edge to the AccessTokens entity was cleared.
func (m *ClientsMutation) AccessTokenCleared() bool {
	return m.clearedaccess_token
}

// RemoveAccessTokenIDs removes the "access_token" edge to the AccessTokens entity by IDs.
func (m *ClientsMutation) RemoveAccessTokenIDs(ids ...string) {
	if m.removedaccess_token == nil {
		m.removedaccess_token = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.access_token, ids[i])
		m.removedaccess_token[ids[i]] = struct{}{}
	}
}

// RemovedAccessToken returns the removed IDs of the "access_token" edge to the AccessTokens entity.
func (m *ClientsMutation) RemovedAccessTokenIDs() (ids []string) {
	for id := range m.removedaccess_token {
		ids = append(ids, id)
	}
	return
}

// AccessTokenIDs returns the "access_token" edge IDs in the mutation.
func (m *ClientsMutation) AccessTokenIDs() (ids []string) {
	for id := range m.access_token {
		ids = append(ids, id)
	}
	return
}

// ResetAccessToken resets all changes to the "access_token" edge.
func (m *ClientsMutation) ResetAccessToken() {
	m.access_token = nil
	m.clearedaccess_token = false
	m.removedaccess_token = nil
}

// AddAuthorizeCodeIDs adds the "authorize_code" edge to the AuthorizeCodes entity by ids.
func (m *ClientsMutation) AddAuthorizeCodeIDs(ids ...string) {
	if m.authorize_code == nil {
		m.authorize_code = make(map[string]struct{})
	}
	for i := range ids {
		m.authorize_code[ids[i]] = struct{}{}
	}
}

// ClearAuthorizeCode clears the "authorize_code" edge to the AuthorizeCodes entity.
func (m *ClientsMutation) ClearAuthorizeCode() {
	m.clearedauthorize_code = true
}

// AuthorizeCodeCleared reports if the "authorize_code" edge to the AuthorizeCodes entity was cleared.
func (m *ClientsMutation) AuthorizeCodeCleared() bool {
	return m.clearedauthorize_code
}

// RemoveAuthorizeCodeIDs removes the "authorize_code" edge to the AuthorizeCodes entity by IDs.
func (m *ClientsMutation) RemoveAuthorizeCodeIDs(ids ...string) {
	if m.removedauthorize_code == nil {
		m.removedauthorize_code = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.authorize_code, ids[i])
		m.removedauthorize_code[ids[i]] = struct{}{}
	}
}

// RemovedAuthorizeCode returns the removed IDs of the "authorize_code" edge to the AuthorizeCodes entity.
func (m *ClientsMutation) RemovedAuthorizeCodeIDs() (ids []string) {
	for id := range m.removedauthorize_code {
		ids = append(ids, id)
	}
	return
}

// AuthorizeCodeIDs returns the "authorize_code" edge IDs in the mutation.
func (m *ClientsMutation) AuthorizeCodeIDs() (ids []string) {
	for id := range m.authorize_code {
		ids = append(ids, id)
	}
	return
}

// ResetAuthorizeCode resets all changes to the "authorize_code" edge.
func (m *ClientsMutation) ResetAuthorizeCode() {
	m.authorize_code = nil
	m.clearedauthorize_code = false
	m.removedauthorize_code = nil
}

// AddRefreshTokenIDs adds the "refresh_token" edge to the RefreshTokens entity by ids.
func (m *ClientsMutation) AddRefreshTokenIDs(ids ...string) {
	if m.refresh_token == nil {
		m.refresh_token = make(map[string]struct{})
	}
	for i := range ids {
		m.refresh_token[ids[i]] = struct{}{}
	}
}

// ClearRefreshToken clears the "refresh_token" edge to the RefreshTokens entity.
func (m *ClientsMutation) ClearRefreshToken() {
	m.clearedrefresh_token = true
}

// RefreshTokenCleared reports if the "refresh_token" edge to the RefreshTokens entity was cleared.
func (m *ClientsMutation) RefreshTokenCleared() bool {
	return m.clearedrefresh_token
}

// RemoveRefreshTokenIDs removes the "refresh_token" edge to the RefreshTokens entity by IDs.
func (m *ClientsMutation) RemoveRefreshTokenIDs(ids ...string) {
	if m.removedrefresh_token == nil {
		m.removedrefresh_token = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.refresh_token, ids[i])
		m.removedrefresh_token[ids[i]] = struct{}{}
	}
}

// RemovedRefreshToken returns the removed IDs of the "refresh_token" edge to the RefreshTokens entity.
func (m *ClientsMutation) RemovedRefreshTokenIDs() (ids []string) {
	for id := range m.removedrefresh_token {
		ids = append(ids, id)
	}
	return
}

// RefreshTokenIDs returns the "refresh_token" edge IDs in the mutation.
func (m *ClientsMutation) RefreshTokenIDs() (ids []string) {
	for id := range m.refresh_token {
		ids = append(ids, id)
	}
	return
}

// ResetRefreshToken resets all changes to the "refresh_token" edge.
func (m *ClientsMutation) ResetRefreshToken() {
	m.refresh_token = nil
	m.clearedrefresh_token = false
	m.removedrefresh_token = nil
}

// AddIDSessionIDs adds the "id_session" edge to the IDSessions entity by ids.
func (m *ClientsMutation) AddIDSessionIDs(ids ...string) {
	if m.id_session == nil {
		m.id_session = make(map[string]struct{})
	}
	for i := range ids {
		m.id_session[ids[i]] = struct{}{}
	}
}

// ClearIDSession clears the "id_session" edge to the IDSessions entity.
func (m *ClientsMutation) ClearIDSession() {
	m.clearedid_session = true
}

// IDSessionCleared reports if the "id_session" edge to the IDSessions entity was cleared.
func (m *ClientsMutation) IDSessionCleared() bool {
	return m.clearedid_session
}

// RemoveIDSessionIDs removes the "id_session" edge to the IDSessions entity by IDs.
func (m *ClientsMutation) RemoveIDSessionIDs(ids ...string) {
	if m.removedid_session == nil {
		m.removedid_session = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.id_session, ids[i])
		m.removedid_session[ids[i]] = struct{}{}
	}
}

// RemovedIDSession returns the removed IDs of the "id_session" edge to the IDSessions entity.
func (m *ClientsMutation) RemovedIDSessionIDs() (ids []string) {
	for id := range m.removedid_session {
		ids = append(ids, id)
	}
	return
}

// IDSessionIDs returns the "id_session" edge IDs in the mutation.
func (m *ClientsMutation) IDSessionIDs() (ids []string) {
	for id := range m.id_session {
		ids = append(ids, id)
	}
	return
}

// ResetIDSession resets all changes to the "id_session" edge.
func (m *ClientsMutation) ResetIDSession() {
	m.id_session = nil
	m.clearedid_session = false
	m.removedid_session = nil
}

// AddPkceIDs adds the "pkce" edge to the PKCES entity by ids.
func (m *ClientsMutation) AddPkceIDs(ids ...string) {
	if m.pkce == nil {
		m.pkce = make(map[string]struct{})
	}
	for i := range ids {
		m.pkce[ids[i]] = struct{}{}
	}
}

// ClearPkce clears the "pkce" edge to the PKCES entity.
func (m *ClientsMutation) ClearPkce() {
	m.clearedpkce = true
}

// PkceCleared reports if the "pkce" edge to the PKCES entity was cleared.
func (m *ClientsMutation) PkceCleared() bool {
	return m.clearedpkce
}

// RemovePkceIDs removes the "pkce" edge to the PKCES entity by IDs.
func (m *ClientsMutation) RemovePkceIDs(ids ...string) {
	if m.removedpkce == nil {
		m.removedpkce = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.pkce, ids[i])
		m.removedpkce[ids[i]] = struct{}{}
	}
}

// RemovedPkce returns the removed IDs of the "pkce" edge to the PKCES entity.
func (m *ClientsMutation) RemovedPkceIDs() (ids []string) {
	for id := range m.removedpkce {
		ids = append(ids, id)
	}
	return
}

// PkceIDs returns the "pkce" edge IDs in the mutation.
func (m *ClientsMutation) PkceIDs() (ids []string) {
	for id := range m.pkce {
		ids = append(ids, id)
	}
	return
}

// ResetPkce resets all changes to the "pkce" edge.
func (m *ClientsMutation) ResetPkce() {
	m.pkce = nil
	m.clearedpkce = false
	m.removedpkce = nil
}

// Where appends a list predicates to the ClientsMutation builder.
func (m *ClientsMutation) Where(ps ...predicate.Clients) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ClientsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ClientsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Clients, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ClientsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ClientsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Clients).
func (m *ClientsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ClientsMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.client_secret != nil {
		fields = append(fields, clients.FieldClientSecret)
	}
	if m.rotated_secrets != nil {
		fields = append(fields, clients.FieldRotatedSecrets)
	}
	if m.redirect_uris != nil {
		fields = append(fields, clients.FieldRedirectUris)
	}
	if m.grant_types != nil {
		fields = append(fields, clients.FieldGrantTypes)
	}
	if m.response_types != nil {
		fields = append(fields, clients.FieldResponseTypes)
	}
	if m.scopes != nil {
		fields = append(fields, clients.FieldScopes)
	}
	if m.audience != nil {
		fields = append(fields, clients.FieldAudience)
	}
	if m.public != nil {
		fields = append(fields, clients.FieldPublic)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ClientsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case clients.FieldClientSecret:
		return m.ClientSecret()
	case clients.FieldRotatedSecrets:
		return m.RotatedSecrets()
	case clients.FieldRedirectUris:
		return m.RedirectUris()
	case clients.FieldGrantTypes:
		return m.GrantTypes()
	case clients.FieldResponseTypes:
		return m.ResponseTypes()
	case clients.FieldScopes:
		return m.Scopes()
	case clients.FieldAudience:
		return m.Audience()
	case clients.FieldPublic:
		return m.Public()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ClientsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case clients.FieldClientSecret:
		return m.OldClientSecret(ctx)
	case clients.FieldRotatedSecrets:
		return m.OldRotatedSecrets(ctx)
	case clients.FieldRedirectUris:
		return m.OldRedirectUris(ctx)
	case clients.FieldGrantTypes:
		return m.OldGrantTypes(ctx)
	case clients.FieldResponseTypes:
		return m.OldResponseTypes(ctx)
	case clients.FieldScopes:
		return m.OldScopes(ctx)
	case clients.FieldAudience:
		return m.OldAudience(ctx)
	case clients.FieldPublic:
		return m.OldPublic(ctx)
	}
	return nil, fmt.Errorf("unknown Clients field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case clients.FieldClientSecret:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientSecret(v)
		return nil
	case clients.FieldRotatedSecrets:
		v, ok := value.([][]uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRotatedSecrets(v)
		return nil
	case clients.FieldRedirectUris:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirectUris(v)
		return nil
	case clients.FieldGrantTypes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantTypes(v)
		return nil
	case clients.FieldResponseTypes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResponseTypes(v)
		return nil
	case clients.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case clients.FieldAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAudience(v)
		return nil
	case clients.FieldPublic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublic(v)
		return nil
	}
	return fmt.Errorf("unknown Clients field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ClientsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ClientsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ClientsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Clients numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ClientsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(clients.FieldAudience) {
		fields = append(fields, clients.FieldAudience)
	}
	if m.FieldCleared(clients.FieldPublic) {
		fields = append(fields, clients.FieldPublic)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ClientsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ClientsMutation) ClearField(name string) error {
	switch name {
	case clients.FieldAudience:
		m.ClearAudience()
		return nil
	case clients.FieldPublic:
		m.ClearPublic()
		return nil
	}
	return fmt.Errorf("unknown Clients nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ClientsMutation) ResetField(name string) error {
	switch name {
	case clients.FieldClientSecret:
		m.ResetClientSecret()
		return nil
	case clients.FieldRotatedSecrets:
		m.ResetRotatedSecrets()
		return nil
	case clients.FieldRedirectUris:
		m.ResetRedirectUris()
		return nil
	case clients.FieldGrantTypes:
		m.ResetGrantTypes()
		return nil
	case clients.FieldResponseTypes:
		m.ResetResponseTypes()
		return nil
	case clients.FieldScopes:
		m.ResetScopes()
		return nil
	case clients.FieldAudience:
		m.ResetAudience()
		return nil
	case clients.FieldPublic:
		m.ResetPublic()
		return nil
	}
	return fmt.Errorf("unknown Clients field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ClientsMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.access_token != nil {
		edges = append(edges, clients.EdgeAccessToken)
	}
	if m.authorize_code != nil {
		edges = append(edges, clients.EdgeAuthorizeCode)
	}
	if m.refresh_token != nil {
		edges = append(edges, clients.EdgeRefreshToken)
	}
	if m.id_session != nil {
		edges = append(edges, clients.EdgeIDSession)
	}
	if m.pkce != nil {
		edges = append(edges, clients.EdgePkce)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ClientsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case clients.EdgeAccessToken:
		ids := make([]ent.Value, 0, len(m.access_token))
		for id := range m.access_token {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgeAuthorizeCode:
		ids := make([]ent.Value, 0, len(m.authorize_code))
		for id := range m.authorize_code {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.refresh_token))
		for id := range m.refresh_token {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgeIDSession:
		ids := make([]ent.Value, 0, len(m.id_session))
		for id := range m.id_session {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgePkce:
		ids := make([]ent.Value, 0, len(m.pkce))
		for id := range m.pkce {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ClientsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedaccess_token != nil {
		edges = append(edges, clients.EdgeAccessToken)
	}
	if m.removedauthorize_code != nil {
		edges = append(edges, clients.EdgeAuthorizeCode)
	}
	if m.removedrefresh_token != nil {
		edges = append(edges, clients.EdgeRefreshToken)
	}
	if m.removedid_session != nil {
		edges = append(edges, clients.EdgeIDSession)
	}
	if m.removedpkce != nil {
		edges = append(edges, clients.EdgePkce)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ClientsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case clients.EdgeAccessToken:
		ids := make([]ent.Value, 0, len(m.removedaccess_token))
		for id := range m.removedaccess_token {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgeAuthorizeCode:
		ids := make([]ent.Value, 0, len(m.removedauthorize_code))
		for id := range m.removedauthorize_code {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.removedrefresh_token))
		for id := range m.removedrefresh_token {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgeIDSession:
		ids := make([]ent.Value, 0, len(m.removedid_session))
		for id := range m.removedid_session {
			ids = append(ids, id)
		}
		return ids
	case clients.EdgePkce:
		ids := make([]ent.Value, 0, len(m.removedpkce))
		for id := range m.removedpkce {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ClientsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedaccess_token {
		edges = append(edges, clients.EdgeAccessToken)
	}
	if m.clearedauthorize_code {
		edges = append(edges, clients.EdgeAuthorizeCode)
	}
	if m.clearedrefresh_token {
		edges = append(edges, clients.EdgeRefreshToken)
	}
	if m.clearedid_session {
		edges = append(edges, clients.EdgeIDSession)
	}
	if m.clearedpkce {
		edges = append(edges, clients.EdgePkce)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ClientsMutation) EdgeCleared(name string) bool {
	switch name {
	case clients.EdgeAccessToken:
		return m.clearedaccess_token
	case clients.EdgeAuthorizeCode:
		return m.clearedauthorize_code
	case clients.EdgeRefreshToken:
		return m.clearedrefresh_token
	case clients.EdgeIDSession:
		return m.clearedid_session
	case clients.EdgePkce:
		return m.clearedpkce
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ClientsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Clients unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ClientsMutation) ResetEdge(name string) error {
	switch name {
	case clients.EdgeAccessToken:
		m.ResetAccessToken()
		return nil
	case clients.EdgeAuthorizeCode:
		m.ResetAuthorizeCode()
		return nil
	case clients.EdgeRefreshToken:
		m.ResetRefreshToken()
		return nil
	case clients.EdgeIDSession:
		m.ResetIDSession()
		return nil
	case clients.EdgePkce:
		m.ResetPkce()
		return nil
	}
	return fmt.Errorf("unknown Clients edge %s", name)
}

// IDSessionsMutation represents an operation that mutates the IDSessions nodes in the graph.
type IDSessionsMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	request_id               *string
	requestedAt              *time.Time
	scopes                   *[]string
	appendscopes             []string
	granted_scopes           *[]string
	appendgranted_scopes     []string
	requested_audience       *[]string
	appendrequested_audience []string
	granted_audience         *[]string
	appendgranted_audience   []string
	form                     *url.Values
	lang                     *language.Tag
	clearedFields            map[string]struct{}
	client_id                *string
	clearedclient_id         bool
	session_id               *string
	clearedsession_id        bool
	done                     bool
	oldValue                 func(context.Context) (*IDSessions, error)
	predicates               []predicate.IDSessions
}

var _ ent.Mutation = (*IDSessionsMutation)(nil)

// idsessionsOption allows management of the mutation configuration using functional options.
type idsessionsOption func(*IDSessionsMutation)

// newIDSessionsMutation creates new mutation for the IDSessions entity.
func newIDSessionsMutation(c config, op Op, opts ...idsessionsOption) *IDSessionsMutation {
	m := &IDSessionsMutation{
		config:        c,
		op:            op,
		typ:           TypeIDSessions,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIDSessionsID sets the ID field of the mutation.
func withIDSessionsID(id string) idsessionsOption {
	return func(m *IDSessionsMutation) {
		var (
			err   error
			once  sync.Once
			value *IDSessions
		)
		m.oldValue = func(ctx context.Context) (*IDSessions, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IDSessions.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIDSessions sets the old IDSessions of the mutation.
func withIDSessions(node *IDSessions) idsessionsOption {
	return func(m *IDSessionsMutation) {
		m.oldValue = func(context.Context) (*IDSessions, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IDSessionsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IDSessionsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IDSessions entities.
func (m *IDSessionsMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IDSessionsMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IDSessionsMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IDSessions.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRequestID sets the "request_id" field.
func (m *IDSessionsMutation) SetRequestID(s string) {
	m.request_id = &s
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *IDSessionsMutation) RequestID() (r string, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldRequestID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *IDSessionsMutation) ResetRequestID() {
	m.request_id = nil
}

// SetRequestedAt sets the "requestedAt" field.
func (m *IDSessionsMutation) SetRequestedAt(t time.Time) {
	m.requestedAt = &t
}

// RequestedAt returns the value of the "requestedAt" field in the mutation.
func (m *IDSessionsMutation) RequestedAt() (r time.Time, exists bool) {
	v := m.requestedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAt returns the old "requestedAt" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldRequestedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAt: %w", err)
	}
	return oldValue.RequestedAt, nil
}

// ResetRequestedAt resets all changes to the "requestedAt" field.
func (m *IDSessionsMutation) ResetRequestedAt() {
	m.requestedAt = nil
}

// SetScopes sets the "scopes" field.
func (m *IDSessionsMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *IDSessionsMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *IDSessionsMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *IDSessionsMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ResetScopes resets all changes to the "scopes" field.
func (m *IDSessionsMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
}

// SetGrantedScopes sets the "granted_scopes" field.
func (m *IDSessionsMutation) SetGrantedScopes(s []string) {
	m.granted_scopes = &s
	m.appendgranted_scopes = nil
}

// GrantedScopes returns the value of the "granted_scopes" field in the mutation.
func (m *IDSessionsMutation) GrantedScopes() (r []string, exists bool) {
	v := m.granted_scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedScopes returns the old "granted_scopes" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldGrantedScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedScopes: %w", err)
	}
	return oldValue.GrantedScopes, nil
}

// AppendGrantedScopes adds s to the "granted_scopes" field.
func (m *IDSessionsMutation) AppendGrantedScopes(s []string) {
	m.appendgranted_scopes = append(m.appendgranted_scopes, s...)
}

// AppendedGrantedScopes returns the list of values that were appended to the "granted_scopes" field in this mutation.
func (m *IDSessionsMutation) AppendedGrantedScopes() ([]string, bool) {
	if len(m.appendgranted_scopes) == 0 {
		return nil, false
	}
	return m.appendgranted_scopes, true
}

// ResetGrantedScopes resets all changes to the "granted_scopes" field.
func (m *IDSessionsMutation) ResetGrantedScopes() {
	m.granted_scopes = nil
	m.appendgranted_scopes = nil
}

// SetRequestedAudience sets the "requested_audience" field.
func (m *IDSessionsMutation) SetRequestedAudience(s []string) {
	m.requested_audience = &s
	m.appendrequested_audience = nil
}

// RequestedAudience returns the value of the "requested_audience" field in the mutation.
func (m *IDSessionsMutation) RequestedAudience() (r []string, exists bool) {
	v := m.requested_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAudience returns the old "requested_audience" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldRequestedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAudience: %w", err)
	}
	return oldValue.RequestedAudience, nil
}

// AppendRequestedAudience adds s to the "requested_audience" field.
func (m *IDSessionsMutation) AppendRequestedAudience(s []string) {
	m.appendrequested_audience = append(m.appendrequested_audience, s...)
}

// AppendedRequestedAudience returns the list of values that were appended to the "requested_audience" field in this mutation.
func (m *IDSessionsMutation) AppendedRequestedAudience() ([]string, bool) {
	if len(m.appendrequested_audience) == 0 {
		return nil, false
	}
	return m.appendrequested_audience, true
}

// ResetRequestedAudience resets all changes to the "requested_audience" field.
func (m *IDSessionsMutation) ResetRequestedAudience() {
	m.requested_audience = nil
	m.appendrequested_audience = nil
}

// SetGrantedAudience sets the "granted_audience" field.
func (m *IDSessionsMutation) SetGrantedAudience(s []string) {
	m.granted_audience = &s
	m.appendgranted_audience = nil
}

// GrantedAudience returns the value of the "granted_audience" field in the mutation.
func (m *IDSessionsMutation) GrantedAudience() (r []string, exists bool) {
	v := m.granted_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedAudience returns the old "granted_audience" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldGrantedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedAudience: %w", err)
	}
	return oldValue.GrantedAudience, nil
}

// AppendGrantedAudience adds s to the "granted_audience" field.
func (m *IDSessionsMutation) AppendGrantedAudience(s []string) {
	m.appendgranted_audience = append(m.appendgranted_audience, s...)
}

// AppendedGrantedAudience returns the list of values that were appended to the "granted_audience" field in this mutation.
func (m *IDSessionsMutation) AppendedGrantedAudience() ([]string, bool) {
	if len(m.appendgranted_audience) == 0 {
		return nil, false
	}
	return m.appendgranted_audience, true
}

// ResetGrantedAudience resets all changes to the "granted_audience" field.
func (m *IDSessionsMutation) ResetGrantedAudience() {
	m.granted_audience = nil
	m.appendgranted_audience = nil
}

// SetForm sets the "form" field.
func (m *IDSessionsMutation) SetForm(u url.Values) {
	m.form = &u
}

// Form returns the value of the "form" field in the mutation.
func (m *IDSessionsMutation) Form() (r url.Values, exists bool) {
	v := m.form
	if v == nil {
		return
	}
	return *v, true
}

// OldForm returns the old "form" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldForm(ctx context.Context) (v url.Values, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForm: %w", err)
	}
	return oldValue.Form, nil
}

// ResetForm resets all changes to the "form" field.
func (m *IDSessionsMutation) ResetForm() {
	m.form = nil
}

// SetLang sets the "lang" field.
func (m *IDSessionsMutation) SetLang(l language.Tag) {
	m.lang = &l
}

// Lang returns the value of the "lang" field in the mutation.
func (m *IDSessionsMutation) Lang() (r language.Tag, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the IDSessions entity.
// If the IDSessions object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IDSessionsMutation) OldLang(ctx context.Context) (v language.Tag, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ClearLang clears the value of the "lang" field.
func (m *IDSessionsMutation) ClearLang() {
	m.lang = nil
	m.clearedFields[idsessions.FieldLang] = struct{}{}
}

// LangCleared returns if the "lang" field was cleared in this mutation.
func (m *IDSessionsMutation) LangCleared() bool {
	_, ok := m.clearedFields[idsessions.FieldLang]
	return ok
}

// ResetLang resets all changes to the "lang" field.
func (m *IDSessionsMutation) ResetLang() {
	m.lang = nil
	delete(m.clearedFields, idsessions.FieldLang)
}

// SetClientIDID sets the "client_id" edge to the Clients entity by id.
func (m *IDSessionsMutation) SetClientIDID(id string) {
	m.client_id = &id
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (m *IDSessionsMutation) ClearClientID() {
	m.clearedclient_id = true
}

// ClientIDCleared reports if the "client_id" edge to the Clients entity was cleared.
func (m *IDSessionsMutation) ClientIDCleared() bool {
	return m.clearedclient_id
}

// ClientIDID returns the "client_id" edge ID in the mutation.
func (m *IDSessionsMutation) ClientIDID() (id string, exists bool) {
	if m.client_id != nil {
		return *m.client_id, true
	}
	return
}

// ClientIDIDs returns the "client_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientIDID instead. It exists only for internal usage by the builders.
func (m *IDSessionsMutation) ClientIDIDs() (ids []string) {
	if id := m.client_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClientID resets all changes to the "client_id" edge.
func (m *IDSessionsMutation) ResetClientID() {
	m.client_id = nil
	m.clearedclient_id = false
}

// SetSessionIDID sets the "session_id" edge to the Session entity by id.
func (m *IDSessionsMutation) SetSessionIDID(id string) {
	m.session_id = &id
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (m *IDSessionsMutation) ClearSessionID() {
	m.clearedsession_id = true
}

// SessionIDCleared reports if the "session_id" edge to the Session entity was cleared.
func (m *IDSessionsMutation) SessionIDCleared() bool {
	return m.clearedsession_id
}

// SessionIDID returns the "session_id" edge ID in the mutation.
func (m *IDSessionsMutation) SessionIDID() (id string, exists bool) {
	if m.session_id != nil {
		return *m.session_id, true
	}
	return
}

// SessionIDIDs returns the "session_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SessionIDID instead. It exists only for internal usage by the builders.
func (m *IDSessionsMutation) SessionIDIDs() (ids []string) {
	if id := m.session_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSessionID resets all changes to the "session_id" edge.
func (m *IDSessionsMutation) ResetSessionID() {
	m.session_id = nil
	m.clearedsession_id = false
}

// Where appends a list predicates to the IDSessionsMutation builder.
func (m *IDSessionsMutation) Where(ps ...predicate.IDSessions) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IDSessionsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IDSessionsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IDSessions, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IDSessionsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IDSessionsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IDSessions).
func (m *IDSessionsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IDSessionsMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.request_id != nil {
		fields = append(fields, idsessions.FieldRequestID)
	}
	if m.requestedAt != nil {
		fields = append(fields, idsessions.FieldRequestedAt)
	}
	if m.scopes != nil {
		fields = append(fields, idsessions.FieldScopes)
	}
	if m.granted_scopes != nil {
		fields = append(fields, idsessions.FieldGrantedScopes)
	}
	if m.requested_audience != nil {
		fields = append(fields, idsessions.FieldRequestedAudience)
	}
	if m.granted_audience != nil {
		fields = append(fields, idsessions.FieldGrantedAudience)
	}
	if m.form != nil {
		fields = append(fields, idsessions.FieldForm)
	}
	if m.lang != nil {
		fields = append(fields, idsessions.FieldLang)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IDSessionsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case idsessions.FieldRequestID:
		return m.RequestID()
	case idsessions.FieldRequestedAt:
		return m.RequestedAt()
	case idsessions.FieldScopes:
		return m.Scopes()
	case idsessions.FieldGrantedScopes:
		return m.GrantedScopes()
	case idsessions.FieldRequestedAudience:
		return m.RequestedAudience()
	case idsessions.FieldGrantedAudience:
		return m.GrantedAudience()
	case idsessions.FieldForm:
		return m.Form()
	case idsessions.FieldLang:
		return m.Lang()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IDSessionsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case idsessions.FieldRequestID:
		return m.OldRequestID(ctx)
	case idsessions.FieldRequestedAt:
		return m.OldRequestedAt(ctx)
	case idsessions.FieldScopes:
		return m.OldScopes(ctx)
	case idsessions.FieldGrantedScopes:
		return m.OldGrantedScopes(ctx)
	case idsessions.FieldRequestedAudience:
		return m.OldRequestedAudience(ctx)
	case idsessions.FieldGrantedAudience:
		return m.OldGrantedAudience(ctx)
	case idsessions.FieldForm:
		return m.OldForm(ctx)
	case idsessions.FieldLang:
		return m.OldLang(ctx)
	}
	return nil, fmt.Errorf("unknown IDSessions field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IDSessionsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case idsessions.FieldRequestID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	case idsessions.FieldRequestedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAt(v)
		return nil
	case idsessions.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case idsessions.FieldGrantedScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedScopes(v)
		return nil
	case idsessions.FieldRequestedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAudience(v)
		return nil
	case idsessions.FieldGrantedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedAudience(v)
		return nil
	case idsessions.FieldForm:
		v, ok := value.(url.Values)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForm(v)
		return nil
	case idsessions.FieldLang:
		v, ok := value.(language.Tag)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	}
	return fmt.Errorf("unknown IDSessions field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IDSessionsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IDSessionsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IDSessionsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IDSessions numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IDSessionsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(idsessions.FieldLang) {
		fields = append(fields, idsessions.FieldLang)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IDSessionsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IDSessionsMutation) ClearField(name string) error {
	switch name {
	case idsessions.FieldLang:
		m.ClearLang()
		return nil
	}
	return fmt.Errorf("unknown IDSessions nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IDSessionsMutation) ResetField(name string) error {
	switch name {
	case idsessions.FieldRequestID:
		m.ResetRequestID()
		return nil
	case idsessions.FieldRequestedAt:
		m.ResetRequestedAt()
		return nil
	case idsessions.FieldScopes:
		m.ResetScopes()
		return nil
	case idsessions.FieldGrantedScopes:
		m.ResetGrantedScopes()
		return nil
	case idsessions.FieldRequestedAudience:
		m.ResetRequestedAudience()
		return nil
	case idsessions.FieldGrantedAudience:
		m.ResetGrantedAudience()
		return nil
	case idsessions.FieldForm:
		m.ResetForm()
		return nil
	case idsessions.FieldLang:
		m.ResetLang()
		return nil
	}
	return fmt.Errorf("unknown IDSessions field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IDSessionsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.client_id != nil {
		edges = append(edges, idsessions.EdgeClientID)
	}
	if m.session_id != nil {
		edges = append(edges, idsessions.EdgeSessionID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IDSessionsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case idsessions.EdgeClientID:
		if id := m.client_id; id != nil {
			return []ent.Value{*id}
		}
	case idsessions.EdgeSessionID:
		if id := m.session_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IDSessionsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IDSessionsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IDSessionsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclient_id {
		edges = append(edges, idsessions.EdgeClientID)
	}
	if m.clearedsession_id {
		edges = append(edges, idsessions.EdgeSessionID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IDSessionsMutation) EdgeCleared(name string) bool {
	switch name {
	case idsessions.EdgeClientID:
		return m.clearedclient_id
	case idsessions.EdgeSessionID:
		return m.clearedsession_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IDSessionsMutation) ClearEdge(name string) error {
	switch name {
	case idsessions.EdgeClientID:
		m.ClearClientID()
		return nil
	case idsessions.EdgeSessionID:
		m.ClearSessionID()
		return nil
	}
	return fmt.Errorf("unknown IDSessions unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IDSessionsMutation) ResetEdge(name string) error {
	switch name {
	case idsessions.EdgeClientID:
		m.ResetClientID()
		return nil
	case idsessions.EdgeSessionID:
		m.ResetSessionID()
		return nil
	}
	return fmt.Errorf("unknown IDSessions edge %s", name)
}

// IssuerPublicKeysMutation represents an operation that mutates the IssuerPublicKeys nodes in the graph.
type IssuerPublicKeysMutation struct {
	config
	op                        Op
	typ                       string
	id                        *string
	clearedFields             map[string]struct{}
	subject_public_key        *string
	clearedsubject_public_key bool
	done                      bool
	oldValue                  func(context.Context) (*IssuerPublicKeys, error)
	predicates                []predicate.IssuerPublicKeys
}

var _ ent.Mutation = (*IssuerPublicKeysMutation)(nil)

// issuerpublickeysOption allows management of the mutation configuration using functional options.
type issuerpublickeysOption func(*IssuerPublicKeysMutation)

// newIssuerPublicKeysMutation creates new mutation for the IssuerPublicKeys entity.
func newIssuerPublicKeysMutation(c config, op Op, opts ...issuerpublickeysOption) *IssuerPublicKeysMutation {
	m := &IssuerPublicKeysMutation{
		config:        c,
		op:            op,
		typ:           TypeIssuerPublicKeys,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIssuerPublicKeysID sets the ID field of the mutation.
func withIssuerPublicKeysID(id string) issuerpublickeysOption {
	return func(m *IssuerPublicKeysMutation) {
		var (
			err   error
			once  sync.Once
			value *IssuerPublicKeys
		)
		m.oldValue = func(ctx context.Context) (*IssuerPublicKeys, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IssuerPublicKeys.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIssuerPublicKeys sets the old IssuerPublicKeys of the mutation.
func withIssuerPublicKeys(node *IssuerPublicKeys) issuerpublickeysOption {
	return func(m *IssuerPublicKeysMutation) {
		m.oldValue = func(context.Context) (*IssuerPublicKeys, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IssuerPublicKeysMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IssuerPublicKeysMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of IssuerPublicKeys entities.
func (m *IssuerPublicKeysMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IssuerPublicKeysMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IssuerPublicKeysMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().IssuerPublicKeys.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSubjectPublicKeyID sets the "subject_public_key" edge to the SubjectPublicKeys entity by id.
func (m *IssuerPublicKeysMutation) SetSubjectPublicKeyID(id string) {
	m.subject_public_key = &id
}

// ClearSubjectPublicKey clears the "subject_public_key" edge to the SubjectPublicKeys entity.
func (m *IssuerPublicKeysMutation) ClearSubjectPublicKey() {
	m.clearedsubject_public_key = true
}

// SubjectPublicKeyCleared reports if the "subject_public_key" edge to the SubjectPublicKeys entity was cleared.
func (m *IssuerPublicKeysMutation) SubjectPublicKeyCleared() bool {
	return m.clearedsubject_public_key
}

// SubjectPublicKeyID returns the "subject_public_key" edge ID in the mutation.
func (m *IssuerPublicKeysMutation) SubjectPublicKeyID() (id string, exists bool) {
	if m.subject_public_key != nil {
		return *m.subject_public_key, true
	}
	return
}

// SubjectPublicKeyIDs returns the "subject_public_key" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubjectPublicKeyID instead. It exists only for internal usage by the builders.
func (m *IssuerPublicKeysMutation) SubjectPublicKeyIDs() (ids []string) {
	if id := m.subject_public_key; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubjectPublicKey resets all changes to the "subject_public_key" edge.
func (m *IssuerPublicKeysMutation) ResetSubjectPublicKey() {
	m.subject_public_key = nil
	m.clearedsubject_public_key = false
}

// Where appends a list predicates to the IssuerPublicKeysMutation builder.
func (m *IssuerPublicKeysMutation) Where(ps ...predicate.IssuerPublicKeys) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IssuerPublicKeysMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IssuerPublicKeysMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.IssuerPublicKeys, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IssuerPublicKeysMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IssuerPublicKeysMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (IssuerPublicKeys).
func (m *IssuerPublicKeysMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IssuerPublicKeysMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IssuerPublicKeysMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IssuerPublicKeysMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown IssuerPublicKeys field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IssuerPublicKeysMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IssuerPublicKeys field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IssuerPublicKeysMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IssuerPublicKeysMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IssuerPublicKeysMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown IssuerPublicKeys numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IssuerPublicKeysMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IssuerPublicKeysMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IssuerPublicKeysMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IssuerPublicKeys nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IssuerPublicKeysMutation) ResetField(name string) error {
	return fmt.Errorf("unknown IssuerPublicKeys field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IssuerPublicKeysMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subject_public_key != nil {
		edges = append(edges, issuerpublickeys.EdgeSubjectPublicKey)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IssuerPublicKeysMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case issuerpublickeys.EdgeSubjectPublicKey:
		if id := m.subject_public_key; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IssuerPublicKeysMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IssuerPublicKeysMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IssuerPublicKeysMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubject_public_key {
		edges = append(edges, issuerpublickeys.EdgeSubjectPublicKey)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IssuerPublicKeysMutation) EdgeCleared(name string) bool {
	switch name {
	case issuerpublickeys.EdgeSubjectPublicKey:
		return m.clearedsubject_public_key
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IssuerPublicKeysMutation) ClearEdge(name string) error {
	switch name {
	case issuerpublickeys.EdgeSubjectPublicKey:
		m.ClearSubjectPublicKey()
		return nil
	}
	return fmt.Errorf("unknown IssuerPublicKeys unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IssuerPublicKeysMutation) ResetEdge(name string) error {
	switch name {
	case issuerpublickeys.EdgeSubjectPublicKey:
		m.ResetSubjectPublicKey()
		return nil
	}
	return fmt.Errorf("unknown IssuerPublicKeys edge %s", name)
}

// PKCESMutation represents an operation that mutates the PKCES nodes in the graph.
type PKCESMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	request_id               *string
	requestedAt              *time.Time
	scopes                   *[]string
	appendscopes             []string
	granted_scopes           *[]string
	appendgranted_scopes     []string
	requested_audience       *[]string
	appendrequested_audience []string
	granted_audience         *[]string
	appendgranted_audience   []string
	form                     *url.Values
	lang                     *language.Tag
	clearedFields            map[string]struct{}
	client_id                *string
	clearedclient_id         bool
	session_id               *string
	clearedsession_id        bool
	done                     bool
	oldValue                 func(context.Context) (*PKCES, error)
	predicates               []predicate.PKCES
}

var _ ent.Mutation = (*PKCESMutation)(nil)

// pkcesOption allows management of the mutation configuration using functional options.
type pkcesOption func(*PKCESMutation)

// newPKCESMutation creates new mutation for the PKCES entity.
func newPKCESMutation(c config, op Op, opts ...pkcesOption) *PKCESMutation {
	m := &PKCESMutation{
		config:        c,
		op:            op,
		typ:           TypePKCES,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPKCESID sets the ID field of the mutation.
func withPKCESID(id string) pkcesOption {
	return func(m *PKCESMutation) {
		var (
			err   error
			once  sync.Once
			value *PKCES
		)
		m.oldValue = func(ctx context.Context) (*PKCES, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PKCES.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPKCES sets the old PKCES of the mutation.
func withPKCES(node *PKCES) pkcesOption {
	return func(m *PKCESMutation) {
		m.oldValue = func(context.Context) (*PKCES, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PKCESMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PKCESMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PKCES entities.
func (m *PKCESMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PKCESMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PKCESMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PKCES.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRequestID sets the "request_id" field.
func (m *PKCESMutation) SetRequestID(s string) {
	m.request_id = &s
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *PKCESMutation) RequestID() (r string, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldRequestID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *PKCESMutation) ResetRequestID() {
	m.request_id = nil
}

// SetRequestedAt sets the "requestedAt" field.
func (m *PKCESMutation) SetRequestedAt(t time.Time) {
	m.requestedAt = &t
}

// RequestedAt returns the value of the "requestedAt" field in the mutation.
func (m *PKCESMutation) RequestedAt() (r time.Time, exists bool) {
	v := m.requestedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAt returns the old "requestedAt" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldRequestedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAt: %w", err)
	}
	return oldValue.RequestedAt, nil
}

// ResetRequestedAt resets all changes to the "requestedAt" field.
func (m *PKCESMutation) ResetRequestedAt() {
	m.requestedAt = nil
}

// SetScopes sets the "scopes" field.
func (m *PKCESMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *PKCESMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *PKCESMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *PKCESMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ResetScopes resets all changes to the "scopes" field.
func (m *PKCESMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
}

// SetGrantedScopes sets the "granted_scopes" field.
func (m *PKCESMutation) SetGrantedScopes(s []string) {
	m.granted_scopes = &s
	m.appendgranted_scopes = nil
}

// GrantedScopes returns the value of the "granted_scopes" field in the mutation.
func (m *PKCESMutation) GrantedScopes() (r []string, exists bool) {
	v := m.granted_scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedScopes returns the old "granted_scopes" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldGrantedScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedScopes: %w", err)
	}
	return oldValue.GrantedScopes, nil
}

// AppendGrantedScopes adds s to the "granted_scopes" field.
func (m *PKCESMutation) AppendGrantedScopes(s []string) {
	m.appendgranted_scopes = append(m.appendgranted_scopes, s...)
}

// AppendedGrantedScopes returns the list of values that were appended to the "granted_scopes" field in this mutation.
func (m *PKCESMutation) AppendedGrantedScopes() ([]string, bool) {
	if len(m.appendgranted_scopes) == 0 {
		return nil, false
	}
	return m.appendgranted_scopes, true
}

// ResetGrantedScopes resets all changes to the "granted_scopes" field.
func (m *PKCESMutation) ResetGrantedScopes() {
	m.granted_scopes = nil
	m.appendgranted_scopes = nil
}

// SetRequestedAudience sets the "requested_audience" field.
func (m *PKCESMutation) SetRequestedAudience(s []string) {
	m.requested_audience = &s
	m.appendrequested_audience = nil
}

// RequestedAudience returns the value of the "requested_audience" field in the mutation.
func (m *PKCESMutation) RequestedAudience() (r []string, exists bool) {
	v := m.requested_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAudience returns the old "requested_audience" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldRequestedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAudience: %w", err)
	}
	return oldValue.RequestedAudience, nil
}

// AppendRequestedAudience adds s to the "requested_audience" field.
func (m *PKCESMutation) AppendRequestedAudience(s []string) {
	m.appendrequested_audience = append(m.appendrequested_audience, s...)
}

// AppendedRequestedAudience returns the list of values that were appended to the "requested_audience" field in this mutation.
func (m *PKCESMutation) AppendedRequestedAudience() ([]string, bool) {
	if len(m.appendrequested_audience) == 0 {
		return nil, false
	}
	return m.appendrequested_audience, true
}

// ResetRequestedAudience resets all changes to the "requested_audience" field.
func (m *PKCESMutation) ResetRequestedAudience() {
	m.requested_audience = nil
	m.appendrequested_audience = nil
}

// SetGrantedAudience sets the "granted_audience" field.
func (m *PKCESMutation) SetGrantedAudience(s []string) {
	m.granted_audience = &s
	m.appendgranted_audience = nil
}

// GrantedAudience returns the value of the "granted_audience" field in the mutation.
func (m *PKCESMutation) GrantedAudience() (r []string, exists bool) {
	v := m.granted_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedAudience returns the old "granted_audience" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldGrantedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedAudience: %w", err)
	}
	return oldValue.GrantedAudience, nil
}

// AppendGrantedAudience adds s to the "granted_audience" field.
func (m *PKCESMutation) AppendGrantedAudience(s []string) {
	m.appendgranted_audience = append(m.appendgranted_audience, s...)
}

// AppendedGrantedAudience returns the list of values that were appended to the "granted_audience" field in this mutation.
func (m *PKCESMutation) AppendedGrantedAudience() ([]string, bool) {
	if len(m.appendgranted_audience) == 0 {
		return nil, false
	}
	return m.appendgranted_audience, true
}

// ResetGrantedAudience resets all changes to the "granted_audience" field.
func (m *PKCESMutation) ResetGrantedAudience() {
	m.granted_audience = nil
	m.appendgranted_audience = nil
}

// SetForm sets the "form" field.
func (m *PKCESMutation) SetForm(u url.Values) {
	m.form = &u
}

// Form returns the value of the "form" field in the mutation.
func (m *PKCESMutation) Form() (r url.Values, exists bool) {
	v := m.form
	if v == nil {
		return
	}
	return *v, true
}

// OldForm returns the old "form" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldForm(ctx context.Context) (v url.Values, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForm: %w", err)
	}
	return oldValue.Form, nil
}

// ResetForm resets all changes to the "form" field.
func (m *PKCESMutation) ResetForm() {
	m.form = nil
}

// SetLang sets the "lang" field.
func (m *PKCESMutation) SetLang(l language.Tag) {
	m.lang = &l
}

// Lang returns the value of the "lang" field in the mutation.
func (m *PKCESMutation) Lang() (r language.Tag, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the PKCES entity.
// If the PKCES object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PKCESMutation) OldLang(ctx context.Context) (v language.Tag, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ClearLang clears the value of the "lang" field.
func (m *PKCESMutation) ClearLang() {
	m.lang = nil
	m.clearedFields[pkces.FieldLang] = struct{}{}
}

// LangCleared returns if the "lang" field was cleared in this mutation.
func (m *PKCESMutation) LangCleared() bool {
	_, ok := m.clearedFields[pkces.FieldLang]
	return ok
}

// ResetLang resets all changes to the "lang" field.
func (m *PKCESMutation) ResetLang() {
	m.lang = nil
	delete(m.clearedFields, pkces.FieldLang)
}

// SetClientIDID sets the "client_id" edge to the Clients entity by id.
func (m *PKCESMutation) SetClientIDID(id string) {
	m.client_id = &id
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (m *PKCESMutation) ClearClientID() {
	m.clearedclient_id = true
}

// ClientIDCleared reports if the "client_id" edge to the Clients entity was cleared.
func (m *PKCESMutation) ClientIDCleared() bool {
	return m.clearedclient_id
}

// ClientIDID returns the "client_id" edge ID in the mutation.
func (m *PKCESMutation) ClientIDID() (id string, exists bool) {
	if m.client_id != nil {
		return *m.client_id, true
	}
	return
}

// ClientIDIDs returns the "client_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientIDID instead. It exists only for internal usage by the builders.
func (m *PKCESMutation) ClientIDIDs() (ids []string) {
	if id := m.client_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClientID resets all changes to the "client_id" edge.
func (m *PKCESMutation) ResetClientID() {
	m.client_id = nil
	m.clearedclient_id = false
}

// SetSessionIDID sets the "session_id" edge to the Session entity by id.
func (m *PKCESMutation) SetSessionIDID(id string) {
	m.session_id = &id
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (m *PKCESMutation) ClearSessionID() {
	m.clearedsession_id = true
}

// SessionIDCleared reports if the "session_id" edge to the Session entity was cleared.
func (m *PKCESMutation) SessionIDCleared() bool {
	return m.clearedsession_id
}

// SessionIDID returns the "session_id" edge ID in the mutation.
func (m *PKCESMutation) SessionIDID() (id string, exists bool) {
	if m.session_id != nil {
		return *m.session_id, true
	}
	return
}

// SessionIDIDs returns the "session_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SessionIDID instead. It exists only for internal usage by the builders.
func (m *PKCESMutation) SessionIDIDs() (ids []string) {
	if id := m.session_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSessionID resets all changes to the "session_id" edge.
func (m *PKCESMutation) ResetSessionID() {
	m.session_id = nil
	m.clearedsession_id = false
}

// Where appends a list predicates to the PKCESMutation builder.
func (m *PKCESMutation) Where(ps ...predicate.PKCES) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PKCESMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PKCESMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PKCES, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PKCESMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PKCESMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PKCES).
func (m *PKCESMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PKCESMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.request_id != nil {
		fields = append(fields, pkces.FieldRequestID)
	}
	if m.requestedAt != nil {
		fields = append(fields, pkces.FieldRequestedAt)
	}
	if m.scopes != nil {
		fields = append(fields, pkces.FieldScopes)
	}
	if m.granted_scopes != nil {
		fields = append(fields, pkces.FieldGrantedScopes)
	}
	if m.requested_audience != nil {
		fields = append(fields, pkces.FieldRequestedAudience)
	}
	if m.granted_audience != nil {
		fields = append(fields, pkces.FieldGrantedAudience)
	}
	if m.form != nil {
		fields = append(fields, pkces.FieldForm)
	}
	if m.lang != nil {
		fields = append(fields, pkces.FieldLang)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PKCESMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pkces.FieldRequestID:
		return m.RequestID()
	case pkces.FieldRequestedAt:
		return m.RequestedAt()
	case pkces.FieldScopes:
		return m.Scopes()
	case pkces.FieldGrantedScopes:
		return m.GrantedScopes()
	case pkces.FieldRequestedAudience:
		return m.RequestedAudience()
	case pkces.FieldGrantedAudience:
		return m.GrantedAudience()
	case pkces.FieldForm:
		return m.Form()
	case pkces.FieldLang:
		return m.Lang()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PKCESMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pkces.FieldRequestID:
		return m.OldRequestID(ctx)
	case pkces.FieldRequestedAt:
		return m.OldRequestedAt(ctx)
	case pkces.FieldScopes:
		return m.OldScopes(ctx)
	case pkces.FieldGrantedScopes:
		return m.OldGrantedScopes(ctx)
	case pkces.FieldRequestedAudience:
		return m.OldRequestedAudience(ctx)
	case pkces.FieldGrantedAudience:
		return m.OldGrantedAudience(ctx)
	case pkces.FieldForm:
		return m.OldForm(ctx)
	case pkces.FieldLang:
		return m.OldLang(ctx)
	}
	return nil, fmt.Errorf("unknown PKCES field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PKCESMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pkces.FieldRequestID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	case pkces.FieldRequestedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAt(v)
		return nil
	case pkces.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case pkces.FieldGrantedScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedScopes(v)
		return nil
	case pkces.FieldRequestedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAudience(v)
		return nil
	case pkces.FieldGrantedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedAudience(v)
		return nil
	case pkces.FieldForm:
		v, ok := value.(url.Values)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForm(v)
		return nil
	case pkces.FieldLang:
		v, ok := value.(language.Tag)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	}
	return fmt.Errorf("unknown PKCES field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PKCESMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PKCESMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PKCESMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PKCES numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PKCESMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pkces.FieldLang) {
		fields = append(fields, pkces.FieldLang)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PKCESMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PKCESMutation) ClearField(name string) error {
	switch name {
	case pkces.FieldLang:
		m.ClearLang()
		return nil
	}
	return fmt.Errorf("unknown PKCES nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PKCESMutation) ResetField(name string) error {
	switch name {
	case pkces.FieldRequestID:
		m.ResetRequestID()
		return nil
	case pkces.FieldRequestedAt:
		m.ResetRequestedAt()
		return nil
	case pkces.FieldScopes:
		m.ResetScopes()
		return nil
	case pkces.FieldGrantedScopes:
		m.ResetGrantedScopes()
		return nil
	case pkces.FieldRequestedAudience:
		m.ResetRequestedAudience()
		return nil
	case pkces.FieldGrantedAudience:
		m.ResetGrantedAudience()
		return nil
	case pkces.FieldForm:
		m.ResetForm()
		return nil
	case pkces.FieldLang:
		m.ResetLang()
		return nil
	}
	return fmt.Errorf("unknown PKCES field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PKCESMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.client_id != nil {
		edges = append(edges, pkces.EdgeClientID)
	}
	if m.session_id != nil {
		edges = append(edges, pkces.EdgeSessionID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PKCESMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case pkces.EdgeClientID:
		if id := m.client_id; id != nil {
			return []ent.Value{*id}
		}
	case pkces.EdgeSessionID:
		if id := m.session_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PKCESMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PKCESMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PKCESMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclient_id {
		edges = append(edges, pkces.EdgeClientID)
	}
	if m.clearedsession_id {
		edges = append(edges, pkces.EdgeSessionID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PKCESMutation) EdgeCleared(name string) bool {
	switch name {
	case pkces.EdgeClientID:
		return m.clearedclient_id
	case pkces.EdgeSessionID:
		return m.clearedsession_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PKCESMutation) ClearEdge(name string) error {
	switch name {
	case pkces.EdgeClientID:
		m.ClearClientID()
		return nil
	case pkces.EdgeSessionID:
		m.ClearSessionID()
		return nil
	}
	return fmt.Errorf("unknown PKCES unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PKCESMutation) ResetEdge(name string) error {
	switch name {
	case pkces.EdgeClientID:
		m.ResetClientID()
		return nil
	case pkces.EdgeSessionID:
		m.ResetSessionID()
		return nil
	}
	return fmt.Errorf("unknown PKCES edge %s", name)
}

// PublicKeyScopesMutation represents an operation that mutates the PublicKeyScopes nodes in the graph.
type PublicKeyScopesMutation struct {
	config
	op                           Op
	typ                          string
	id                           *string
	json_web_key                 *jose.JSONWebKey
	scopes                       *[]string
	appendscopes                 []string
	clearedFields                map[string]struct{}
	subject_public_key_id        *string
	clearedsubject_public_key_id bool
	done                         bool
	oldValue                     func(context.Context) (*PublicKeyScopes, error)
	predicates                   []predicate.PublicKeyScopes
}

var _ ent.Mutation = (*PublicKeyScopesMutation)(nil)

// publickeyscopesOption allows management of the mutation configuration using functional options.
type publickeyscopesOption func(*PublicKeyScopesMutation)

// newPublicKeyScopesMutation creates new mutation for the PublicKeyScopes entity.
func newPublicKeyScopesMutation(c config, op Op, opts ...publickeyscopesOption) *PublicKeyScopesMutation {
	m := &PublicKeyScopesMutation{
		config:        c,
		op:            op,
		typ:           TypePublicKeyScopes,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPublicKeyScopesID sets the ID field of the mutation.
func withPublicKeyScopesID(id string) publickeyscopesOption {
	return func(m *PublicKeyScopesMutation) {
		var (
			err   error
			once  sync.Once
			value *PublicKeyScopes
		)
		m.oldValue = func(ctx context.Context) (*PublicKeyScopes, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PublicKeyScopes.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPublicKeyScopes sets the old PublicKeyScopes of the mutation.
func withPublicKeyScopes(node *PublicKeyScopes) publickeyscopesOption {
	return func(m *PublicKeyScopesMutation) {
		m.oldValue = func(context.Context) (*PublicKeyScopes, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PublicKeyScopesMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PublicKeyScopesMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PublicKeyScopes entities.
func (m *PublicKeyScopesMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PublicKeyScopesMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PublicKeyScopesMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PublicKeyScopes.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetJSONWebKey sets the "json_web_key" field.
func (m *PublicKeyScopesMutation) SetJSONWebKey(jwk jose.JSONWebKey) {
	m.json_web_key = &jwk
}

// JSONWebKey returns the value of the "json_web_key" field in the mutation.
func (m *PublicKeyScopesMutation) JSONWebKey() (r jose.JSONWebKey, exists bool) {
	v := m.json_web_key
	if v == nil {
		return
	}
	return *v, true
}

// OldJSONWebKey returns the old "json_web_key" field's value of the PublicKeyScopes entity.
// If the PublicKeyScopes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PublicKeyScopesMutation) OldJSONWebKey(ctx context.Context) (v jose.JSONWebKey, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJSONWebKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJSONWebKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJSONWebKey: %w", err)
	}
	return oldValue.JSONWebKey, nil
}

// ResetJSONWebKey resets all changes to the "json_web_key" field.
func (m *PublicKeyScopesMutation) ResetJSONWebKey() {
	m.json_web_key = nil
}

// SetScopes sets the "scopes" field.
func (m *PublicKeyScopesMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *PublicKeyScopesMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the PublicKeyScopes entity.
// If the PublicKeyScopes object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PublicKeyScopesMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *PublicKeyScopesMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *PublicKeyScopesMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ResetScopes resets all changes to the "scopes" field.
func (m *PublicKeyScopesMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
}

// SetSubjectPublicKeyIDID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity by id.
func (m *PublicKeyScopesMutation) SetSubjectPublicKeyIDID(id string) {
	m.subject_public_key_id = &id
}

// ClearSubjectPublicKeyID clears the "subject_public_key_id" edge to the SubjectPublicKeys entity.
func (m *PublicKeyScopesMutation) ClearSubjectPublicKeyID() {
	m.clearedsubject_public_key_id = true
}

// SubjectPublicKeyIDCleared reports if the "subject_public_key_id" edge to the SubjectPublicKeys entity was cleared.
func (m *PublicKeyScopesMutation) SubjectPublicKeyIDCleared() bool {
	return m.clearedsubject_public_key_id
}

// SubjectPublicKeyIDID returns the "subject_public_key_id" edge ID in the mutation.
func (m *PublicKeyScopesMutation) SubjectPublicKeyIDID() (id string, exists bool) {
	if m.subject_public_key_id != nil {
		return *m.subject_public_key_id, true
	}
	return
}

// SubjectPublicKeyIDIDs returns the "subject_public_key_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubjectPublicKeyIDID instead. It exists only for internal usage by the builders.
func (m *PublicKeyScopesMutation) SubjectPublicKeyIDIDs() (ids []string) {
	if id := m.subject_public_key_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubjectPublicKeyID resets all changes to the "subject_public_key_id" edge.
func (m *PublicKeyScopesMutation) ResetSubjectPublicKeyID() {
	m.subject_public_key_id = nil
	m.clearedsubject_public_key_id = false
}

// Where appends a list predicates to the PublicKeyScopesMutation builder.
func (m *PublicKeyScopesMutation) Where(ps ...predicate.PublicKeyScopes) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PublicKeyScopesMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PublicKeyScopesMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PublicKeyScopes, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PublicKeyScopesMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PublicKeyScopesMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PublicKeyScopes).
func (m *PublicKeyScopesMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PublicKeyScopesMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.json_web_key != nil {
		fields = append(fields, publickeyscopes.FieldJSONWebKey)
	}
	if m.scopes != nil {
		fields = append(fields, publickeyscopes.FieldScopes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PublicKeyScopesMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case publickeyscopes.FieldJSONWebKey:
		return m.JSONWebKey()
	case publickeyscopes.FieldScopes:
		return m.Scopes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PublicKeyScopesMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case publickeyscopes.FieldJSONWebKey:
		return m.OldJSONWebKey(ctx)
	case publickeyscopes.FieldScopes:
		return m.OldScopes(ctx)
	}
	return nil, fmt.Errorf("unknown PublicKeyScopes field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PublicKeyScopesMutation) SetField(name string, value ent.Value) error {
	switch name {
	case publickeyscopes.FieldJSONWebKey:
		v, ok := value.(jose.JSONWebKey)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJSONWebKey(v)
		return nil
	case publickeyscopes.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	}
	return fmt.Errorf("unknown PublicKeyScopes field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PublicKeyScopesMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PublicKeyScopesMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PublicKeyScopesMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PublicKeyScopes numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PublicKeyScopesMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PublicKeyScopesMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PublicKeyScopesMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PublicKeyScopes nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PublicKeyScopesMutation) ResetField(name string) error {
	switch name {
	case publickeyscopes.FieldJSONWebKey:
		m.ResetJSONWebKey()
		return nil
	case publickeyscopes.FieldScopes:
		m.ResetScopes()
		return nil
	}
	return fmt.Errorf("unknown PublicKeyScopes field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PublicKeyScopesMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subject_public_key_id != nil {
		edges = append(edges, publickeyscopes.EdgeSubjectPublicKeyID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PublicKeyScopesMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case publickeyscopes.EdgeSubjectPublicKeyID:
		if id := m.subject_public_key_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PublicKeyScopesMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PublicKeyScopesMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PublicKeyScopesMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubject_public_key_id {
		edges = append(edges, publickeyscopes.EdgeSubjectPublicKeyID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PublicKeyScopesMutation) EdgeCleared(name string) bool {
	switch name {
	case publickeyscopes.EdgeSubjectPublicKeyID:
		return m.clearedsubject_public_key_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PublicKeyScopesMutation) ClearEdge(name string) error {
	switch name {
	case publickeyscopes.EdgeSubjectPublicKeyID:
		m.ClearSubjectPublicKeyID()
		return nil
	}
	return fmt.Errorf("unknown PublicKeyScopes unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PublicKeyScopesMutation) ResetEdge(name string) error {
	switch name {
	case publickeyscopes.EdgeSubjectPublicKeyID:
		m.ResetSubjectPublicKeyID()
		return nil
	}
	return fmt.Errorf("unknown PublicKeyScopes edge %s", name)
}

// RefreshTokensMutation represents an operation that mutates the RefreshTokens nodes in the graph.
type RefreshTokensMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	request_id               *string
	requestedAt              *time.Time
	scopes                   *[]string
	appendscopes             []string
	granted_scopes           *[]string
	appendgranted_scopes     []string
	requested_audience       *[]string
	appendrequested_audience []string
	granted_audience         *[]string
	appendgranted_audience   []string
	form                     *url.Values
	lang                     *language.Tag
	active                   *bool
	clearedFields            map[string]struct{}
	client_id                *string
	clearedclient_id         bool
	session_id               *string
	clearedsession_id        bool
	done                     bool
	oldValue                 func(context.Context) (*RefreshTokens, error)
	predicates               []predicate.RefreshTokens
}

var _ ent.Mutation = (*RefreshTokensMutation)(nil)

// refreshtokensOption allows management of the mutation configuration using functional options.
type refreshtokensOption func(*RefreshTokensMutation)

// newRefreshTokensMutation creates new mutation for the RefreshTokens entity.
func newRefreshTokensMutation(c config, op Op, opts ...refreshtokensOption) *RefreshTokensMutation {
	m := &RefreshTokensMutation{
		config:        c,
		op:            op,
		typ:           TypeRefreshTokens,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRefreshTokensID sets the ID field of the mutation.
func withRefreshTokensID(id string) refreshtokensOption {
	return func(m *RefreshTokensMutation) {
		var (
			err   error
			once  sync.Once
			value *RefreshTokens
		)
		m.oldValue = func(ctx context.Context) (*RefreshTokens, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RefreshTokens.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRefreshTokens sets the old RefreshTokens of the mutation.
func withRefreshTokens(node *RefreshTokens) refreshtokensOption {
	return func(m *RefreshTokensMutation) {
		m.oldValue = func(context.Context) (*RefreshTokens, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RefreshTokensMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RefreshTokensMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RefreshTokens entities.
func (m *RefreshTokensMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RefreshTokensMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RefreshTokensMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RefreshTokens.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRequestID sets the "request_id" field.
func (m *RefreshTokensMutation) SetRequestID(s string) {
	m.request_id = &s
}

// RequestID returns the value of the "request_id" field in the mutation.
func (m *RefreshTokensMutation) RequestID() (r string, exists bool) {
	v := m.request_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestID returns the old "request_id" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldRequestID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestID: %w", err)
	}
	return oldValue.RequestID, nil
}

// ResetRequestID resets all changes to the "request_id" field.
func (m *RefreshTokensMutation) ResetRequestID() {
	m.request_id = nil
}

// SetRequestedAt sets the "requestedAt" field.
func (m *RefreshTokensMutation) SetRequestedAt(t time.Time) {
	m.requestedAt = &t
}

// RequestedAt returns the value of the "requestedAt" field in the mutation.
func (m *RefreshTokensMutation) RequestedAt() (r time.Time, exists bool) {
	v := m.requestedAt
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAt returns the old "requestedAt" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldRequestedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAt: %w", err)
	}
	return oldValue.RequestedAt, nil
}

// ResetRequestedAt resets all changes to the "requestedAt" field.
func (m *RefreshTokensMutation) ResetRequestedAt() {
	m.requestedAt = nil
}

// SetScopes sets the "scopes" field.
func (m *RefreshTokensMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *RefreshTokensMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *RefreshTokensMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *RefreshTokensMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ResetScopes resets all changes to the "scopes" field.
func (m *RefreshTokensMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
}

// SetGrantedScopes sets the "granted_scopes" field.
func (m *RefreshTokensMutation) SetGrantedScopes(s []string) {
	m.granted_scopes = &s
	m.appendgranted_scopes = nil
}

// GrantedScopes returns the value of the "granted_scopes" field in the mutation.
func (m *RefreshTokensMutation) GrantedScopes() (r []string, exists bool) {
	v := m.granted_scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedScopes returns the old "granted_scopes" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldGrantedScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedScopes: %w", err)
	}
	return oldValue.GrantedScopes, nil
}

// AppendGrantedScopes adds s to the "granted_scopes" field.
func (m *RefreshTokensMutation) AppendGrantedScopes(s []string) {
	m.appendgranted_scopes = append(m.appendgranted_scopes, s...)
}

// AppendedGrantedScopes returns the list of values that were appended to the "granted_scopes" field in this mutation.
func (m *RefreshTokensMutation) AppendedGrantedScopes() ([]string, bool) {
	if len(m.appendgranted_scopes) == 0 {
		return nil, false
	}
	return m.appendgranted_scopes, true
}

// ResetGrantedScopes resets all changes to the "granted_scopes" field.
func (m *RefreshTokensMutation) ResetGrantedScopes() {
	m.granted_scopes = nil
	m.appendgranted_scopes = nil
}

// SetRequestedAudience sets the "requested_audience" field.
func (m *RefreshTokensMutation) SetRequestedAudience(s []string) {
	m.requested_audience = &s
	m.appendrequested_audience = nil
}

// RequestedAudience returns the value of the "requested_audience" field in the mutation.
func (m *RefreshTokensMutation) RequestedAudience() (r []string, exists bool) {
	v := m.requested_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestedAudience returns the old "requested_audience" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldRequestedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestedAudience: %w", err)
	}
	return oldValue.RequestedAudience, nil
}

// AppendRequestedAudience adds s to the "requested_audience" field.
func (m *RefreshTokensMutation) AppendRequestedAudience(s []string) {
	m.appendrequested_audience = append(m.appendrequested_audience, s...)
}

// AppendedRequestedAudience returns the list of values that were appended to the "requested_audience" field in this mutation.
func (m *RefreshTokensMutation) AppendedRequestedAudience() ([]string, bool) {
	if len(m.appendrequested_audience) == 0 {
		return nil, false
	}
	return m.appendrequested_audience, true
}

// ResetRequestedAudience resets all changes to the "requested_audience" field.
func (m *RefreshTokensMutation) ResetRequestedAudience() {
	m.requested_audience = nil
	m.appendrequested_audience = nil
}

// SetGrantedAudience sets the "granted_audience" field.
func (m *RefreshTokensMutation) SetGrantedAudience(s []string) {
	m.granted_audience = &s
	m.appendgranted_audience = nil
}

// GrantedAudience returns the value of the "granted_audience" field in the mutation.
func (m *RefreshTokensMutation) GrantedAudience() (r []string, exists bool) {
	v := m.granted_audience
	if v == nil {
		return
	}
	return *v, true
}

// OldGrantedAudience returns the old "granted_audience" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldGrantedAudience(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrantedAudience is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrantedAudience requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrantedAudience: %w", err)
	}
	return oldValue.GrantedAudience, nil
}

// AppendGrantedAudience adds s to the "granted_audience" field.
func (m *RefreshTokensMutation) AppendGrantedAudience(s []string) {
	m.appendgranted_audience = append(m.appendgranted_audience, s...)
}

// AppendedGrantedAudience returns the list of values that were appended to the "granted_audience" field in this mutation.
func (m *RefreshTokensMutation) AppendedGrantedAudience() ([]string, bool) {
	if len(m.appendgranted_audience) == 0 {
		return nil, false
	}
	return m.appendgranted_audience, true
}

// ResetGrantedAudience resets all changes to the "granted_audience" field.
func (m *RefreshTokensMutation) ResetGrantedAudience() {
	m.granted_audience = nil
	m.appendgranted_audience = nil
}

// SetForm sets the "form" field.
func (m *RefreshTokensMutation) SetForm(u url.Values) {
	m.form = &u
}

// Form returns the value of the "form" field in the mutation.
func (m *RefreshTokensMutation) Form() (r url.Values, exists bool) {
	v := m.form
	if v == nil {
		return
	}
	return *v, true
}

// OldForm returns the old "form" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldForm(ctx context.Context) (v url.Values, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldForm is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldForm requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldForm: %w", err)
	}
	return oldValue.Form, nil
}

// ResetForm resets all changes to the "form" field.
func (m *RefreshTokensMutation) ResetForm() {
	m.form = nil
}

// SetLang sets the "lang" field.
func (m *RefreshTokensMutation) SetLang(l language.Tag) {
	m.lang = &l
}

// Lang returns the value of the "lang" field in the mutation.
func (m *RefreshTokensMutation) Lang() (r language.Tag, exists bool) {
	v := m.lang
	if v == nil {
		return
	}
	return *v, true
}

// OldLang returns the old "lang" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldLang(ctx context.Context) (v language.Tag, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLang is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLang requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLang: %w", err)
	}
	return oldValue.Lang, nil
}

// ClearLang clears the value of the "lang" field.
func (m *RefreshTokensMutation) ClearLang() {
	m.lang = nil
	m.clearedFields[refreshtokens.FieldLang] = struct{}{}
}

// LangCleared returns if the "lang" field was cleared in this mutation.
func (m *RefreshTokensMutation) LangCleared() bool {
	_, ok := m.clearedFields[refreshtokens.FieldLang]
	return ok
}

// ResetLang resets all changes to the "lang" field.
func (m *RefreshTokensMutation) ResetLang() {
	m.lang = nil
	delete(m.clearedFields, refreshtokens.FieldLang)
}

// SetActive sets the "active" field.
func (m *RefreshTokensMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *RefreshTokensMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the RefreshTokens entity.
// If the RefreshTokens object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokensMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *RefreshTokensMutation) ResetActive() {
	m.active = nil
}

// SetClientIDID sets the "client_id" edge to the Clients entity by id.
func (m *RefreshTokensMutation) SetClientIDID(id string) {
	m.client_id = &id
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (m *RefreshTokensMutation) ClearClientID() {
	m.clearedclient_id = true
}

// ClientIDCleared reports if the "client_id" edge to the Clients entity was cleared.
func (m *RefreshTokensMutation) ClientIDCleared() bool {
	return m.clearedclient_id
}

// ClientIDID returns the "client_id" edge ID in the mutation.
func (m *RefreshTokensMutation) ClientIDID() (id string, exists bool) {
	if m.client_id != nil {
		return *m.client_id, true
	}
	return
}

// ClientIDIDs returns the "client_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ClientIDID instead. It exists only for internal usage by the builders.
func (m *RefreshTokensMutation) ClientIDIDs() (ids []string) {
	if id := m.client_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetClientID resets all changes to the "client_id" edge.
func (m *RefreshTokensMutation) ResetClientID() {
	m.client_id = nil
	m.clearedclient_id = false
}

// SetSessionIDID sets the "session_id" edge to the Session entity by id.
func (m *RefreshTokensMutation) SetSessionIDID(id string) {
	m.session_id = &id
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (m *RefreshTokensMutation) ClearSessionID() {
	m.clearedsession_id = true
}

// SessionIDCleared reports if the "session_id" edge to the Session entity was cleared.
func (m *RefreshTokensMutation) SessionIDCleared() bool {
	return m.clearedsession_id
}

// SessionIDID returns the "session_id" edge ID in the mutation.
func (m *RefreshTokensMutation) SessionIDID() (id string, exists bool) {
	if m.session_id != nil {
		return *m.session_id, true
	}
	return
}

// SessionIDIDs returns the "session_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SessionIDID instead. It exists only for internal usage by the builders.
func (m *RefreshTokensMutation) SessionIDIDs() (ids []string) {
	if id := m.session_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSessionID resets all changes to the "session_id" edge.
func (m *RefreshTokensMutation) ResetSessionID() {
	m.session_id = nil
	m.clearedsession_id = false
}

// Where appends a list predicates to the RefreshTokensMutation builder.
func (m *RefreshTokensMutation) Where(ps ...predicate.RefreshTokens) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RefreshTokensMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RefreshTokensMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RefreshTokens, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RefreshTokensMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RefreshTokensMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RefreshTokens).
func (m *RefreshTokensMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RefreshTokensMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.request_id != nil {
		fields = append(fields, refreshtokens.FieldRequestID)
	}
	if m.requestedAt != nil {
		fields = append(fields, refreshtokens.FieldRequestedAt)
	}
	if m.scopes != nil {
		fields = append(fields, refreshtokens.FieldScopes)
	}
	if m.granted_scopes != nil {
		fields = append(fields, refreshtokens.FieldGrantedScopes)
	}
	if m.requested_audience != nil {
		fields = append(fields, refreshtokens.FieldRequestedAudience)
	}
	if m.granted_audience != nil {
		fields = append(fields, refreshtokens.FieldGrantedAudience)
	}
	if m.form != nil {
		fields = append(fields, refreshtokens.FieldForm)
	}
	if m.lang != nil {
		fields = append(fields, refreshtokens.FieldLang)
	}
	if m.active != nil {
		fields = append(fields, refreshtokens.FieldActive)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RefreshTokensMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case refreshtokens.FieldRequestID:
		return m.RequestID()
	case refreshtokens.FieldRequestedAt:
		return m.RequestedAt()
	case refreshtokens.FieldScopes:
		return m.Scopes()
	case refreshtokens.FieldGrantedScopes:
		return m.GrantedScopes()
	case refreshtokens.FieldRequestedAudience:
		return m.RequestedAudience()
	case refreshtokens.FieldGrantedAudience:
		return m.GrantedAudience()
	case refreshtokens.FieldForm:
		return m.Form()
	case refreshtokens.FieldLang:
		return m.Lang()
	case refreshtokens.FieldActive:
		return m.Active()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RefreshTokensMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case refreshtokens.FieldRequestID:
		return m.OldRequestID(ctx)
	case refreshtokens.FieldRequestedAt:
		return m.OldRequestedAt(ctx)
	case refreshtokens.FieldScopes:
		return m.OldScopes(ctx)
	case refreshtokens.FieldGrantedScopes:
		return m.OldGrantedScopes(ctx)
	case refreshtokens.FieldRequestedAudience:
		return m.OldRequestedAudience(ctx)
	case refreshtokens.FieldGrantedAudience:
		return m.OldGrantedAudience(ctx)
	case refreshtokens.FieldForm:
		return m.OldForm(ctx)
	case refreshtokens.FieldLang:
		return m.OldLang(ctx)
	case refreshtokens.FieldActive:
		return m.OldActive(ctx)
	}
	return nil, fmt.Errorf("unknown RefreshTokens field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokensMutation) SetField(name string, value ent.Value) error {
	switch name {
	case refreshtokens.FieldRequestID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestID(v)
		return nil
	case refreshtokens.FieldRequestedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAt(v)
		return nil
	case refreshtokens.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case refreshtokens.FieldGrantedScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedScopes(v)
		return nil
	case refreshtokens.FieldRequestedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestedAudience(v)
		return nil
	case refreshtokens.FieldGrantedAudience:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrantedAudience(v)
		return nil
	case refreshtokens.FieldForm:
		v, ok := value.(url.Values)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetForm(v)
		return nil
	case refreshtokens.FieldLang:
		v, ok := value.(language.Tag)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLang(v)
		return nil
	case refreshtokens.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	}
	return fmt.Errorf("unknown RefreshTokens field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RefreshTokensMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RefreshTokensMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokensMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RefreshTokens numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RefreshTokensMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(refreshtokens.FieldLang) {
		fields = append(fields, refreshtokens.FieldLang)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RefreshTokensMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RefreshTokensMutation) ClearField(name string) error {
	switch name {
	case refreshtokens.FieldLang:
		m.ClearLang()
		return nil
	}
	return fmt.Errorf("unknown RefreshTokens nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RefreshTokensMutation) ResetField(name string) error {
	switch name {
	case refreshtokens.FieldRequestID:
		m.ResetRequestID()
		return nil
	case refreshtokens.FieldRequestedAt:
		m.ResetRequestedAt()
		return nil
	case refreshtokens.FieldScopes:
		m.ResetScopes()
		return nil
	case refreshtokens.FieldGrantedScopes:
		m.ResetGrantedScopes()
		return nil
	case refreshtokens.FieldRequestedAudience:
		m.ResetRequestedAudience()
		return nil
	case refreshtokens.FieldGrantedAudience:
		m.ResetGrantedAudience()
		return nil
	case refreshtokens.FieldForm:
		m.ResetForm()
		return nil
	case refreshtokens.FieldLang:
		m.ResetLang()
		return nil
	case refreshtokens.FieldActive:
		m.ResetActive()
		return nil
	}
	return fmt.Errorf("unknown RefreshTokens field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RefreshTokensMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.client_id != nil {
		edges = append(edges, refreshtokens.EdgeClientID)
	}
	if m.session_id != nil {
		edges = append(edges, refreshtokens.EdgeSessionID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RefreshTokensMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case refreshtokens.EdgeClientID:
		if id := m.client_id; id != nil {
			return []ent.Value{*id}
		}
	case refreshtokens.EdgeSessionID:
		if id := m.session_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RefreshTokensMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RefreshTokensMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RefreshTokensMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedclient_id {
		edges = append(edges, refreshtokens.EdgeClientID)
	}
	if m.clearedsession_id {
		edges = append(edges, refreshtokens.EdgeSessionID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RefreshTokensMutation) EdgeCleared(name string) bool {
	switch name {
	case refreshtokens.EdgeClientID:
		return m.clearedclient_id
	case refreshtokens.EdgeSessionID:
		return m.clearedsession_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RefreshTokensMutation) ClearEdge(name string) error {
	switch name {
	case refreshtokens.EdgeClientID:
		m.ClearClientID()
		return nil
	case refreshtokens.EdgeSessionID:
		m.ClearSessionID()
		return nil
	}
	return fmt.Errorf("unknown RefreshTokens unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RefreshTokensMutation) ResetEdge(name string) error {
	switch name {
	case refreshtokens.EdgeClientID:
		m.ResetClientID()
		return nil
	case refreshtokens.EdgeSessionID:
		m.ResetSessionID()
		return nil
	}
	return fmt.Errorf("unknown RefreshTokens edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op                    Op
	typ                   string
	id                    *string
	expires_at            *map[string]time.Time
	username              *string
	subject               *string
	extra                 *map[string]interface{}
	session               *any
	clearedFields         map[string]struct{}
	access_token          map[string]struct{}
	removedaccess_token   map[string]struct{}
	clearedaccess_token   bool
	authorize_code        map[string]struct{}
	removedauthorize_code map[string]struct{}
	clearedauthorize_code bool
	refresh_token         map[string]struct{}
	removedrefresh_token  map[string]struct{}
	clearedrefresh_token  bool
	id_session            map[string]struct{}
	removedid_session     map[string]struct{}
	clearedid_session     bool
	pkce                  map[string]struct{}
	removedpkce           map[string]struct{}
	clearedpkce           bool
	done                  bool
	oldValue              func(context.Context) (*Session, error)
	predicates            []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id string) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Session entities.
func (m *SessionMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExpiresAt sets the "expires_at" field.
func (m *SessionMutation) SetExpiresAt(value map[string]time.Time) {
	m.expires_at = &value
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *SessionMutation) ExpiresAt() (r map[string]time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExpiresAt(ctx context.Context) (v map[string]time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *SessionMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetUsername sets the "username" field.
func (m *SessionMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *SessionMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ClearUsername clears the value of the "username" field.
func (m *SessionMutation) ClearUsername() {
	m.username = nil
	m.clearedFields[session.FieldUsername] = struct{}{}
}

// UsernameCleared returns if the "username" field was cleared in this mutation.
func (m *SessionMutation) UsernameCleared() bool {
	_, ok := m.clearedFields[session.FieldUsername]
	return ok
}

// ResetUsername resets all changes to the "username" field.
func (m *SessionMutation) ResetUsername() {
	m.username = nil
	delete(m.clearedFields, session.FieldUsername)
}

// SetSubject sets the "subject" field.
func (m *SessionMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *SessionMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ClearSubject clears the value of the "subject" field.
func (m *SessionMutation) ClearSubject() {
	m.subject = nil
	m.clearedFields[session.FieldSubject] = struct{}{}
}

// SubjectCleared returns if the "subject" field was cleared in this mutation.
func (m *SessionMutation) SubjectCleared() bool {
	_, ok := m.clearedFields[session.FieldSubject]
	return ok
}

// ResetSubject resets all changes to the "subject" field.
func (m *SessionMutation) ResetSubject() {
	m.subject = nil
	delete(m.clearedFields, session.FieldSubject)
}

// SetExtra sets the "extra" field.
func (m *SessionMutation) SetExtra(value map[string]interface{}) {
	m.extra = &value
}

// Extra returns the value of the "extra" field in the mutation.
func (m *SessionMutation) Extra() (r map[string]interface{}, exists bool) {
	v := m.extra
	if v == nil {
		return
	}
	return *v, true
}

// OldExtra returns the old "extra" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldExtra(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtra is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtra requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtra: %w", err)
	}
	return oldValue.Extra, nil
}

// ClearExtra clears the value of the "extra" field.
func (m *SessionMutation) ClearExtra() {
	m.extra = nil
	m.clearedFields[session.FieldExtra] = struct{}{}
}

// ExtraCleared returns if the "extra" field was cleared in this mutation.
func (m *SessionMutation) ExtraCleared() bool {
	_, ok := m.clearedFields[session.FieldExtra]
	return ok
}

// ResetExtra resets all changes to the "extra" field.
func (m *SessionMutation) ResetExtra() {
	m.extra = nil
	delete(m.clearedFields, session.FieldExtra)
}

// SetSession sets the "session" field.
func (m *SessionMutation) SetSession(a any) {
	m.session = &a
}

// Session returns the value of the "session" field in the mutation.
func (m *SessionMutation) Session() (r any, exists bool) {
	v := m.session
	if v == nil {
		return
	}
	return *v, true
}

// OldSession returns the old "session" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSession(ctx context.Context) (v any, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSession is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSession requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSession: %w", err)
	}
	return oldValue.Session, nil
}

// ClearSession clears the value of the "session" field.
func (m *SessionMutation) ClearSession() {
	m.session = nil
	m.clearedFields[session.FieldSession] = struct{}{}
}

// SessionCleared returns if the "session" field was cleared in this mutation.
func (m *SessionMutation) SessionCleared() bool {
	_, ok := m.clearedFields[session.FieldSession]
	return ok
}

// ResetSession resets all changes to the "session" field.
func (m *SessionMutation) ResetSession() {
	m.session = nil
	delete(m.clearedFields, session.FieldSession)
}

// AddAccessTokenIDs adds the "access_token" edge to the AccessTokens entity by ids.
func (m *SessionMutation) AddAccessTokenIDs(ids ...string) {
	if m.access_token == nil {
		m.access_token = make(map[string]struct{})
	}
	for i := range ids {
		m.access_token[ids[i]] = struct{}{}
	}
}

// ClearAccessToken clears the "access_token" edge to the AccessTokens entity.
func (m *SessionMutation) ClearAccessToken() {
	m.clearedaccess_token = true
}

// AccessTokenCleared reports if the "access_token" edge to the AccessTokens entity was cleared.
func (m *SessionMutation) AccessTokenCleared() bool {
	return m.clearedaccess_token
}

// RemoveAccessTokenIDs removes the "access_token" edge to the AccessTokens entity by IDs.
func (m *SessionMutation) RemoveAccessTokenIDs(ids ...string) {
	if m.removedaccess_token == nil {
		m.removedaccess_token = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.access_token, ids[i])
		m.removedaccess_token[ids[i]] = struct{}{}
	}
}

// RemovedAccessToken returns the removed IDs of the "access_token" edge to the AccessTokens entity.
func (m *SessionMutation) RemovedAccessTokenIDs() (ids []string) {
	for id := range m.removedaccess_token {
		ids = append(ids, id)
	}
	return
}

// AccessTokenIDs returns the "access_token" edge IDs in the mutation.
func (m *SessionMutation) AccessTokenIDs() (ids []string) {
	for id := range m.access_token {
		ids = append(ids, id)
	}
	return
}

// ResetAccessToken resets all changes to the "access_token" edge.
func (m *SessionMutation) ResetAccessToken() {
	m.access_token = nil
	m.clearedaccess_token = false
	m.removedaccess_token = nil
}

// AddAuthorizeCodeIDs adds the "authorize_code" edge to the AuthorizeCodes entity by ids.
func (m *SessionMutation) AddAuthorizeCodeIDs(ids ...string) {
	if m.authorize_code == nil {
		m.authorize_code = make(map[string]struct{})
	}
	for i := range ids {
		m.authorize_code[ids[i]] = struct{}{}
	}
}

// ClearAuthorizeCode clears the "authorize_code" edge to the AuthorizeCodes entity.
func (m *SessionMutation) ClearAuthorizeCode() {
	m.clearedauthorize_code = true
}

// AuthorizeCodeCleared reports if the "authorize_code" edge to the AuthorizeCodes entity was cleared.
func (m *SessionMutation) AuthorizeCodeCleared() bool {
	return m.clearedauthorize_code
}

// RemoveAuthorizeCodeIDs removes the "authorize_code" edge to the AuthorizeCodes entity by IDs.
func (m *SessionMutation) RemoveAuthorizeCodeIDs(ids ...string) {
	if m.removedauthorize_code == nil {
		m.removedauthorize_code = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.authorize_code, ids[i])
		m.removedauthorize_code[ids[i]] = struct{}{}
	}
}

// RemovedAuthorizeCode returns the removed IDs of the "authorize_code" edge to the AuthorizeCodes entity.
func (m *SessionMutation) RemovedAuthorizeCodeIDs() (ids []string) {
	for id := range m.removedauthorize_code {
		ids = append(ids, id)
	}
	return
}

// AuthorizeCodeIDs returns the "authorize_code" edge IDs in the mutation.
func (m *SessionMutation) AuthorizeCodeIDs() (ids []string) {
	for id := range m.authorize_code {
		ids = append(ids, id)
	}
	return
}

// ResetAuthorizeCode resets all changes to the "authorize_code" edge.
func (m *SessionMutation) ResetAuthorizeCode() {
	m.authorize_code = nil
	m.clearedauthorize_code = false
	m.removedauthorize_code = nil
}

// AddRefreshTokenIDs adds the "refresh_token" edge to the RefreshTokens entity by ids.
func (m *SessionMutation) AddRefreshTokenIDs(ids ...string) {
	if m.refresh_token == nil {
		m.refresh_token = make(map[string]struct{})
	}
	for i := range ids {
		m.refresh_token[ids[i]] = struct{}{}
	}
}

// ClearRefreshToken clears the "refresh_token" edge to the RefreshTokens entity.
func (m *SessionMutation) ClearRefreshToken() {
	m.clearedrefresh_token = true
}

// RefreshTokenCleared reports if the "refresh_token" edge to the RefreshTokens entity was cleared.
func (m *SessionMutation) RefreshTokenCleared() bool {
	return m.clearedrefresh_token
}

// RemoveRefreshTokenIDs removes the "refresh_token" edge to the RefreshTokens entity by IDs.
func (m *SessionMutation) RemoveRefreshTokenIDs(ids ...string) {
	if m.removedrefresh_token == nil {
		m.removedrefresh_token = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.refresh_token, ids[i])
		m.removedrefresh_token[ids[i]] = struct{}{}
	}
}

// RemovedRefreshToken returns the removed IDs of the "refresh_token" edge to the RefreshTokens entity.
func (m *SessionMutation) RemovedRefreshTokenIDs() (ids []string) {
	for id := range m.removedrefresh_token {
		ids = append(ids, id)
	}
	return
}

// RefreshTokenIDs returns the "refresh_token" edge IDs in the mutation.
func (m *SessionMutation) RefreshTokenIDs() (ids []string) {
	for id := range m.refresh_token {
		ids = append(ids, id)
	}
	return
}

// ResetRefreshToken resets all changes to the "refresh_token" edge.
func (m *SessionMutation) ResetRefreshToken() {
	m.refresh_token = nil
	m.clearedrefresh_token = false
	m.removedrefresh_token = nil
}

// AddIDSessionIDs adds the "id_session" edge to the IDSessions entity by ids.
func (m *SessionMutation) AddIDSessionIDs(ids ...string) {
	if m.id_session == nil {
		m.id_session = make(map[string]struct{})
	}
	for i := range ids {
		m.id_session[ids[i]] = struct{}{}
	}
}

// ClearIDSession clears the "id_session" edge to the IDSessions entity.
func (m *SessionMutation) ClearIDSession() {
	m.clearedid_session = true
}

// IDSessionCleared reports if the "id_session" edge to the IDSessions entity was cleared.
func (m *SessionMutation) IDSessionCleared() bool {
	return m.clearedid_session
}

// RemoveIDSessionIDs removes the "id_session" edge to the IDSessions entity by IDs.
func (m *SessionMutation) RemoveIDSessionIDs(ids ...string) {
	if m.removedid_session == nil {
		m.removedid_session = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.id_session, ids[i])
		m.removedid_session[ids[i]] = struct{}{}
	}
}

// RemovedIDSession returns the removed IDs of the "id_session" edge to the IDSessions entity.
func (m *SessionMutation) RemovedIDSessionIDs() (ids []string) {
	for id := range m.removedid_session {
		ids = append(ids, id)
	}
	return
}

// IDSessionIDs returns the "id_session" edge IDs in the mutation.
func (m *SessionMutation) IDSessionIDs() (ids []string) {
	for id := range m.id_session {
		ids = append(ids, id)
	}
	return
}

// ResetIDSession resets all changes to the "id_session" edge.
func (m *SessionMutation) ResetIDSession() {
	m.id_session = nil
	m.clearedid_session = false
	m.removedid_session = nil
}

// AddPkceIDs adds the "pkce" edge to the PKCES entity by ids.
func (m *SessionMutation) AddPkceIDs(ids ...string) {
	if m.pkce == nil {
		m.pkce = make(map[string]struct{})
	}
	for i := range ids {
		m.pkce[ids[i]] = struct{}{}
	}
}

// ClearPkce clears the "pkce" edge to the PKCES entity.
func (m *SessionMutation) ClearPkce() {
	m.clearedpkce = true
}

// PkceCleared reports if the "pkce" edge to the PKCES entity was cleared.
func (m *SessionMutation) PkceCleared() bool {
	return m.clearedpkce
}

// RemovePkceIDs removes the "pkce" edge to the PKCES entity by IDs.
func (m *SessionMutation) RemovePkceIDs(ids ...string) {
	if m.removedpkce == nil {
		m.removedpkce = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.pkce, ids[i])
		m.removedpkce[ids[i]] = struct{}{}
	}
}

// RemovedPkce returns the removed IDs of the "pkce" edge to the PKCES entity.
func (m *SessionMutation) RemovedPkceIDs() (ids []string) {
	for id := range m.removedpkce {
		ids = append(ids, id)
	}
	return
}

// PkceIDs returns the "pkce" edge IDs in the mutation.
func (m *SessionMutation) PkceIDs() (ids []string) {
	for id := range m.pkce {
		ids = append(ids, id)
	}
	return
}

// ResetPkce resets all changes to the "pkce" edge.
func (m *SessionMutation) ResetPkce() {
	m.pkce = nil
	m.clearedpkce = false
	m.removedpkce = nil
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SessionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SessionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Session, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SessionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.expires_at != nil {
		fields = append(fields, session.FieldExpiresAt)
	}
	if m.username != nil {
		fields = append(fields, session.FieldUsername)
	}
	if m.subject != nil {
		fields = append(fields, session.FieldSubject)
	}
	if m.extra != nil {
		fields = append(fields, session.FieldExtra)
	}
	if m.session != nil {
		fields = append(fields, session.FieldSession)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldExpiresAt:
		return m.ExpiresAt()
	case session.FieldUsername:
		return m.Username()
	case session.FieldSubject:
		return m.Subject()
	case session.FieldExtra:
		return m.Extra()
	case session.FieldSession:
		return m.Session()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case session.FieldUsername:
		return m.OldUsername(ctx)
	case session.FieldSubject:
		return m.OldSubject(ctx)
	case session.FieldExtra:
		return m.OldExtra(ctx)
	case session.FieldSession:
		return m.OldSession(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldExpiresAt:
		v, ok := value.(map[string]time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case session.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case session.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case session.FieldExtra:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtra(v)
		return nil
	case session.FieldSession:
		v, ok := value.(any)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSession(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(session.FieldUsername) {
		fields = append(fields, session.FieldUsername)
	}
	if m.FieldCleared(session.FieldSubject) {
		fields = append(fields, session.FieldSubject)
	}
	if m.FieldCleared(session.FieldExtra) {
		fields = append(fields, session.FieldExtra)
	}
	if m.FieldCleared(session.FieldSession) {
		fields = append(fields, session.FieldSession)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	switch name {
	case session.FieldUsername:
		m.ClearUsername()
		return nil
	case session.FieldSubject:
		m.ClearSubject()
		return nil
	case session.FieldExtra:
		m.ClearExtra()
		return nil
	case session.FieldSession:
		m.ClearSession()
		return nil
	}
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case session.FieldUsername:
		m.ResetUsername()
		return nil
	case session.FieldSubject:
		m.ResetSubject()
		return nil
	case session.FieldExtra:
		m.ResetExtra()
		return nil
	case session.FieldSession:
		m.ResetSession()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.access_token != nil {
		edges = append(edges, session.EdgeAccessToken)
	}
	if m.authorize_code != nil {
		edges = append(edges, session.EdgeAuthorizeCode)
	}
	if m.refresh_token != nil {
		edges = append(edges, session.EdgeRefreshToken)
	}
	if m.id_session != nil {
		edges = append(edges, session.EdgeIDSession)
	}
	if m.pkce != nil {
		edges = append(edges, session.EdgePkce)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeAccessToken:
		ids := make([]ent.Value, 0, len(m.access_token))
		for id := range m.access_token {
			ids = append(ids, id)
		}
		return ids
	case session.EdgeAuthorizeCode:
		ids := make([]ent.Value, 0, len(m.authorize_code))
		for id := range m.authorize_code {
			ids = append(ids, id)
		}
		return ids
	case session.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.refresh_token))
		for id := range m.refresh_token {
			ids = append(ids, id)
		}
		return ids
	case session.EdgeIDSession:
		ids := make([]ent.Value, 0, len(m.id_session))
		for id := range m.id_session {
			ids = append(ids, id)
		}
		return ids
	case session.EdgePkce:
		ids := make([]ent.Value, 0, len(m.pkce))
		for id := range m.pkce {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedaccess_token != nil {
		edges = append(edges, session.EdgeAccessToken)
	}
	if m.removedauthorize_code != nil {
		edges = append(edges, session.EdgeAuthorizeCode)
	}
	if m.removedrefresh_token != nil {
		edges = append(edges, session.EdgeRefreshToken)
	}
	if m.removedid_session != nil {
		edges = append(edges, session.EdgeIDSession)
	}
	if m.removedpkce != nil {
		edges = append(edges, session.EdgePkce)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case session.EdgeAccessToken:
		ids := make([]ent.Value, 0, len(m.removedaccess_token))
		for id := range m.removedaccess_token {
			ids = append(ids, id)
		}
		return ids
	case session.EdgeAuthorizeCode:
		ids := make([]ent.Value, 0, len(m.removedauthorize_code))
		for id := range m.removedauthorize_code {
			ids = append(ids, id)
		}
		return ids
	case session.EdgeRefreshToken:
		ids := make([]ent.Value, 0, len(m.removedrefresh_token))
		for id := range m.removedrefresh_token {
			ids = append(ids, id)
		}
		return ids
	case session.EdgeIDSession:
		ids := make([]ent.Value, 0, len(m.removedid_session))
		for id := range m.removedid_session {
			ids = append(ids, id)
		}
		return ids
	case session.EdgePkce:
		ids := make([]ent.Value, 0, len(m.removedpkce))
		for id := range m.removedpkce {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedaccess_token {
		edges = append(edges, session.EdgeAccessToken)
	}
	if m.clearedauthorize_code {
		edges = append(edges, session.EdgeAuthorizeCode)
	}
	if m.clearedrefresh_token {
		edges = append(edges, session.EdgeRefreshToken)
	}
	if m.clearedid_session {
		edges = append(edges, session.EdgeIDSession)
	}
	if m.clearedpkce {
		edges = append(edges, session.EdgePkce)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	case session.EdgeAccessToken:
		return m.clearedaccess_token
	case session.EdgeAuthorizeCode:
		return m.clearedauthorize_code
	case session.EdgeRefreshToken:
		return m.clearedrefresh_token
	case session.EdgeIDSession:
		return m.clearedid_session
	case session.EdgePkce:
		return m.clearedpkce
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	case session.EdgeAccessToken:
		m.ResetAccessToken()
		return nil
	case session.EdgeAuthorizeCode:
		m.ResetAuthorizeCode()
		return nil
	case session.EdgeRefreshToken:
		m.ResetRefreshToken()
		return nil
	case session.EdgeIDSession:
		m.ResetIDSession()
		return nil
	case session.EdgePkce:
		m.ResetPkce()
		return nil
	}
	return fmt.Errorf("unknown Session edge %s", name)
}

// SubjectPublicKeysMutation represents an operation that mutates the SubjectPublicKeys nodes in the graph.
type SubjectPublicKeysMutation struct {
	config
	op                          Op
	typ                         string
	id                          *string
	clearedFields               map[string]struct{}
	public_key_scope            *string
	clearedpublic_key_scope     bool
	issuer_public_key_id        *string
	clearedissuer_public_key_id bool
	done                        bool
	oldValue                    func(context.Context) (*SubjectPublicKeys, error)
	predicates                  []predicate.SubjectPublicKeys
}

var _ ent.Mutation = (*SubjectPublicKeysMutation)(nil)

// subjectpublickeysOption allows management of the mutation configuration using functional options.
type subjectpublickeysOption func(*SubjectPublicKeysMutation)

// newSubjectPublicKeysMutation creates new mutation for the SubjectPublicKeys entity.
func newSubjectPublicKeysMutation(c config, op Op, opts ...subjectpublickeysOption) *SubjectPublicKeysMutation {
	m := &SubjectPublicKeysMutation{
		config:        c,
		op:            op,
		typ:           TypeSubjectPublicKeys,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubjectPublicKeysID sets the ID field of the mutation.
func withSubjectPublicKeysID(id string) subjectpublickeysOption {
	return func(m *SubjectPublicKeysMutation) {
		var (
			err   error
			once  sync.Once
			value *SubjectPublicKeys
		)
		m.oldValue = func(ctx context.Context) (*SubjectPublicKeys, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubjectPublicKeys.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubjectPublicKeys sets the old SubjectPublicKeys of the mutation.
func withSubjectPublicKeys(node *SubjectPublicKeys) subjectpublickeysOption {
	return func(m *SubjectPublicKeysMutation) {
		m.oldValue = func(context.Context) (*SubjectPublicKeys, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubjectPublicKeysMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubjectPublicKeysMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SubjectPublicKeys entities.
func (m *SubjectPublicKeysMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubjectPublicKeysMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubjectPublicKeysMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubjectPublicKeys.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPublicKeyScopeID sets the "public_key_scope" edge to the PublicKeyScopes entity by id.
func (m *SubjectPublicKeysMutation) SetPublicKeyScopeID(id string) {
	m.public_key_scope = &id
}

// ClearPublicKeyScope clears the "public_key_scope" edge to the PublicKeyScopes entity.
func (m *SubjectPublicKeysMutation) ClearPublicKeyScope() {
	m.clearedpublic_key_scope = true
}

// PublicKeyScopeCleared reports if the "public_key_scope" edge to the PublicKeyScopes entity was cleared.
func (m *SubjectPublicKeysMutation) PublicKeyScopeCleared() bool {
	return m.clearedpublic_key_scope
}

// PublicKeyScopeID returns the "public_key_scope" edge ID in the mutation.
func (m *SubjectPublicKeysMutation) PublicKeyScopeID() (id string, exists bool) {
	if m.public_key_scope != nil {
		return *m.public_key_scope, true
	}
	return
}

// PublicKeyScopeIDs returns the "public_key_scope" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PublicKeyScopeID instead. It exists only for internal usage by the builders.
func (m *SubjectPublicKeysMutation) PublicKeyScopeIDs() (ids []string) {
	if id := m.public_key_scope; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPublicKeyScope resets all changes to the "public_key_scope" edge.
func (m *SubjectPublicKeysMutation) ResetPublicKeyScope() {
	m.public_key_scope = nil
	m.clearedpublic_key_scope = false
}

// SetIssuerPublicKeyIDID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity by id.
func (m *SubjectPublicKeysMutation) SetIssuerPublicKeyIDID(id string) {
	m.issuer_public_key_id = &id
}

// ClearIssuerPublicKeyID clears the "issuer_public_key_id" edge to the IssuerPublicKeys entity.
func (m *SubjectPublicKeysMutation) ClearIssuerPublicKeyID() {
	m.clearedissuer_public_key_id = true
}

// IssuerPublicKeyIDCleared reports if the "issuer_public_key_id" edge to the IssuerPublicKeys entity was cleared.
func (m *SubjectPublicKeysMutation) IssuerPublicKeyIDCleared() bool {
	return m.clearedissuer_public_key_id
}

// IssuerPublicKeyIDID returns the "issuer_public_key_id" edge ID in the mutation.
func (m *SubjectPublicKeysMutation) IssuerPublicKeyIDID() (id string, exists bool) {
	if m.issuer_public_key_id != nil {
		return *m.issuer_public_key_id, true
	}
	return
}

// IssuerPublicKeyIDIDs returns the "issuer_public_key_id" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// IssuerPublicKeyIDID instead. It exists only for internal usage by the builders.
func (m *SubjectPublicKeysMutation) IssuerPublicKeyIDIDs() (ids []string) {
	if id := m.issuer_public_key_id; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIssuerPublicKeyID resets all changes to the "issuer_public_key_id" edge.
func (m *SubjectPublicKeysMutation) ResetIssuerPublicKeyID() {
	m.issuer_public_key_id = nil
	m.clearedissuer_public_key_id = false
}

// Where appends a list predicates to the SubjectPublicKeysMutation builder.
func (m *SubjectPublicKeysMutation) Where(ps ...predicate.SubjectPublicKeys) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubjectPublicKeysMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubjectPublicKeysMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubjectPublicKeys, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubjectPublicKeysMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubjectPublicKeysMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubjectPublicKeys).
func (m *SubjectPublicKeysMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubjectPublicKeysMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubjectPublicKeysMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubjectPublicKeysMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown SubjectPublicKeys field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectPublicKeysMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SubjectPublicKeys field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubjectPublicKeysMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubjectPublicKeysMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubjectPublicKeysMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown SubjectPublicKeys numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubjectPublicKeysMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubjectPublicKeysMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubjectPublicKeysMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SubjectPublicKeys nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubjectPublicKeysMutation) ResetField(name string) error {
	return fmt.Errorf("unknown SubjectPublicKeys field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubjectPublicKeysMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.public_key_scope != nil {
		edges = append(edges, subjectpublickeys.EdgePublicKeyScope)
	}
	if m.issuer_public_key_id != nil {
		edges = append(edges, subjectpublickeys.EdgeIssuerPublicKeyID)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubjectPublicKeysMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subjectpublickeys.EdgePublicKeyScope:
		if id := m.public_key_scope; id != nil {
			return []ent.Value{*id}
		}
	case subjectpublickeys.EdgeIssuerPublicKeyID:
		if id := m.issuer_public_key_id; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubjectPublicKeysMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubjectPublicKeysMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubjectPublicKeysMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpublic_key_scope {
		edges = append(edges, subjectpublickeys.EdgePublicKeyScope)
	}
	if m.clearedissuer_public_key_id {
		edges = append(edges, subjectpublickeys.EdgeIssuerPublicKeyID)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubjectPublicKeysMutation) EdgeCleared(name string) bool {
	switch name {
	case subjectpublickeys.EdgePublicKeyScope:
		return m.clearedpublic_key_scope
	case subjectpublickeys.EdgeIssuerPublicKeyID:
		return m.clearedissuer_public_key_id
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubjectPublicKeysMutation) ClearEdge(name string) error {
	switch name {
	case subjectpublickeys.EdgePublicKeyScope:
		m.ClearPublicKeyScope()
		return nil
	case subjectpublickeys.EdgeIssuerPublicKeyID:
		m.ClearIssuerPublicKeyID()
		return nil
	}
	return fmt.Errorf("unknown SubjectPublicKeys unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubjectPublicKeysMutation) ResetEdge(name string) error {
	switch name {
	case subjectpublickeys.EdgePublicKeyScope:
		m.ResetPublicKeyScope()
		return nil
	case subjectpublickeys.EdgeIssuerPublicKeyID:
		m.ResetIssuerPublicKeyID()
		return nil
	}
	return fmt.Errorf("unknown SubjectPublicKeys edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
