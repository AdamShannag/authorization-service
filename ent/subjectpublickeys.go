// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/subjectpublickeys"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubjectPublicKeys is the model entity for the SubjectPublicKeys schema.
type SubjectPublicKeys struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubjectPublicKeysQuery when eager-loading is set.
	Edges                                 SubjectPublicKeysEdges `json:"edges"`
	issuer_public_keys_subject_public_key *string
	selectValues                          sql.SelectValues
}

// SubjectPublicKeysEdges holds the relations/edges for other nodes in the graph.
type SubjectPublicKeysEdges struct {
	// PublicKeyScope holds the value of the public_key_scope edge.
	PublicKeyScope *PublicKeyScopes `json:"public_key_scope,omitempty"`
	// IssuerPublicKeyID holds the value of the issuer_public_key_id edge.
	IssuerPublicKeyID *IssuerPublicKeys `json:"issuer_public_key_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PublicKeyScopeOrErr returns the PublicKeyScope value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubjectPublicKeysEdges) PublicKeyScopeOrErr() (*PublicKeyScopes, error) {
	if e.loadedTypes[0] {
		if e.PublicKeyScope == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: publickeyscopes.Label}
		}
		return e.PublicKeyScope, nil
	}
	return nil, &NotLoadedError{edge: "public_key_scope"}
}

// IssuerPublicKeyIDOrErr returns the IssuerPublicKeyID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubjectPublicKeysEdges) IssuerPublicKeyIDOrErr() (*IssuerPublicKeys, error) {
	if e.loadedTypes[1] {
		if e.IssuerPublicKeyID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: issuerpublickeys.Label}
		}
		return e.IssuerPublicKeyID, nil
	}
	return nil, &NotLoadedError{edge: "issuer_public_key_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubjectPublicKeys) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subjectpublickeys.FieldID:
			values[i] = new(sql.NullString)
		case subjectpublickeys.ForeignKeys[0]: // issuer_public_keys_subject_public_key
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubjectPublicKeys fields.
func (spk *SubjectPublicKeys) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subjectpublickeys.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				spk.ID = value.String
			}
		case subjectpublickeys.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field issuer_public_keys_subject_public_key", values[i])
			} else if value.Valid {
				spk.issuer_public_keys_subject_public_key = new(string)
				*spk.issuer_public_keys_subject_public_key = value.String
			}
		default:
			spk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubjectPublicKeys.
// This includes values selected through modifiers, order, etc.
func (spk *SubjectPublicKeys) Value(name string) (ent.Value, error) {
	return spk.selectValues.Get(name)
}

// QueryPublicKeyScope queries the "public_key_scope" edge of the SubjectPublicKeys entity.
func (spk *SubjectPublicKeys) QueryPublicKeyScope() *PublicKeyScopesQuery {
	return NewSubjectPublicKeysClient(spk.config).QueryPublicKeyScope(spk)
}

// QueryIssuerPublicKeyID queries the "issuer_public_key_id" edge of the SubjectPublicKeys entity.
func (spk *SubjectPublicKeys) QueryIssuerPublicKeyID() *IssuerPublicKeysQuery {
	return NewSubjectPublicKeysClient(spk.config).QueryIssuerPublicKeyID(spk)
}

// Update returns a builder for updating this SubjectPublicKeys.
// Note that you need to call SubjectPublicKeys.Unwrap() before calling this method if this SubjectPublicKeys
// was returned from a transaction, and the transaction was committed or rolled back.
func (spk *SubjectPublicKeys) Update() *SubjectPublicKeysUpdateOne {
	return NewSubjectPublicKeysClient(spk.config).UpdateOne(spk)
}

// Unwrap unwraps the SubjectPublicKeys entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spk *SubjectPublicKeys) Unwrap() *SubjectPublicKeys {
	_tx, ok := spk.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubjectPublicKeys is not a transactional entity")
	}
	spk.config.driver = _tx.drv
	return spk
}

// String implements the fmt.Stringer.
func (spk *SubjectPublicKeys) String() string {
	var builder strings.Builder
	builder.WriteString("SubjectPublicKeys(")
	builder.WriteString(fmt.Sprintf("id=%v", spk.ID))
	builder.WriteByte(')')
	return builder.String()
}

// SubjectPublicKeysSlice is a parsable slice of SubjectPublicKeys.
type SubjectPublicKeysSlice []*SubjectPublicKeys
