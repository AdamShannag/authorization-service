// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/idsessions"
	"authorization-service/ent/request"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// IDSessions is the model entity for the IDSessions schema.
type IDSessions struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IDSessionsQuery when eager-loading is set.
	Edges              IDSessionsEdges `json:"edges"`
	request_id_session *string
	selectValues       sql.SelectValues
}

// IDSessionsEdges holds the relations/edges for other nodes in the graph.
type IDSessionsEdges struct {
	// RequestID holds the value of the request_id edge.
	RequestID *Request `json:"request_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequestIDOrErr returns the RequestID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IDSessionsEdges) RequestIDOrErr() (*Request, error) {
	if e.loadedTypes[0] {
		if e.RequestID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: request.Label}
		}
		return e.RequestID, nil
	}
	return nil, &NotLoadedError{edge: "request_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IDSessions) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case idsessions.FieldID:
			values[i] = new(sql.NullString)
		case idsessions.ForeignKeys[0]: // request_id_session
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IDSessions fields.
func (is *IDSessions) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case idsessions.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				is.ID = value.String
			}
		case idsessions.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_id_session", values[i])
			} else if value.Valid {
				is.request_id_session = new(string)
				*is.request_id_session = value.String
			}
		default:
			is.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IDSessions.
// This includes values selected through modifiers, order, etc.
func (is *IDSessions) Value(name string) (ent.Value, error) {
	return is.selectValues.Get(name)
}

// QueryRequestID queries the "request_id" edge of the IDSessions entity.
func (is *IDSessions) QueryRequestID() *RequestQuery {
	return NewIDSessionsClient(is.config).QueryRequestID(is)
}

// Update returns a builder for updating this IDSessions.
// Note that you need to call IDSessions.Unwrap() before calling this method if this IDSessions
// was returned from a transaction, and the transaction was committed or rolled back.
func (is *IDSessions) Update() *IDSessionsUpdateOne {
	return NewIDSessionsClient(is.config).UpdateOne(is)
}

// Unwrap unwraps the IDSessions entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (is *IDSessions) Unwrap() *IDSessions {
	_tx, ok := is.config.driver.(*txDriver)
	if !ok {
		panic("ent: IDSessions is not a transactional entity")
	}
	is.config.driver = _tx.drv
	return is
}

// String implements the fmt.Stringer.
func (is *IDSessions) String() string {
	var builder strings.Builder
	builder.WriteString("IDSessions(")
	builder.WriteString(fmt.Sprintf("id=%v", is.ID))
	builder.WriteByte(')')
	return builder.String()
}

// IDSessionsSlice is a parsable slice of IDSessions.
type IDSessionsSlice []*IDSessions
