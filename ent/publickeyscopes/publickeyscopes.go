// Code generated by ent, DO NOT EDIT.

package publickeyscopes

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the publickeyscopes type in the database.
	Label = "public_key_scopes"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldJSONWebKey holds the string denoting the json_web_key field in the database.
	FieldJSONWebKey = "json_web_key"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// EdgeSubjectPublicKeyID holds the string denoting the subject_public_key_id edge name in mutations.
	EdgeSubjectPublicKeyID = "subject_public_key_id"
	// Table holds the table name of the publickeyscopes in the database.
	Table = "public_key_scopes"
	// SubjectPublicKeyIDTable is the table that holds the subject_public_key_id relation/edge.
	SubjectPublicKeyIDTable = "public_key_scopes"
	// SubjectPublicKeyIDInverseTable is the table name for the SubjectPublicKeys entity.
	// It exists in this package in order to avoid circular dependency with the "subjectpublickeys" package.
	SubjectPublicKeyIDInverseTable = "subject_public_keys"
	// SubjectPublicKeyIDColumn is the table column denoting the subject_public_key_id relation/edge.
	SubjectPublicKeyIDColumn = "subject_public_keys_public_key_scope"
)

// Columns holds all SQL columns for publickeyscopes fields.
var Columns = []string{
	FieldID,
	FieldJSONWebKey,
	FieldScopes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "public_key_scopes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"subject_public_keys_public_key_scope",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PublicKeyScopes queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySubjectPublicKeyIDField orders the results by subject_public_key_id field.
func BySubjectPublicKeyIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectPublicKeyIDStep(), sql.OrderByField(field, opts...))
	}
}
func newSubjectPublicKeyIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectPublicKeyIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SubjectPublicKeyIDTable, SubjectPublicKeyIDColumn),
	)
}
