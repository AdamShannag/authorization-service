// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/subjectpublickeys"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IssuerPublicKeysCreate is the builder for creating a IssuerPublicKeys entity.
type IssuerPublicKeysCreate struct {
	config
	mutation *IssuerPublicKeysMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (ipkc *IssuerPublicKeysCreate) SetID(s string) *IssuerPublicKeysCreate {
	ipkc.mutation.SetID(s)
	return ipkc
}

// SetSubjectPublicKeyID sets the "subject_public_key" edge to the SubjectPublicKeys entity by ID.
func (ipkc *IssuerPublicKeysCreate) SetSubjectPublicKeyID(id string) *IssuerPublicKeysCreate {
	ipkc.mutation.SetSubjectPublicKeyID(id)
	return ipkc
}

// SetNillableSubjectPublicKeyID sets the "subject_public_key" edge to the SubjectPublicKeys entity by ID if the given value is not nil.
func (ipkc *IssuerPublicKeysCreate) SetNillableSubjectPublicKeyID(id *string) *IssuerPublicKeysCreate {
	if id != nil {
		ipkc = ipkc.SetSubjectPublicKeyID(*id)
	}
	return ipkc
}

// SetSubjectPublicKey sets the "subject_public_key" edge to the SubjectPublicKeys entity.
func (ipkc *IssuerPublicKeysCreate) SetSubjectPublicKey(s *SubjectPublicKeys) *IssuerPublicKeysCreate {
	return ipkc.SetSubjectPublicKeyID(s.ID)
}

// Mutation returns the IssuerPublicKeysMutation object of the builder.
func (ipkc *IssuerPublicKeysCreate) Mutation() *IssuerPublicKeysMutation {
	return ipkc.mutation
}

// Save creates the IssuerPublicKeys in the database.
func (ipkc *IssuerPublicKeysCreate) Save(ctx context.Context) (*IssuerPublicKeys, error) {
	return withHooks(ctx, ipkc.sqlSave, ipkc.mutation, ipkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ipkc *IssuerPublicKeysCreate) SaveX(ctx context.Context) *IssuerPublicKeys {
	v, err := ipkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipkc *IssuerPublicKeysCreate) Exec(ctx context.Context) error {
	_, err := ipkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipkc *IssuerPublicKeysCreate) ExecX(ctx context.Context) {
	if err := ipkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ipkc *IssuerPublicKeysCreate) check() error {
	return nil
}

func (ipkc *IssuerPublicKeysCreate) sqlSave(ctx context.Context) (*IssuerPublicKeys, error) {
	if err := ipkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ipkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected IssuerPublicKeys.ID type: %T", _spec.ID.Value)
		}
	}
	ipkc.mutation.id = &_node.ID
	ipkc.mutation.done = true
	return _node, nil
}

func (ipkc *IssuerPublicKeysCreate) createSpec() (*IssuerPublicKeys, *sqlgraph.CreateSpec) {
	var (
		_node = &IssuerPublicKeys{config: ipkc.config}
		_spec = sqlgraph.NewCreateSpec(issuerpublickeys.Table, sqlgraph.NewFieldSpec(issuerpublickeys.FieldID, field.TypeString))
	)
	if id, ok := ipkc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := ipkc.mutation.SubjectPublicKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   issuerpublickeys.SubjectPublicKeyTable,
			Columns: []string{issuerpublickeys.SubjectPublicKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IssuerPublicKeysCreateBulk is the builder for creating many IssuerPublicKeys entities in bulk.
type IssuerPublicKeysCreateBulk struct {
	config
	builders []*IssuerPublicKeysCreate
}

// Save creates the IssuerPublicKeys entities in the database.
func (ipkcb *IssuerPublicKeysCreateBulk) Save(ctx context.Context) ([]*IssuerPublicKeys, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ipkcb.builders))
	nodes := make([]*IssuerPublicKeys, len(ipkcb.builders))
	mutators := make([]Mutator, len(ipkcb.builders))
	for i := range ipkcb.builders {
		func(i int, root context.Context) {
			builder := ipkcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssuerPublicKeysMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipkcb *IssuerPublicKeysCreateBulk) SaveX(ctx context.Context) []*IssuerPublicKeys {
	v, err := ipkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipkcb *IssuerPublicKeysCreateBulk) Exec(ctx context.Context) error {
	_, err := ipkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipkcb *IssuerPublicKeysCreateBulk) ExecX(ctx context.Context) {
	if err := ipkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
