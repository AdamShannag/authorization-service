// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/blacklistedjtis"
	"authorization-service/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlacklistedJTIsUpdate is the builder for updating BlacklistedJTIs entities.
type BlacklistedJTIsUpdate struct {
	config
	hooks    []Hook
	mutation *BlacklistedJTIsMutation
}

// Where appends a list predicates to the BlacklistedJTIsUpdate builder.
func (bjiu *BlacklistedJTIsUpdate) Where(ps ...predicate.BlacklistedJTIs) *BlacklistedJTIsUpdate {
	bjiu.mutation.Where(ps...)
	return bjiu
}

// SetExpiry sets the "expiry" field.
func (bjiu *BlacklistedJTIsUpdate) SetExpiry(t time.Time) *BlacklistedJTIsUpdate {
	bjiu.mutation.SetExpiry(t)
	return bjiu
}

// Mutation returns the BlacklistedJTIsMutation object of the builder.
func (bjiu *BlacklistedJTIsUpdate) Mutation() *BlacklistedJTIsMutation {
	return bjiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bjiu *BlacklistedJTIsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bjiu.sqlSave, bjiu.mutation, bjiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bjiu *BlacklistedJTIsUpdate) SaveX(ctx context.Context) int {
	affected, err := bjiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bjiu *BlacklistedJTIsUpdate) Exec(ctx context.Context) error {
	_, err := bjiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bjiu *BlacklistedJTIsUpdate) ExecX(ctx context.Context) {
	if err := bjiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bjiu *BlacklistedJTIsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(blacklistedjtis.Table, blacklistedjtis.Columns, sqlgraph.NewFieldSpec(blacklistedjtis.FieldID, field.TypeString))
	if ps := bjiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bjiu.mutation.Expiry(); ok {
		_spec.SetField(blacklistedjtis.FieldExpiry, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bjiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blacklistedjtis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bjiu.mutation.done = true
	return n, nil
}

// BlacklistedJTIsUpdateOne is the builder for updating a single BlacklistedJTIs entity.
type BlacklistedJTIsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BlacklistedJTIsMutation
}

// SetExpiry sets the "expiry" field.
func (bjiuo *BlacklistedJTIsUpdateOne) SetExpiry(t time.Time) *BlacklistedJTIsUpdateOne {
	bjiuo.mutation.SetExpiry(t)
	return bjiuo
}

// Mutation returns the BlacklistedJTIsMutation object of the builder.
func (bjiuo *BlacklistedJTIsUpdateOne) Mutation() *BlacklistedJTIsMutation {
	return bjiuo.mutation
}

// Where appends a list predicates to the BlacklistedJTIsUpdate builder.
func (bjiuo *BlacklistedJTIsUpdateOne) Where(ps ...predicate.BlacklistedJTIs) *BlacklistedJTIsUpdateOne {
	bjiuo.mutation.Where(ps...)
	return bjiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bjiuo *BlacklistedJTIsUpdateOne) Select(field string, fields ...string) *BlacklistedJTIsUpdateOne {
	bjiuo.fields = append([]string{field}, fields...)
	return bjiuo
}

// Save executes the query and returns the updated BlacklistedJTIs entity.
func (bjiuo *BlacklistedJTIsUpdateOne) Save(ctx context.Context) (*BlacklistedJTIs, error) {
	return withHooks(ctx, bjiuo.sqlSave, bjiuo.mutation, bjiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bjiuo *BlacklistedJTIsUpdateOne) SaveX(ctx context.Context) *BlacklistedJTIs {
	node, err := bjiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bjiuo *BlacklistedJTIsUpdateOne) Exec(ctx context.Context) error {
	_, err := bjiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bjiuo *BlacklistedJTIsUpdateOne) ExecX(ctx context.Context) {
	if err := bjiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bjiuo *BlacklistedJTIsUpdateOne) sqlSave(ctx context.Context) (_node *BlacklistedJTIs, err error) {
	_spec := sqlgraph.NewUpdateSpec(blacklistedjtis.Table, blacklistedjtis.Columns, sqlgraph.NewFieldSpec(blacklistedjtis.FieldID, field.TypeString))
	id, ok := bjiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BlacklistedJTIs.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bjiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, blacklistedjtis.FieldID)
		for _, f := range fields {
			if !blacklistedjtis.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != blacklistedjtis.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bjiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bjiuo.mutation.Expiry(); ok {
		_spec.SetField(blacklistedjtis.FieldExpiry, field.TypeTime, value)
	}
	_node = &BlacklistedJTIs{config: bjiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bjiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blacklistedjtis.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bjiuo.mutation.done = true
	return _node, nil
}
