// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/clients"
	"authorization-service/ent/session"
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"golang.org/x/text/language"
)

// AuthorizeCodesCreate is the builder for creating a AuthorizeCodes entity.
type AuthorizeCodesCreate struct {
	config
	mutation *AuthorizeCodesMutation
	hooks    []Hook
}

// SetRequestID sets the "request_id" field.
func (acc *AuthorizeCodesCreate) SetRequestID(s string) *AuthorizeCodesCreate {
	acc.mutation.SetRequestID(s)
	return acc
}

// SetRequestedAt sets the "requestedAt" field.
func (acc *AuthorizeCodesCreate) SetRequestedAt(t time.Time) *AuthorizeCodesCreate {
	acc.mutation.SetRequestedAt(t)
	return acc
}

// SetScopes sets the "scopes" field.
func (acc *AuthorizeCodesCreate) SetScopes(s []string) *AuthorizeCodesCreate {
	acc.mutation.SetScopes(s)
	return acc
}

// SetGrantedScopes sets the "granted_scopes" field.
func (acc *AuthorizeCodesCreate) SetGrantedScopes(s []string) *AuthorizeCodesCreate {
	acc.mutation.SetGrantedScopes(s)
	return acc
}

// SetRequestedAudience sets the "requested_audience" field.
func (acc *AuthorizeCodesCreate) SetRequestedAudience(s []string) *AuthorizeCodesCreate {
	acc.mutation.SetRequestedAudience(s)
	return acc
}

// SetGrantedAudience sets the "granted_audience" field.
func (acc *AuthorizeCodesCreate) SetGrantedAudience(s []string) *AuthorizeCodesCreate {
	acc.mutation.SetGrantedAudience(s)
	return acc
}

// SetForm sets the "form" field.
func (acc *AuthorizeCodesCreate) SetForm(u url.Values) *AuthorizeCodesCreate {
	acc.mutation.SetForm(u)
	return acc
}

// SetLang sets the "lang" field.
func (acc *AuthorizeCodesCreate) SetLang(l language.Tag) *AuthorizeCodesCreate {
	acc.mutation.SetLang(l)
	return acc
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (acc *AuthorizeCodesCreate) SetNillableLang(l *language.Tag) *AuthorizeCodesCreate {
	if l != nil {
		acc.SetLang(*l)
	}
	return acc
}

// SetActive sets the "active" field.
func (acc *AuthorizeCodesCreate) SetActive(b bool) *AuthorizeCodesCreate {
	acc.mutation.SetActive(b)
	return acc
}

// SetID sets the "id" field.
func (acc *AuthorizeCodesCreate) SetID(s string) *AuthorizeCodesCreate {
	acc.mutation.SetID(s)
	return acc
}

// SetClientIDID sets the "client_id" edge to the Clients entity by ID.
func (acc *AuthorizeCodesCreate) SetClientIDID(id string) *AuthorizeCodesCreate {
	acc.mutation.SetClientIDID(id)
	return acc
}

// SetNillableClientIDID sets the "client_id" edge to the Clients entity by ID if the given value is not nil.
func (acc *AuthorizeCodesCreate) SetNillableClientIDID(id *string) *AuthorizeCodesCreate {
	if id != nil {
		acc = acc.SetClientIDID(*id)
	}
	return acc
}

// SetClientID sets the "client_id" edge to the Clients entity.
func (acc *AuthorizeCodesCreate) SetClientID(c *Clients) *AuthorizeCodesCreate {
	return acc.SetClientIDID(c.ID)
}

// SetSessionIDID sets the "session_id" edge to the Session entity by ID.
func (acc *AuthorizeCodesCreate) SetSessionIDID(id string) *AuthorizeCodesCreate {
	acc.mutation.SetSessionIDID(id)
	return acc
}

// SetNillableSessionIDID sets the "session_id" edge to the Session entity by ID if the given value is not nil.
func (acc *AuthorizeCodesCreate) SetNillableSessionIDID(id *string) *AuthorizeCodesCreate {
	if id != nil {
		acc = acc.SetSessionIDID(*id)
	}
	return acc
}

// SetSessionID sets the "session_id" edge to the Session entity.
func (acc *AuthorizeCodesCreate) SetSessionID(s *Session) *AuthorizeCodesCreate {
	return acc.SetSessionIDID(s.ID)
}

// Mutation returns the AuthorizeCodesMutation object of the builder.
func (acc *AuthorizeCodesCreate) Mutation() *AuthorizeCodesMutation {
	return acc.mutation
}

// Save creates the AuthorizeCodes in the database.
func (acc *AuthorizeCodesCreate) Save(ctx context.Context) (*AuthorizeCodes, error) {
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AuthorizeCodesCreate) SaveX(ctx context.Context) *AuthorizeCodes {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AuthorizeCodesCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AuthorizeCodesCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AuthorizeCodesCreate) check() error {
	if _, ok := acc.mutation.RequestID(); !ok {
		return &ValidationError{Name: "request_id", err: errors.New(`ent: missing required field "AuthorizeCodes.request_id"`)}
	}
	if _, ok := acc.mutation.RequestedAt(); !ok {
		return &ValidationError{Name: "requestedAt", err: errors.New(`ent: missing required field "AuthorizeCodes.requestedAt"`)}
	}
	if _, ok := acc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "AuthorizeCodes.scopes"`)}
	}
	if _, ok := acc.mutation.GrantedScopes(); !ok {
		return &ValidationError{Name: "granted_scopes", err: errors.New(`ent: missing required field "AuthorizeCodes.granted_scopes"`)}
	}
	if _, ok := acc.mutation.RequestedAudience(); !ok {
		return &ValidationError{Name: "requested_audience", err: errors.New(`ent: missing required field "AuthorizeCodes.requested_audience"`)}
	}
	if _, ok := acc.mutation.GrantedAudience(); !ok {
		return &ValidationError{Name: "granted_audience", err: errors.New(`ent: missing required field "AuthorizeCodes.granted_audience"`)}
	}
	if _, ok := acc.mutation.Form(); !ok {
		return &ValidationError{Name: "form", err: errors.New(`ent: missing required field "AuthorizeCodes.form"`)}
	}
	if _, ok := acc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "AuthorizeCodes.active"`)}
	}
	return nil
}

func (acc *AuthorizeCodesCreate) sqlSave(ctx context.Context) (*AuthorizeCodes, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthorizeCodes.ID type: %T", _spec.ID.Value)
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AuthorizeCodesCreate) createSpec() (*AuthorizeCodes, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthorizeCodes{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(authorizecodes.Table, sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.RequestID(); ok {
		_spec.SetField(authorizecodes.FieldRequestID, field.TypeString, value)
		_node.RequestID = value
	}
	if value, ok := acc.mutation.RequestedAt(); ok {
		_spec.SetField(authorizecodes.FieldRequestedAt, field.TypeTime, value)
		_node.RequestedAt = value
	}
	if value, ok := acc.mutation.Scopes(); ok {
		_spec.SetField(authorizecodes.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := acc.mutation.GrantedScopes(); ok {
		_spec.SetField(authorizecodes.FieldGrantedScopes, field.TypeJSON, value)
		_node.GrantedScopes = value
	}
	if value, ok := acc.mutation.RequestedAudience(); ok {
		_spec.SetField(authorizecodes.FieldRequestedAudience, field.TypeJSON, value)
		_node.RequestedAudience = value
	}
	if value, ok := acc.mutation.GrantedAudience(); ok {
		_spec.SetField(authorizecodes.FieldGrantedAudience, field.TypeJSON, value)
		_node.GrantedAudience = value
	}
	if value, ok := acc.mutation.Form(); ok {
		_spec.SetField(authorizecodes.FieldForm, field.TypeJSON, value)
		_node.Form = value
	}
	if value, ok := acc.mutation.Lang(); ok {
		_spec.SetField(authorizecodes.FieldLang, field.TypeJSON, value)
		_node.Lang = value
	}
	if value, ok := acc.mutation.Active(); ok {
		_spec.SetField(authorizecodes.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if nodes := acc.mutation.ClientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authorizecodes.ClientIDTable,
			Columns: []string{authorizecodes.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clients_authorize_code = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := acc.mutation.SessionIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   authorizecodes.SessionIDTable,
			Columns: []string{authorizecodes.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.session_authorize_code = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthorizeCodesCreateBulk is the builder for creating many AuthorizeCodes entities in bulk.
type AuthorizeCodesCreateBulk struct {
	config
	builders []*AuthorizeCodesCreate
}

// Save creates the AuthorizeCodes entities in the database.
func (accb *AuthorizeCodesCreateBulk) Save(ctx context.Context) ([]*AuthorizeCodes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AuthorizeCodes, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorizeCodesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AuthorizeCodesCreateBulk) SaveX(ctx context.Context) []*AuthorizeCodes {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AuthorizeCodesCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AuthorizeCodesCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
