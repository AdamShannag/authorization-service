// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/request"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AuthorizeCodesCreate is the builder for creating a AuthorizeCodes entity.
type AuthorizeCodesCreate struct {
	config
	mutation *AuthorizeCodesMutation
	hooks    []Hook
}

// SetActive sets the "active" field.
func (acc *AuthorizeCodesCreate) SetActive(b bool) *AuthorizeCodesCreate {
	acc.mutation.SetActive(b)
	return acc
}

// SetID sets the "id" field.
func (acc *AuthorizeCodesCreate) SetID(s string) *AuthorizeCodesCreate {
	acc.mutation.SetID(s)
	return acc
}

// SetRequestIDID sets the "request_id" edge to the Request entity by ID.
func (acc *AuthorizeCodesCreate) SetRequestIDID(id string) *AuthorizeCodesCreate {
	acc.mutation.SetRequestIDID(id)
	return acc
}

// SetNillableRequestIDID sets the "request_id" edge to the Request entity by ID if the given value is not nil.
func (acc *AuthorizeCodesCreate) SetNillableRequestIDID(id *string) *AuthorizeCodesCreate {
	if id != nil {
		acc = acc.SetRequestIDID(*id)
	}
	return acc
}

// SetRequestID sets the "request_id" edge to the Request entity.
func (acc *AuthorizeCodesCreate) SetRequestID(r *Request) *AuthorizeCodesCreate {
	return acc.SetRequestIDID(r.ID)
}

// Mutation returns the AuthorizeCodesMutation object of the builder.
func (acc *AuthorizeCodesCreate) Mutation() *AuthorizeCodesMutation {
	return acc.mutation
}

// Save creates the AuthorizeCodes in the database.
func (acc *AuthorizeCodesCreate) Save(ctx context.Context) (*AuthorizeCodes, error) {
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AuthorizeCodesCreate) SaveX(ctx context.Context) *AuthorizeCodes {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AuthorizeCodesCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AuthorizeCodesCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AuthorizeCodesCreate) check() error {
	if _, ok := acc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`ent: missing required field "AuthorizeCodes.active"`)}
	}
	return nil
}

func (acc *AuthorizeCodesCreate) sqlSave(ctx context.Context) (*AuthorizeCodes, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AuthorizeCodes.ID type: %T", _spec.ID.Value)
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AuthorizeCodesCreate) createSpec() (*AuthorizeCodes, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthorizeCodes{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(authorizecodes.Table, sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.Active(); ok {
		_spec.SetField(authorizecodes.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if nodes := acc.mutation.RequestIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   authorizecodes.RequestIDTable,
			Columns: []string{authorizecodes.RequestIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(request.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.request_authorize_code = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AuthorizeCodesCreateBulk is the builder for creating many AuthorizeCodes entities in bulk.
type AuthorizeCodesCreateBulk struct {
	config
	builders []*AuthorizeCodesCreate
}

// Save creates the AuthorizeCodes entities in the database.
func (accb *AuthorizeCodesCreateBulk) Save(ctx context.Context) ([]*AuthorizeCodes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AuthorizeCodes, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthorizeCodesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AuthorizeCodesCreateBulk) SaveX(ctx context.Context) []*AuthorizeCodes {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AuthorizeCodesCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AuthorizeCodesCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
