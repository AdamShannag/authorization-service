// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/predicate"
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/subjectpublickeys"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	jose "gopkg.in/square/go-jose.v2"
)

// PublicKeyScopesUpdate is the builder for updating PublicKeyScopes entities.
type PublicKeyScopesUpdate struct {
	config
	hooks    []Hook
	mutation *PublicKeyScopesMutation
}

// Where appends a list predicates to the PublicKeyScopesUpdate builder.
func (pksu *PublicKeyScopesUpdate) Where(ps ...predicate.PublicKeyScopes) *PublicKeyScopesUpdate {
	pksu.mutation.Where(ps...)
	return pksu
}

// SetJSONWebKey sets the "json_web_key" field.
func (pksu *PublicKeyScopesUpdate) SetJSONWebKey(jwk jose.JSONWebKey) *PublicKeyScopesUpdate {
	pksu.mutation.SetJSONWebKey(jwk)
	return pksu
}

// SetScopes sets the "scopes" field.
func (pksu *PublicKeyScopesUpdate) SetScopes(s []string) *PublicKeyScopesUpdate {
	pksu.mutation.SetScopes(s)
	return pksu
}

// AppendScopes appends s to the "scopes" field.
func (pksu *PublicKeyScopesUpdate) AppendScopes(s []string) *PublicKeyScopesUpdate {
	pksu.mutation.AppendScopes(s)
	return pksu
}

// SetSubjectPublicKeyIDID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity by ID.
func (pksu *PublicKeyScopesUpdate) SetSubjectPublicKeyIDID(id string) *PublicKeyScopesUpdate {
	pksu.mutation.SetSubjectPublicKeyIDID(id)
	return pksu
}

// SetNillableSubjectPublicKeyIDID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity by ID if the given value is not nil.
func (pksu *PublicKeyScopesUpdate) SetNillableSubjectPublicKeyIDID(id *string) *PublicKeyScopesUpdate {
	if id != nil {
		pksu = pksu.SetSubjectPublicKeyIDID(*id)
	}
	return pksu
}

// SetSubjectPublicKeyID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity.
func (pksu *PublicKeyScopesUpdate) SetSubjectPublicKeyID(s *SubjectPublicKeys) *PublicKeyScopesUpdate {
	return pksu.SetSubjectPublicKeyIDID(s.ID)
}

// Mutation returns the PublicKeyScopesMutation object of the builder.
func (pksu *PublicKeyScopesUpdate) Mutation() *PublicKeyScopesMutation {
	return pksu.mutation
}

// ClearSubjectPublicKeyID clears the "subject_public_key_id" edge to the SubjectPublicKeys entity.
func (pksu *PublicKeyScopesUpdate) ClearSubjectPublicKeyID() *PublicKeyScopesUpdate {
	pksu.mutation.ClearSubjectPublicKeyID()
	return pksu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pksu *PublicKeyScopesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pksu.sqlSave, pksu.mutation, pksu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pksu *PublicKeyScopesUpdate) SaveX(ctx context.Context) int {
	affected, err := pksu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pksu *PublicKeyScopesUpdate) Exec(ctx context.Context) error {
	_, err := pksu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pksu *PublicKeyScopesUpdate) ExecX(ctx context.Context) {
	if err := pksu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pksu *PublicKeyScopesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(publickeyscopes.Table, publickeyscopes.Columns, sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString))
	if ps := pksu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pksu.mutation.JSONWebKey(); ok {
		_spec.SetField(publickeyscopes.FieldJSONWebKey, field.TypeJSON, value)
	}
	if value, ok := pksu.mutation.Scopes(); ok {
		_spec.SetField(publickeyscopes.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := pksu.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, publickeyscopes.FieldScopes, value)
		})
	}
	if pksu.mutation.SubjectPublicKeyIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   publickeyscopes.SubjectPublicKeyIDTable,
			Columns: []string{publickeyscopes.SubjectPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pksu.mutation.SubjectPublicKeyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   publickeyscopes.SubjectPublicKeyIDTable,
			Columns: []string{publickeyscopes.SubjectPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pksu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publickeyscopes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pksu.mutation.done = true
	return n, nil
}

// PublicKeyScopesUpdateOne is the builder for updating a single PublicKeyScopes entity.
type PublicKeyScopesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PublicKeyScopesMutation
}

// SetJSONWebKey sets the "json_web_key" field.
func (pksuo *PublicKeyScopesUpdateOne) SetJSONWebKey(jwk jose.JSONWebKey) *PublicKeyScopesUpdateOne {
	pksuo.mutation.SetJSONWebKey(jwk)
	return pksuo
}

// SetScopes sets the "scopes" field.
func (pksuo *PublicKeyScopesUpdateOne) SetScopes(s []string) *PublicKeyScopesUpdateOne {
	pksuo.mutation.SetScopes(s)
	return pksuo
}

// AppendScopes appends s to the "scopes" field.
func (pksuo *PublicKeyScopesUpdateOne) AppendScopes(s []string) *PublicKeyScopesUpdateOne {
	pksuo.mutation.AppendScopes(s)
	return pksuo
}

// SetSubjectPublicKeyIDID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity by ID.
func (pksuo *PublicKeyScopesUpdateOne) SetSubjectPublicKeyIDID(id string) *PublicKeyScopesUpdateOne {
	pksuo.mutation.SetSubjectPublicKeyIDID(id)
	return pksuo
}

// SetNillableSubjectPublicKeyIDID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity by ID if the given value is not nil.
func (pksuo *PublicKeyScopesUpdateOne) SetNillableSubjectPublicKeyIDID(id *string) *PublicKeyScopesUpdateOne {
	if id != nil {
		pksuo = pksuo.SetSubjectPublicKeyIDID(*id)
	}
	return pksuo
}

// SetSubjectPublicKeyID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity.
func (pksuo *PublicKeyScopesUpdateOne) SetSubjectPublicKeyID(s *SubjectPublicKeys) *PublicKeyScopesUpdateOne {
	return pksuo.SetSubjectPublicKeyIDID(s.ID)
}

// Mutation returns the PublicKeyScopesMutation object of the builder.
func (pksuo *PublicKeyScopesUpdateOne) Mutation() *PublicKeyScopesMutation {
	return pksuo.mutation
}

// ClearSubjectPublicKeyID clears the "subject_public_key_id" edge to the SubjectPublicKeys entity.
func (pksuo *PublicKeyScopesUpdateOne) ClearSubjectPublicKeyID() *PublicKeyScopesUpdateOne {
	pksuo.mutation.ClearSubjectPublicKeyID()
	return pksuo
}

// Where appends a list predicates to the PublicKeyScopesUpdate builder.
func (pksuo *PublicKeyScopesUpdateOne) Where(ps ...predicate.PublicKeyScopes) *PublicKeyScopesUpdateOne {
	pksuo.mutation.Where(ps...)
	return pksuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pksuo *PublicKeyScopesUpdateOne) Select(field string, fields ...string) *PublicKeyScopesUpdateOne {
	pksuo.fields = append([]string{field}, fields...)
	return pksuo
}

// Save executes the query and returns the updated PublicKeyScopes entity.
func (pksuo *PublicKeyScopesUpdateOne) Save(ctx context.Context) (*PublicKeyScopes, error) {
	return withHooks(ctx, pksuo.sqlSave, pksuo.mutation, pksuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pksuo *PublicKeyScopesUpdateOne) SaveX(ctx context.Context) *PublicKeyScopes {
	node, err := pksuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pksuo *PublicKeyScopesUpdateOne) Exec(ctx context.Context) error {
	_, err := pksuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pksuo *PublicKeyScopesUpdateOne) ExecX(ctx context.Context) {
	if err := pksuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pksuo *PublicKeyScopesUpdateOne) sqlSave(ctx context.Context) (_node *PublicKeyScopes, err error) {
	_spec := sqlgraph.NewUpdateSpec(publickeyscopes.Table, publickeyscopes.Columns, sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString))
	id, ok := pksuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PublicKeyScopes.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pksuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, publickeyscopes.FieldID)
		for _, f := range fields {
			if !publickeyscopes.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != publickeyscopes.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pksuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pksuo.mutation.JSONWebKey(); ok {
		_spec.SetField(publickeyscopes.FieldJSONWebKey, field.TypeJSON, value)
	}
	if value, ok := pksuo.mutation.Scopes(); ok {
		_spec.SetField(publickeyscopes.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := pksuo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, publickeyscopes.FieldScopes, value)
		})
	}
	if pksuo.mutation.SubjectPublicKeyIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   publickeyscopes.SubjectPublicKeyIDTable,
			Columns: []string{publickeyscopes.SubjectPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pksuo.mutation.SubjectPublicKeyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   publickeyscopes.SubjectPublicKeyIDTable,
			Columns: []string{publickeyscopes.SubjectPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PublicKeyScopes{config: pksuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pksuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{publickeyscopes.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pksuo.mutation.done = true
	return _node, nil
}
