// Code generated by ent, DO NOT EDIT.

package request

import (
	"authorization-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Request {
	return predicate.Request(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Request {
	return predicate.Request(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Request {
	return predicate.Request(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Request {
	return predicate.Request(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Request {
	return predicate.Request(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Request {
	return predicate.Request(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Request {
	return predicate.Request(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Request {
	return predicate.Request(sql.FieldContainsFold(FieldID, id))
}

// RequestedAt applies equality check predicate on the "requestedAt" field. It's identical to RequestedAtEQ.
func RequestedAt(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldRequestedAt, v))
}

// RequestedAtEQ applies the EQ predicate on the "requestedAt" field.
func RequestedAtEQ(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldEQ(FieldRequestedAt, v))
}

// RequestedAtNEQ applies the NEQ predicate on the "requestedAt" field.
func RequestedAtNEQ(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldNEQ(FieldRequestedAt, v))
}

// RequestedAtIn applies the In predicate on the "requestedAt" field.
func RequestedAtIn(vs ...time.Time) predicate.Request {
	return predicate.Request(sql.FieldIn(FieldRequestedAt, vs...))
}

// RequestedAtNotIn applies the NotIn predicate on the "requestedAt" field.
func RequestedAtNotIn(vs ...time.Time) predicate.Request {
	return predicate.Request(sql.FieldNotIn(FieldRequestedAt, vs...))
}

// RequestedAtGT applies the GT predicate on the "requestedAt" field.
func RequestedAtGT(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldGT(FieldRequestedAt, v))
}

// RequestedAtGTE applies the GTE predicate on the "requestedAt" field.
func RequestedAtGTE(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldGTE(FieldRequestedAt, v))
}

// RequestedAtLT applies the LT predicate on the "requestedAt" field.
func RequestedAtLT(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldLT(FieldRequestedAt, v))
}

// RequestedAtLTE applies the LTE predicate on the "requestedAt" field.
func RequestedAtLTE(v time.Time) predicate.Request {
	return predicate.Request(sql.FieldLTE(FieldRequestedAt, v))
}

// LangIsNil applies the IsNil predicate on the "lang" field.
func LangIsNil() predicate.Request {
	return predicate.Request(sql.FieldIsNull(FieldLang))
}

// LangNotNil applies the NotNil predicate on the "lang" field.
func LangNotNil() predicate.Request {
	return predicate.Request(sql.FieldNotNull(FieldLang))
}

// HasClientID applies the HasEdge predicate on the "client_id" edge.
func HasClientID() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ClientIDTable, ClientIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasClientIDWith applies the HasEdge predicate on the "client_id" edge with a given conditions (other predicates).
func HasClientIDWith(preds ...predicate.Clients) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newClientIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessionID applies the HasEdge predicate on the "session_id" edge.
func HasSessionID() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SessionIDTable, SessionIDColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionIDWith applies the HasEdge predicate on the "session_id" edge with a given conditions (other predicates).
func HasSessionIDWith(preds ...predicate.Session) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newSessionIDStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRefreshToken applies the HasEdge predicate on the "refresh_token" edge.
func HasRefreshToken() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, RefreshTokenTable, RefreshTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRefreshTokenWith applies the HasEdge predicate on the "refresh_token" edge with a given conditions (other predicates).
func HasRefreshTokenWith(preds ...predicate.RefreshTokens) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newRefreshTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAuthorizeCode applies the HasEdge predicate on the "authorize_code" edge.
func HasAuthorizeCode() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AuthorizeCodeTable, AuthorizeCodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorizeCodeWith applies the HasEdge predicate on the "authorize_code" edge with a given conditions (other predicates).
func HasAuthorizeCodeWith(preds ...predicate.AuthorizeCodes) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newAuthorizeCodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAccessToken applies the HasEdge predicate on the "access_token" edge.
func HasAccessToken() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AccessTokenTable, AccessTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAccessTokenWith applies the HasEdge predicate on the "access_token" edge with a given conditions (other predicates).
func HasAccessTokenWith(preds ...predicate.AccessTokens) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newAccessTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIDSession applies the HasEdge predicate on the "id_session" edge.
func HasIDSession() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, IDSessionTable, IDSessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIDSessionWith applies the HasEdge predicate on the "id_session" edge with a given conditions (other predicates).
func HasIDSessionWith(preds ...predicate.IDSessions) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newIDSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPkce applies the HasEdge predicate on the "pkce" edge.
func HasPkce() predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, PkceTable, PkceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPkceWith applies the HasEdge predicate on the "pkce" edge with a given conditions (other predicates).
func HasPkceWith(preds ...predicate.PKCES) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		step := newPkceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Request) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Request) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Request) predicate.Request {
	return predicate.Request(func(s *sql.Selector) {
		p(s.Not())
	})
}
