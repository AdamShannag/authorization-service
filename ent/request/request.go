// Code generated by ent, DO NOT EDIT.

package request

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the request type in the database.
	Label = "request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRequestedAt holds the string denoting the requestedat field in the database.
	FieldRequestedAt = "requested_at"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldGrantedScopes holds the string denoting the granted_scopes field in the database.
	FieldGrantedScopes = "granted_scopes"
	// FieldRequestedAudience holds the string denoting the requested_audience field in the database.
	FieldRequestedAudience = "requested_audience"
	// FieldGrantedAudience holds the string denoting the granted_audience field in the database.
	FieldGrantedAudience = "granted_audience"
	// FieldForm holds the string denoting the form field in the database.
	FieldForm = "form"
	// FieldLang holds the string denoting the lang field in the database.
	FieldLang = "lang"
	// EdgeClientID holds the string denoting the client_id edge name in mutations.
	EdgeClientID = "client_id"
	// EdgeSessionID holds the string denoting the session_id edge name in mutations.
	EdgeSessionID = "session_id"
	// EdgeRefreshToken holds the string denoting the refresh_token edge name in mutations.
	EdgeRefreshToken = "refresh_token"
	// EdgeAuthorizeCode holds the string denoting the authorize_code edge name in mutations.
	EdgeAuthorizeCode = "authorize_code"
	// EdgeAccessToken holds the string denoting the access_token edge name in mutations.
	EdgeAccessToken = "access_token"
	// EdgeIDSession holds the string denoting the id_session edge name in mutations.
	EdgeIDSession = "id_session"
	// EdgePkce holds the string denoting the pkce edge name in mutations.
	EdgePkce = "pkce"
	// Table holds the table name of the request in the database.
	Table = "requests"
	// ClientIDTable is the table that holds the client_id relation/edge.
	ClientIDTable = "requests"
	// ClientIDInverseTable is the table name for the Clients entity.
	// It exists in this package in order to avoid circular dependency with the "clients" package.
	ClientIDInverseTable = "clients"
	// ClientIDColumn is the table column denoting the client_id relation/edge.
	ClientIDColumn = "clients_requests"
	// SessionIDTable is the table that holds the session_id relation/edge.
	SessionIDTable = "requests"
	// SessionIDInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionIDInverseTable = "sessions"
	// SessionIDColumn is the table column denoting the session_id relation/edge.
	SessionIDColumn = "session_requests"
	// RefreshTokenTable is the table that holds the refresh_token relation/edge.
	RefreshTokenTable = "refresh_tokens"
	// RefreshTokenInverseTable is the table name for the RefreshTokens entity.
	// It exists in this package in order to avoid circular dependency with the "refreshtokens" package.
	RefreshTokenInverseTable = "refresh_tokens"
	// RefreshTokenColumn is the table column denoting the refresh_token relation/edge.
	RefreshTokenColumn = "request_refresh_token"
	// AuthorizeCodeTable is the table that holds the authorize_code relation/edge.
	AuthorizeCodeTable = "authorize_codes"
	// AuthorizeCodeInverseTable is the table name for the AuthorizeCodes entity.
	// It exists in this package in order to avoid circular dependency with the "authorizecodes" package.
	AuthorizeCodeInverseTable = "authorize_codes"
	// AuthorizeCodeColumn is the table column denoting the authorize_code relation/edge.
	AuthorizeCodeColumn = "request_authorize_code"
	// AccessTokenTable is the table that holds the access_token relation/edge.
	AccessTokenTable = "access_tokens"
	// AccessTokenInverseTable is the table name for the AccessTokens entity.
	// It exists in this package in order to avoid circular dependency with the "accesstokens" package.
	AccessTokenInverseTable = "access_tokens"
	// AccessTokenColumn is the table column denoting the access_token relation/edge.
	AccessTokenColumn = "request_access_token"
	// IDSessionTable is the table that holds the id_session relation/edge.
	IDSessionTable = "id_sessions"
	// IDSessionInverseTable is the table name for the IDSessions entity.
	// It exists in this package in order to avoid circular dependency with the "idsessions" package.
	IDSessionInverseTable = "id_sessions"
	// IDSessionColumn is the table column denoting the id_session relation/edge.
	IDSessionColumn = "request_id_session"
	// PkceTable is the table that holds the pkce relation/edge.
	PkceTable = "pkce_ss"
	// PkceInverseTable is the table name for the PKCES entity.
	// It exists in this package in order to avoid circular dependency with the "pkces" package.
	PkceInverseTable = "pkce_ss"
	// PkceColumn is the table column denoting the pkce relation/edge.
	PkceColumn = "request_pkce"
)

// Columns holds all SQL columns for request fields.
var Columns = []string{
	FieldID,
	FieldRequestedAt,
	FieldScopes,
	FieldGrantedScopes,
	FieldRequestedAudience,
	FieldGrantedAudience,
	FieldForm,
	FieldLang,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"clients_requests",
	"session_requests",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Request queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequestedAt orders the results by the requestedAt field.
func ByRequestedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestedAt, opts...).ToFunc()
}

// ByClientIDField orders the results by client_id field.
func ByClientIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientIDStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionIDField orders the results by session_id field.
func BySessionIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionIDStep(), sql.OrderByField(field, opts...))
	}
}

// ByRefreshTokenField orders the results by refresh_token field.
func ByRefreshTokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRefreshTokenStep(), sql.OrderByField(field, opts...))
	}
}

// ByAuthorizeCodeField orders the results by authorize_code field.
func ByAuthorizeCodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorizeCodeStep(), sql.OrderByField(field, opts...))
	}
}

// ByAccessTokenField orders the results by access_token field.
func ByAccessTokenField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccessTokenStep(), sql.OrderByField(field, opts...))
	}
}

// ByIDSessionField orders the results by id_session field.
func ByIDSessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIDSessionStep(), sql.OrderByField(field, opts...))
	}
}

// ByPkceField orders the results by pkce field.
func ByPkceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPkceStep(), sql.OrderByField(field, opts...))
	}
}
func newClientIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClientIDTable, ClientIDColumn),
	)
}
func newSessionIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SessionIDTable, SessionIDColumn),
	)
}
func newRefreshTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RefreshTokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, RefreshTokenTable, RefreshTokenColumn),
	)
}
func newAuthorizeCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorizeCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AuthorizeCodeTable, AuthorizeCodeColumn),
	)
}
func newAccessTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccessTokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, AccessTokenTable, AccessTokenColumn),
	)
}
func newIDSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IDSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, IDSessionTable, IDSessionColumn),
	)
}
func newPkceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PkceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PkceTable, PkceColumn),
	)
}
