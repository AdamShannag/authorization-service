// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/clients"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Clients is the model entity for the Clients schema.
type Clients struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret []byte `json:"client_secret,omitempty"`
	// RotatedSecrets holds the value of the "rotated_secrets" field.
	RotatedSecrets [][]uint8 `json:"rotated_secrets,omitempty"`
	// RedirectUris holds the value of the "redirect_uris" field.
	RedirectUris []string `json:"redirect_uris,omitempty"`
	// GrantTypes holds the value of the "grant_types" field.
	GrantTypes []string `json:"grant_types,omitempty"`
	// ResponseTypes holds the value of the "response_types" field.
	ResponseTypes []string `json:"response_types,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// Audience holds the value of the "audience" field.
	Audience []string `json:"audience,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClientsQuery when eager-loading is set.
	Edges        ClientsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClientsEdges holds the relations/edges for other nodes in the graph.
type ClientsEdges struct {
	// AccessToken holds the value of the access_token edge.
	AccessToken []*AccessTokens `json:"access_token,omitempty"`
	// AuthorizeCode holds the value of the authorize_code edge.
	AuthorizeCode []*AuthorizeCodes `json:"authorize_code,omitempty"`
	// RefreshToken holds the value of the refresh_token edge.
	RefreshToken []*RefreshTokens `json:"refresh_token,omitempty"`
	// IDSession holds the value of the id_session edge.
	IDSession []*IDSessions `json:"id_session,omitempty"`
	// Pkce holds the value of the pkce edge.
	Pkce []*PKCES `json:"pkce,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AccessTokenOrErr returns the AccessToken value or an error if the edge
// was not loaded in eager-loading.
func (e ClientsEdges) AccessTokenOrErr() ([]*AccessTokens, error) {
	if e.loadedTypes[0] {
		return e.AccessToken, nil
	}
	return nil, &NotLoadedError{edge: "access_token"}
}

// AuthorizeCodeOrErr returns the AuthorizeCode value or an error if the edge
// was not loaded in eager-loading.
func (e ClientsEdges) AuthorizeCodeOrErr() ([]*AuthorizeCodes, error) {
	if e.loadedTypes[1] {
		return e.AuthorizeCode, nil
	}
	return nil, &NotLoadedError{edge: "authorize_code"}
}

// RefreshTokenOrErr returns the RefreshToken value or an error if the edge
// was not loaded in eager-loading.
func (e ClientsEdges) RefreshTokenOrErr() ([]*RefreshTokens, error) {
	if e.loadedTypes[2] {
		return e.RefreshToken, nil
	}
	return nil, &NotLoadedError{edge: "refresh_token"}
}

// IDSessionOrErr returns the IDSession value or an error if the edge
// was not loaded in eager-loading.
func (e ClientsEdges) IDSessionOrErr() ([]*IDSessions, error) {
	if e.loadedTypes[3] {
		return e.IDSession, nil
	}
	return nil, &NotLoadedError{edge: "id_session"}
}

// PkceOrErr returns the Pkce value or an error if the edge
// was not loaded in eager-loading.
func (e ClientsEdges) PkceOrErr() ([]*PKCES, error) {
	if e.loadedTypes[4] {
		return e.Pkce, nil
	}
	return nil, &NotLoadedError{edge: "pkce"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Clients) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clients.FieldClientSecret, clients.FieldRotatedSecrets, clients.FieldRedirectUris, clients.FieldGrantTypes, clients.FieldResponseTypes, clients.FieldScopes, clients.FieldAudience:
			values[i] = new([]byte)
		case clients.FieldPublic:
			values[i] = new(sql.NullBool)
		case clients.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Clients fields.
func (c *Clients) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clients.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case clients.FieldClientSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value != nil {
				c.ClientSecret = *value
			}
		case clients.FieldRotatedSecrets:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rotated_secrets", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.RotatedSecrets); err != nil {
					return fmt.Errorf("unmarshal field rotated_secrets: %w", err)
				}
			}
		case clients.FieldRedirectUris:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uris", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.RedirectUris); err != nil {
					return fmt.Errorf("unmarshal field redirect_uris: %w", err)
				}
			}
		case clients.FieldGrantTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field grant_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.GrantTypes); err != nil {
					return fmt.Errorf("unmarshal field grant_types: %w", err)
				}
			}
		case clients.FieldResponseTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field response_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ResponseTypes); err != nil {
					return fmt.Errorf("unmarshal field response_types: %w", err)
				}
			}
		case clients.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case clients.FieldAudience:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field audience", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Audience); err != nil {
					return fmt.Errorf("unmarshal field audience: %w", err)
				}
			}
		case clients.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				c.Public = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Clients.
// This includes values selected through modifiers, order, etc.
func (c *Clients) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryAccessToken queries the "access_token" edge of the Clients entity.
func (c *Clients) QueryAccessToken() *AccessTokensQuery {
	return NewClientsClient(c.config).QueryAccessToken(c)
}

// QueryAuthorizeCode queries the "authorize_code" edge of the Clients entity.
func (c *Clients) QueryAuthorizeCode() *AuthorizeCodesQuery {
	return NewClientsClient(c.config).QueryAuthorizeCode(c)
}

// QueryRefreshToken queries the "refresh_token" edge of the Clients entity.
func (c *Clients) QueryRefreshToken() *RefreshTokensQuery {
	return NewClientsClient(c.config).QueryRefreshToken(c)
}

// QueryIDSession queries the "id_session" edge of the Clients entity.
func (c *Clients) QueryIDSession() *IDSessionsQuery {
	return NewClientsClient(c.config).QueryIDSession(c)
}

// QueryPkce queries the "pkce" edge of the Clients entity.
func (c *Clients) QueryPkce() *PKCESQuery {
	return NewClientsClient(c.config).QueryPkce(c)
}

// Update returns a builder for updating this Clients.
// Note that you need to call Clients.Unwrap() before calling this method if this Clients
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Clients) Update() *ClientsUpdateOne {
	return NewClientsClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Clients entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Clients) Unwrap() *Clients {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Clients is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Clients) String() string {
	var builder strings.Builder
	builder.WriteString("Clients(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("client_secret=")
	builder.WriteString(fmt.Sprintf("%v", c.ClientSecret))
	builder.WriteString(", ")
	builder.WriteString("rotated_secrets=")
	builder.WriteString(fmt.Sprintf("%v", c.RotatedSecrets))
	builder.WriteString(", ")
	builder.WriteString("redirect_uris=")
	builder.WriteString(fmt.Sprintf("%v", c.RedirectUris))
	builder.WriteString(", ")
	builder.WriteString("grant_types=")
	builder.WriteString(fmt.Sprintf("%v", c.GrantTypes))
	builder.WriteString(", ")
	builder.WriteString("response_types=")
	builder.WriteString(fmt.Sprintf("%v", c.ResponseTypes))
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", c.Scopes))
	builder.WriteString(", ")
	builder.WriteString("audience=")
	builder.WriteString(fmt.Sprintf("%v", c.Audience))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", c.Public))
	builder.WriteByte(')')
	return builder.String()
}

// ClientsSlice is a parsable slice of Clients.
type ClientsSlice []*Clients
