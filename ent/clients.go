// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/clients"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Clients is the model entity for the Clients schema.
type Clients struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret []byte `json:"client_secret,omitempty"`
	// RotatedSecrets holds the value of the "rotated_secrets" field.
	RotatedSecrets [][]uint8 `json:"rotated_secrets,omitempty"`
	// RedirectUris holds the value of the "redirect_uris" field.
	RedirectUris []string `json:"redirect_uris,omitempty"`
	// GrantTypes holds the value of the "grant_types" field.
	GrantTypes []string `json:"grant_types,omitempty"`
	// ResponseTypes holds the value of the "response_types" field.
	ResponseTypes []string `json:"response_types,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// Audience holds the value of the "audience" field.
	Audience []string `json:"audience,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ClientsQuery when eager-loading is set.
	Edges        ClientsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ClientsEdges holds the relations/edges for other nodes in the graph.
type ClientsEdges struct {
	// Requests holds the value of the requests edge.
	Requests []*Request `json:"requests,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequestsOrErr returns the Requests value or an error if the edge
// was not loaded in eager-loading.
func (e ClientsEdges) RequestsOrErr() ([]*Request, error) {
	if e.loadedTypes[0] {
		return e.Requests, nil
	}
	return nil, &NotLoadedError{edge: "requests"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Clients) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case clients.FieldClientSecret, clients.FieldRotatedSecrets, clients.FieldRedirectUris, clients.FieldGrantTypes, clients.FieldResponseTypes, clients.FieldScopes, clients.FieldAudience:
			values[i] = new([]byte)
		case clients.FieldPublic:
			values[i] = new(sql.NullBool)
		case clients.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Clients fields.
func (c *Clients) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case clients.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case clients.FieldClientSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value != nil {
				c.ClientSecret = *value
			}
		case clients.FieldRotatedSecrets:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field rotated_secrets", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.RotatedSecrets); err != nil {
					return fmt.Errorf("unmarshal field rotated_secrets: %w", err)
				}
			}
		case clients.FieldRedirectUris:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uris", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.RedirectUris); err != nil {
					return fmt.Errorf("unmarshal field redirect_uris: %w", err)
				}
			}
		case clients.FieldGrantTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field grant_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.GrantTypes); err != nil {
					return fmt.Errorf("unmarshal field grant_types: %w", err)
				}
			}
		case clients.FieldResponseTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field response_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ResponseTypes); err != nil {
					return fmt.Errorf("unmarshal field response_types: %w", err)
				}
			}
		case clients.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case clients.FieldAudience:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field audience", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Audience); err != nil {
					return fmt.Errorf("unmarshal field audience: %w", err)
				}
			}
		case clients.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				c.Public = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Clients.
// This includes values selected through modifiers, order, etc.
func (c *Clients) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryRequests queries the "requests" edge of the Clients entity.
func (c *Clients) QueryRequests() *RequestQuery {
	return NewClientsClient(c.config).QueryRequests(c)
}

// Update returns a builder for updating this Clients.
// Note that you need to call Clients.Unwrap() before calling this method if this Clients
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Clients) Update() *ClientsUpdateOne {
	return NewClientsClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Clients entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Clients) Unwrap() *Clients {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Clients is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Clients) String() string {
	var builder strings.Builder
	builder.WriteString("Clients(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("client_secret=")
	builder.WriteString(fmt.Sprintf("%v", c.ClientSecret))
	builder.WriteString(", ")
	builder.WriteString("rotated_secrets=")
	builder.WriteString(fmt.Sprintf("%v", c.RotatedSecrets))
	builder.WriteString(", ")
	builder.WriteString("redirect_uris=")
	builder.WriteString(fmt.Sprintf("%v", c.RedirectUris))
	builder.WriteString(", ")
	builder.WriteString("grant_types=")
	builder.WriteString(fmt.Sprintf("%v", c.GrantTypes))
	builder.WriteString(", ")
	builder.WriteString("response_types=")
	builder.WriteString(fmt.Sprintf("%v", c.ResponseTypes))
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", c.Scopes))
	builder.WriteString(", ")
	builder.WriteString("audience=")
	builder.WriteString(fmt.Sprintf("%v", c.Audience))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", c.Public))
	builder.WriteByte(')')
	return builder.String()
}

// ClientsSlice is a parsable slice of Clients.
type ClientsSlice []*Clients
