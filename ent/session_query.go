// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/accesstokens"
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/idsessions"
	"authorization-service/ent/pkces"
	"authorization-service/ent/predicate"
	"authorization-service/ent/refreshtokens"
	"authorization-service/ent/session"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SessionQuery is the builder for querying Session entities.
type SessionQuery struct {
	config
	ctx               *QueryContext
	order             []session.OrderOption
	inters            []Interceptor
	predicates        []predicate.Session
	withAccessToken   *AccessTokensQuery
	withAuthorizeCode *AuthorizeCodesQuery
	withRefreshToken  *RefreshTokensQuery
	withIDSession     *IDSessionsQuery
	withPkce          *PKCESQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SessionQuery builder.
func (sq *SessionQuery) Where(ps ...predicate.Session) *SessionQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *SessionQuery) Limit(limit int) *SessionQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *SessionQuery) Offset(offset int) *SessionQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *SessionQuery) Unique(unique bool) *SessionQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *SessionQuery) Order(o ...session.OrderOption) *SessionQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryAccessToken chains the current query on the "access_token" edge.
func (sq *SessionQuery) QueryAccessToken() *AccessTokensQuery {
	query := (&AccessTokensClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, selector),
			sqlgraph.To(accesstokens.Table, accesstokens.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.AccessTokenTable, session.AccessTokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthorizeCode chains the current query on the "authorize_code" edge.
func (sq *SessionQuery) QueryAuthorizeCode() *AuthorizeCodesQuery {
	query := (&AuthorizeCodesClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, selector),
			sqlgraph.To(authorizecodes.Table, authorizecodes.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.AuthorizeCodeTable, session.AuthorizeCodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRefreshToken chains the current query on the "refresh_token" edge.
func (sq *SessionQuery) QueryRefreshToken() *RefreshTokensQuery {
	query := (&RefreshTokensClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, selector),
			sqlgraph.To(refreshtokens.Table, refreshtokens.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.RefreshTokenTable, session.RefreshTokenColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIDSession chains the current query on the "id_session" edge.
func (sq *SessionQuery) QueryIDSession() *IDSessionsQuery {
	query := (&IDSessionsClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, selector),
			sqlgraph.To(idsessions.Table, idsessions.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.IDSessionTable, session.IDSessionColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPkce chains the current query on the "pkce" edge.
func (sq *SessionQuery) QueryPkce() *PKCESQuery {
	query := (&PKCESClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, selector),
			sqlgraph.To(pkces.Table, pkces.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, session.PkceTable, session.PkceColumn),
		)
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Session entity from the query.
// Returns a *NotFoundError when no Session was found.
func (sq *SessionQuery) First(ctx context.Context) (*Session, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{session.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *SessionQuery) FirstX(ctx context.Context) *Session {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Session ID from the query.
// Returns a *NotFoundError when no Session ID was found.
func (sq *SessionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{session.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *SessionQuery) FirstIDX(ctx context.Context) string {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Session entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Session entity is found.
// Returns a *NotFoundError when no Session entities are found.
func (sq *SessionQuery) Only(ctx context.Context) (*Session, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{session.Label}
	default:
		return nil, &NotSingularError{session.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *SessionQuery) OnlyX(ctx context.Context) *Session {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Session ID in the query.
// Returns a *NotSingularError when more than one Session ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *SessionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{session.Label}
	default:
		err = &NotSingularError{session.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *SessionQuery) OnlyIDX(ctx context.Context) string {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Sessions.
func (sq *SessionQuery) All(ctx context.Context) ([]*Session, error) {
	ctx = setContextOp(ctx, sq.ctx, "All")
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Session, *SessionQuery]()
	return withInterceptors[[]*Session](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *SessionQuery) AllX(ctx context.Context) []*Session {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Session IDs.
func (sq *SessionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, "IDs")
	if err = sq.Select(session.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *SessionQuery) IDsX(ctx context.Context) []string {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *SessionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, "Count")
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*SessionQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *SessionQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *SessionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, "Exist")
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *SessionQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SessionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *SessionQuery) Clone() *SessionQuery {
	if sq == nil {
		return nil
	}
	return &SessionQuery{
		config:            sq.config,
		ctx:               sq.ctx.Clone(),
		order:             append([]session.OrderOption{}, sq.order...),
		inters:            append([]Interceptor{}, sq.inters...),
		predicates:        append([]predicate.Session{}, sq.predicates...),
		withAccessToken:   sq.withAccessToken.Clone(),
		withAuthorizeCode: sq.withAuthorizeCode.Clone(),
		withRefreshToken:  sq.withRefreshToken.Clone(),
		withIDSession:     sq.withIDSession.Clone(),
		withPkce:          sq.withPkce.Clone(),
		// clone intermediate query.
		sql:  sq.sql.Clone(),
		path: sq.path,
	}
}

// WithAccessToken tells the query-builder to eager-load the nodes that are connected to
// the "access_token" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SessionQuery) WithAccessToken(opts ...func(*AccessTokensQuery)) *SessionQuery {
	query := (&AccessTokensClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withAccessToken = query
	return sq
}

// WithAuthorizeCode tells the query-builder to eager-load the nodes that are connected to
// the "authorize_code" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SessionQuery) WithAuthorizeCode(opts ...func(*AuthorizeCodesQuery)) *SessionQuery {
	query := (&AuthorizeCodesClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withAuthorizeCode = query
	return sq
}

// WithRefreshToken tells the query-builder to eager-load the nodes that are connected to
// the "refresh_token" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SessionQuery) WithRefreshToken(opts ...func(*RefreshTokensQuery)) *SessionQuery {
	query := (&RefreshTokensClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withRefreshToken = query
	return sq
}

// WithIDSession tells the query-builder to eager-load the nodes that are connected to
// the "id_session" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SessionQuery) WithIDSession(opts ...func(*IDSessionsQuery)) *SessionQuery {
	query := (&IDSessionsClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withIDSession = query
	return sq
}

// WithPkce tells the query-builder to eager-load the nodes that are connected to
// the "pkce" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *SessionQuery) WithPkce(opts ...func(*PKCESQuery)) *SessionQuery {
	query := (&PKCESClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withPkce = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ExpiresAt map[string]time.Time `json:"expires_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Session.Query().
//		GroupBy(session.FieldExpiresAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (sq *SessionQuery) GroupBy(field string, fields ...string) *SessionGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SessionGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = session.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ExpiresAt map[string]time.Time `json:"expires_at,omitempty"`
//	}
//
//	client.Session.Query().
//		Select(session.FieldExpiresAt).
//		Scan(ctx, &v)
func (sq *SessionQuery) Select(fields ...string) *SessionSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &SessionSelect{SessionQuery: sq}
	sbuild.label = session.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SessionSelect configured with the given aggregations.
func (sq *SessionQuery) Aggregate(fns ...AggregateFunc) *SessionSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *SessionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !session.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *SessionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Session, error) {
	var (
		nodes       = []*Session{}
		_spec       = sq.querySpec()
		loadedTypes = [5]bool{
			sq.withAccessToken != nil,
			sq.withAuthorizeCode != nil,
			sq.withRefreshToken != nil,
			sq.withIDSession != nil,
			sq.withPkce != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Session).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Session{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withAccessToken; query != nil {
		if err := sq.loadAccessToken(ctx, query, nodes,
			func(n *Session) { n.Edges.AccessToken = []*AccessTokens{} },
			func(n *Session, e *AccessTokens) { n.Edges.AccessToken = append(n.Edges.AccessToken, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withAuthorizeCode; query != nil {
		if err := sq.loadAuthorizeCode(ctx, query, nodes,
			func(n *Session) { n.Edges.AuthorizeCode = []*AuthorizeCodes{} },
			func(n *Session, e *AuthorizeCodes) { n.Edges.AuthorizeCode = append(n.Edges.AuthorizeCode, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withRefreshToken; query != nil {
		if err := sq.loadRefreshToken(ctx, query, nodes,
			func(n *Session) { n.Edges.RefreshToken = []*RefreshTokens{} },
			func(n *Session, e *RefreshTokens) { n.Edges.RefreshToken = append(n.Edges.RefreshToken, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withIDSession; query != nil {
		if err := sq.loadIDSession(ctx, query, nodes,
			func(n *Session) { n.Edges.IDSession = []*IDSessions{} },
			func(n *Session, e *IDSessions) { n.Edges.IDSession = append(n.Edges.IDSession, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withPkce; query != nil {
		if err := sq.loadPkce(ctx, query, nodes,
			func(n *Session) { n.Edges.Pkce = []*PKCES{} },
			func(n *Session, e *PKCES) { n.Edges.Pkce = append(n.Edges.Pkce, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *SessionQuery) loadAccessToken(ctx context.Context, query *AccessTokensQuery, nodes []*Session, init func(*Session), assign func(*Session, *AccessTokens)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Session)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AccessTokens(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(session.AccessTokenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.session_access_token
		if fk == nil {
			return fmt.Errorf(`foreign-key "session_access_token" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "session_access_token" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SessionQuery) loadAuthorizeCode(ctx context.Context, query *AuthorizeCodesQuery, nodes []*Session, init func(*Session), assign func(*Session, *AuthorizeCodes)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Session)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AuthorizeCodes(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(session.AuthorizeCodeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.session_authorize_code
		if fk == nil {
			return fmt.Errorf(`foreign-key "session_authorize_code" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "session_authorize_code" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SessionQuery) loadRefreshToken(ctx context.Context, query *RefreshTokensQuery, nodes []*Session, init func(*Session), assign func(*Session, *RefreshTokens)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Session)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.RefreshTokens(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(session.RefreshTokenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.session_refresh_token
		if fk == nil {
			return fmt.Errorf(`foreign-key "session_refresh_token" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "session_refresh_token" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SessionQuery) loadIDSession(ctx context.Context, query *IDSessionsQuery, nodes []*Session, init func(*Session), assign func(*Session, *IDSessions)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Session)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.IDSessions(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(session.IDSessionColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.session_id_session
		if fk == nil {
			return fmt.Errorf(`foreign-key "session_id_session" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "session_id_session" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *SessionQuery) loadPkce(ctx context.Context, query *PKCESQuery, nodes []*Session, init func(*Session), assign func(*Session, *PKCES)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Session)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PKCES(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(session.PkceColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.session_pkce
		if fk == nil {
			return fmt.Errorf(`foreign-key "session_pkce" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "session_pkce" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *SessionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *SessionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(session.Table, session.Columns, sqlgraph.NewFieldSpec(session.FieldID, field.TypeString))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, session.FieldID)
		for i := range fields {
			if fields[i] != session.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *SessionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(session.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = session.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SessionGroupBy is the group-by builder for Session entities.
type SessionGroupBy struct {
	selector
	build *SessionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *SessionGroupBy) Aggregate(fns ...AggregateFunc) *SessionGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *SessionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, "GroupBy")
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SessionQuery, *SessionGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *SessionGroupBy) sqlScan(ctx context.Context, root *SessionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SessionSelect is the builder for selecting fields of Session entities.
type SessionSelect struct {
	*SessionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *SessionSelect) Aggregate(fns ...AggregateFunc) *SessionSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *SessionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, "Select")
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SessionQuery, *SessionSelect](ctx, ss.SessionQuery, ss, ss.inters, v)
}

func (ss *SessionSelect) sqlScan(ctx context.Context, root *SessionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
