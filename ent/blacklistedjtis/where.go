// Code generated by ent, DO NOT EDIT.

package blacklistedjtis

import (
	"authorization-service/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldContainsFold(FieldID, id))
}

// Expiry applies equality check predicate on the "expiry" field. It's identical to ExpiryEQ.
func Expiry(v time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldEQ(FieldExpiry, v))
}

// ExpiryEQ applies the EQ predicate on the "expiry" field.
func ExpiryEQ(v time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldEQ(FieldExpiry, v))
}

// ExpiryNEQ applies the NEQ predicate on the "expiry" field.
func ExpiryNEQ(v time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldNEQ(FieldExpiry, v))
}

// ExpiryIn applies the In predicate on the "expiry" field.
func ExpiryIn(vs ...time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldIn(FieldExpiry, vs...))
}

// ExpiryNotIn applies the NotIn predicate on the "expiry" field.
func ExpiryNotIn(vs ...time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldNotIn(FieldExpiry, vs...))
}

// ExpiryGT applies the GT predicate on the "expiry" field.
func ExpiryGT(v time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldGT(FieldExpiry, v))
}

// ExpiryGTE applies the GTE predicate on the "expiry" field.
func ExpiryGTE(v time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldGTE(FieldExpiry, v))
}

// ExpiryLT applies the LT predicate on the "expiry" field.
func ExpiryLT(v time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldLT(FieldExpiry, v))
}

// ExpiryLTE applies the LTE predicate on the "expiry" field.
func ExpiryLTE(v time.Time) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(sql.FieldLTE(FieldExpiry, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BlacklistedJTIs) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BlacklistedJTIs) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BlacklistedJTIs) predicate.BlacklistedJTIs {
	return predicate.BlacklistedJTIs(func(s *sql.Selector) {
		p(s.Not())
	})
}
