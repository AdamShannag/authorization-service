// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/accesstokens"
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/clients"
	"authorization-service/ent/idsessions"
	"authorization-service/ent/pkces"
	"authorization-service/ent/refreshtokens"
	"authorization-service/ent/request"
	"authorization-service/ent/session"
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"golang.org/x/text/language"
)

// RequestCreate is the builder for creating a Request entity.
type RequestCreate struct {
	config
	mutation *RequestMutation
	hooks    []Hook
}

// SetRequestedAt sets the "requestedAt" field.
func (rc *RequestCreate) SetRequestedAt(t time.Time) *RequestCreate {
	rc.mutation.SetRequestedAt(t)
	return rc
}

// SetScopes sets the "scopes" field.
func (rc *RequestCreate) SetScopes(s []string) *RequestCreate {
	rc.mutation.SetScopes(s)
	return rc
}

// SetGrantedScopes sets the "granted_scopes" field.
func (rc *RequestCreate) SetGrantedScopes(s []string) *RequestCreate {
	rc.mutation.SetGrantedScopes(s)
	return rc
}

// SetRequestedAudience sets the "requested_audience" field.
func (rc *RequestCreate) SetRequestedAudience(s []string) *RequestCreate {
	rc.mutation.SetRequestedAudience(s)
	return rc
}

// SetGrantedAudience sets the "granted_audience" field.
func (rc *RequestCreate) SetGrantedAudience(s []string) *RequestCreate {
	rc.mutation.SetGrantedAudience(s)
	return rc
}

// SetForm sets the "form" field.
func (rc *RequestCreate) SetForm(u url.Values) *RequestCreate {
	rc.mutation.SetForm(u)
	return rc
}

// SetLang sets the "lang" field.
func (rc *RequestCreate) SetLang(l language.Tag) *RequestCreate {
	rc.mutation.SetLang(l)
	return rc
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (rc *RequestCreate) SetNillableLang(l *language.Tag) *RequestCreate {
	if l != nil {
		rc.SetLang(*l)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RequestCreate) SetID(s string) *RequestCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetClientIDID sets the "client_id" edge to the Clients entity by ID.
func (rc *RequestCreate) SetClientIDID(id string) *RequestCreate {
	rc.mutation.SetClientIDID(id)
	return rc
}

// SetNillableClientIDID sets the "client_id" edge to the Clients entity by ID if the given value is not nil.
func (rc *RequestCreate) SetNillableClientIDID(id *string) *RequestCreate {
	if id != nil {
		rc = rc.SetClientIDID(*id)
	}
	return rc
}

// SetClientID sets the "client_id" edge to the Clients entity.
func (rc *RequestCreate) SetClientID(c *Clients) *RequestCreate {
	return rc.SetClientIDID(c.ID)
}

// SetSessionIDID sets the "session_id" edge to the Session entity by ID.
func (rc *RequestCreate) SetSessionIDID(id string) *RequestCreate {
	rc.mutation.SetSessionIDID(id)
	return rc
}

// SetNillableSessionIDID sets the "session_id" edge to the Session entity by ID if the given value is not nil.
func (rc *RequestCreate) SetNillableSessionIDID(id *string) *RequestCreate {
	if id != nil {
		rc = rc.SetSessionIDID(*id)
	}
	return rc
}

// SetSessionID sets the "session_id" edge to the Session entity.
func (rc *RequestCreate) SetSessionID(s *Session) *RequestCreate {
	return rc.SetSessionIDID(s.ID)
}

// SetRefreshTokenID sets the "refresh_token" edge to the RefreshTokens entity by ID.
func (rc *RequestCreate) SetRefreshTokenID(id string) *RequestCreate {
	rc.mutation.SetRefreshTokenID(id)
	return rc
}

// SetNillableRefreshTokenID sets the "refresh_token" edge to the RefreshTokens entity by ID if the given value is not nil.
func (rc *RequestCreate) SetNillableRefreshTokenID(id *string) *RequestCreate {
	if id != nil {
		rc = rc.SetRefreshTokenID(*id)
	}
	return rc
}

// SetRefreshToken sets the "refresh_token" edge to the RefreshTokens entity.
func (rc *RequestCreate) SetRefreshToken(r *RefreshTokens) *RequestCreate {
	return rc.SetRefreshTokenID(r.ID)
}

// SetAuthorizeCodeID sets the "authorize_code" edge to the AuthorizeCodes entity by ID.
func (rc *RequestCreate) SetAuthorizeCodeID(id string) *RequestCreate {
	rc.mutation.SetAuthorizeCodeID(id)
	return rc
}

// SetNillableAuthorizeCodeID sets the "authorize_code" edge to the AuthorizeCodes entity by ID if the given value is not nil.
func (rc *RequestCreate) SetNillableAuthorizeCodeID(id *string) *RequestCreate {
	if id != nil {
		rc = rc.SetAuthorizeCodeID(*id)
	}
	return rc
}

// SetAuthorizeCode sets the "authorize_code" edge to the AuthorizeCodes entity.
func (rc *RequestCreate) SetAuthorizeCode(a *AuthorizeCodes) *RequestCreate {
	return rc.SetAuthorizeCodeID(a.ID)
}

// SetAccessTokenID sets the "access_token" edge to the AccessTokens entity by ID.
func (rc *RequestCreate) SetAccessTokenID(id string) *RequestCreate {
	rc.mutation.SetAccessTokenID(id)
	return rc
}

// SetNillableAccessTokenID sets the "access_token" edge to the AccessTokens entity by ID if the given value is not nil.
func (rc *RequestCreate) SetNillableAccessTokenID(id *string) *RequestCreate {
	if id != nil {
		rc = rc.SetAccessTokenID(*id)
	}
	return rc
}

// SetAccessToken sets the "access_token" edge to the AccessTokens entity.
func (rc *RequestCreate) SetAccessToken(a *AccessTokens) *RequestCreate {
	return rc.SetAccessTokenID(a.ID)
}

// SetIDSessionID sets the "id_session" edge to the IDSessions entity by ID.
func (rc *RequestCreate) SetIDSessionID(id string) *RequestCreate {
	rc.mutation.SetIDSessionID(id)
	return rc
}

// SetNillableIDSessionID sets the "id_session" edge to the IDSessions entity by ID if the given value is not nil.
func (rc *RequestCreate) SetNillableIDSessionID(id *string) *RequestCreate {
	if id != nil {
		rc = rc.SetIDSessionID(*id)
	}
	return rc
}

// SetIDSession sets the "id_session" edge to the IDSessions entity.
func (rc *RequestCreate) SetIDSession(i *IDSessions) *RequestCreate {
	return rc.SetIDSessionID(i.ID)
}

// SetPkceID sets the "pkce" edge to the PKCES entity by ID.
func (rc *RequestCreate) SetPkceID(id string) *RequestCreate {
	rc.mutation.SetPkceID(id)
	return rc
}

// SetNillablePkceID sets the "pkce" edge to the PKCES entity by ID if the given value is not nil.
func (rc *RequestCreate) SetNillablePkceID(id *string) *RequestCreate {
	if id != nil {
		rc = rc.SetPkceID(*id)
	}
	return rc
}

// SetPkce sets the "pkce" edge to the PKCES entity.
func (rc *RequestCreate) SetPkce(p *PKCES) *RequestCreate {
	return rc.SetPkceID(p.ID)
}

// Mutation returns the RequestMutation object of the builder.
func (rc *RequestCreate) Mutation() *RequestMutation {
	return rc.mutation
}

// Save creates the Request in the database.
func (rc *RequestCreate) Save(ctx context.Context) (*Request, error) {
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RequestCreate) SaveX(ctx context.Context) *Request {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RequestCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RequestCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RequestCreate) check() error {
	if _, ok := rc.mutation.RequestedAt(); !ok {
		return &ValidationError{Name: "requestedAt", err: errors.New(`ent: missing required field "Request.requestedAt"`)}
	}
	if _, ok := rc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "Request.scopes"`)}
	}
	if _, ok := rc.mutation.GrantedScopes(); !ok {
		return &ValidationError{Name: "granted_scopes", err: errors.New(`ent: missing required field "Request.granted_scopes"`)}
	}
	if _, ok := rc.mutation.RequestedAudience(); !ok {
		return &ValidationError{Name: "requested_audience", err: errors.New(`ent: missing required field "Request.requested_audience"`)}
	}
	if _, ok := rc.mutation.GrantedAudience(); !ok {
		return &ValidationError{Name: "granted_audience", err: errors.New(`ent: missing required field "Request.granted_audience"`)}
	}
	if _, ok := rc.mutation.Form(); !ok {
		return &ValidationError{Name: "form", err: errors.New(`ent: missing required field "Request.form"`)}
	}
	return nil
}

func (rc *RequestCreate) sqlSave(ctx context.Context) (*Request, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Request.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RequestCreate) createSpec() (*Request, *sqlgraph.CreateSpec) {
	var (
		_node = &Request{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(request.Table, sqlgraph.NewFieldSpec(request.FieldID, field.TypeString))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.RequestedAt(); ok {
		_spec.SetField(request.FieldRequestedAt, field.TypeTime, value)
		_node.RequestedAt = value
	}
	if value, ok := rc.mutation.Scopes(); ok {
		_spec.SetField(request.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := rc.mutation.GrantedScopes(); ok {
		_spec.SetField(request.FieldGrantedScopes, field.TypeJSON, value)
		_node.GrantedScopes = value
	}
	if value, ok := rc.mutation.RequestedAudience(); ok {
		_spec.SetField(request.FieldRequestedAudience, field.TypeJSON, value)
		_node.RequestedAudience = value
	}
	if value, ok := rc.mutation.GrantedAudience(); ok {
		_spec.SetField(request.FieldGrantedAudience, field.TypeJSON, value)
		_node.GrantedAudience = value
	}
	if value, ok := rc.mutation.Form(); ok {
		_spec.SetField(request.FieldForm, field.TypeJSON, value)
		_node.Form = value
	}
	if value, ok := rc.mutation.Lang(); ok {
		_spec.SetField(request.FieldLang, field.TypeJSON, value)
		_node.Lang = value
	}
	if nodes := rc.mutation.ClientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.ClientIDTable,
			Columns: []string{request.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.clients_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.SessionIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.SessionIDTable,
			Columns: []string{request.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.session_requests = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RefreshTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.RefreshTokenTable,
			Columns: []string{request.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AuthorizeCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AuthorizeCodeTable,
			Columns: []string{request.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AccessTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AccessTokenTable,
			Columns: []string{request.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.IDSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.IDSessionTable,
			Columns: []string{request.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.PkceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.PkceTable,
			Columns: []string{request.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RequestCreateBulk is the builder for creating many Request entities in bulk.
type RequestCreateBulk struct {
	config
	builders []*RequestCreate
}

// Save creates the Request entities in the database.
func (rcb *RequestCreateBulk) Save(ctx context.Context) ([]*Request, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Request, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequestMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RequestCreateBulk) SaveX(ctx context.Context) []*Request {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RequestCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RequestCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
