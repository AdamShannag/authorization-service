// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/predicate"
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/subjectpublickeys"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectPublicKeysQuery is the builder for querying SubjectPublicKeys entities.
type SubjectPublicKeysQuery struct {
	config
	ctx                   *QueryContext
	order                 []subjectpublickeys.OrderOption
	inters                []Interceptor
	predicates            []predicate.SubjectPublicKeys
	withPublicKeyScope    *PublicKeyScopesQuery
	withIssuerPublicKeyID *IssuerPublicKeysQuery
	withFKs               bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the SubjectPublicKeysQuery builder.
func (spkq *SubjectPublicKeysQuery) Where(ps ...predicate.SubjectPublicKeys) *SubjectPublicKeysQuery {
	spkq.predicates = append(spkq.predicates, ps...)
	return spkq
}

// Limit the number of records to be returned by this query.
func (spkq *SubjectPublicKeysQuery) Limit(limit int) *SubjectPublicKeysQuery {
	spkq.ctx.Limit = &limit
	return spkq
}

// Offset to start from.
func (spkq *SubjectPublicKeysQuery) Offset(offset int) *SubjectPublicKeysQuery {
	spkq.ctx.Offset = &offset
	return spkq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (spkq *SubjectPublicKeysQuery) Unique(unique bool) *SubjectPublicKeysQuery {
	spkq.ctx.Unique = &unique
	return spkq
}

// Order specifies how the records should be ordered.
func (spkq *SubjectPublicKeysQuery) Order(o ...subjectpublickeys.OrderOption) *SubjectPublicKeysQuery {
	spkq.order = append(spkq.order, o...)
	return spkq
}

// QueryPublicKeyScope chains the current query on the "public_key_scope" edge.
func (spkq *SubjectPublicKeysQuery) QueryPublicKeyScope() *PublicKeyScopesQuery {
	query := (&PublicKeyScopesClient{config: spkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectpublickeys.Table, subjectpublickeys.FieldID, selector),
			sqlgraph.To(publickeyscopes.Table, publickeyscopes.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, subjectpublickeys.PublicKeyScopeTable, subjectpublickeys.PublicKeyScopeColumn),
		)
		fromU = sqlgraph.SetNeighbors(spkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIssuerPublicKeyID chains the current query on the "issuer_public_key_id" edge.
func (spkq *SubjectPublicKeysQuery) QueryIssuerPublicKeyID() *IssuerPublicKeysQuery {
	query := (&IssuerPublicKeysClient{config: spkq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := spkq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := spkq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectpublickeys.Table, subjectpublickeys.FieldID, selector),
			sqlgraph.To(issuerpublickeys.Table, issuerpublickeys.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, subjectpublickeys.IssuerPublicKeyIDTable, subjectpublickeys.IssuerPublicKeyIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(spkq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubjectPublicKeys entity from the query.
// Returns a *NotFoundError when no SubjectPublicKeys was found.
func (spkq *SubjectPublicKeysQuery) First(ctx context.Context) (*SubjectPublicKeys, error) {
	nodes, err := spkq.Limit(1).All(setContextOp(ctx, spkq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{subjectpublickeys.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) FirstX(ctx context.Context) *SubjectPublicKeys {
	node, err := spkq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first SubjectPublicKeys ID from the query.
// Returns a *NotFoundError when no SubjectPublicKeys ID was found.
func (spkq *SubjectPublicKeysQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = spkq.Limit(1).IDs(setContextOp(ctx, spkq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subjectpublickeys.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) FirstIDX(ctx context.Context) string {
	id, err := spkq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single SubjectPublicKeys entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one SubjectPublicKeys entity is found.
// Returns a *NotFoundError when no SubjectPublicKeys entities are found.
func (spkq *SubjectPublicKeysQuery) Only(ctx context.Context) (*SubjectPublicKeys, error) {
	nodes, err := spkq.Limit(2).All(setContextOp(ctx, spkq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{subjectpublickeys.Label}
	default:
		return nil, &NotSingularError{subjectpublickeys.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) OnlyX(ctx context.Context) *SubjectPublicKeys {
	node, err := spkq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only SubjectPublicKeys ID in the query.
// Returns a *NotSingularError when more than one SubjectPublicKeys ID is found.
// Returns a *NotFoundError when no entities are found.
func (spkq *SubjectPublicKeysQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = spkq.Limit(2).IDs(setContextOp(ctx, spkq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subjectpublickeys.Label}
	default:
		err = &NotSingularError{subjectpublickeys.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) OnlyIDX(ctx context.Context) string {
	id, err := spkq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubjectPublicKeysSlice.
func (spkq *SubjectPublicKeysQuery) All(ctx context.Context) ([]*SubjectPublicKeys, error) {
	ctx = setContextOp(ctx, spkq.ctx, "All")
	if err := spkq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*SubjectPublicKeys, *SubjectPublicKeysQuery]()
	return withInterceptors[[]*SubjectPublicKeys](ctx, spkq, qr, spkq.inters)
}

// AllX is like All, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) AllX(ctx context.Context) []*SubjectPublicKeys {
	nodes, err := spkq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of SubjectPublicKeys IDs.
func (spkq *SubjectPublicKeysQuery) IDs(ctx context.Context) (ids []string, err error) {
	if spkq.ctx.Unique == nil && spkq.path != nil {
		spkq.Unique(true)
	}
	ctx = setContextOp(ctx, spkq.ctx, "IDs")
	if err = spkq.Select(subjectpublickeys.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) IDsX(ctx context.Context) []string {
	ids, err := spkq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (spkq *SubjectPublicKeysQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, spkq.ctx, "Count")
	if err := spkq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, spkq, querierCount[*SubjectPublicKeysQuery](), spkq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) CountX(ctx context.Context) int {
	count, err := spkq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (spkq *SubjectPublicKeysQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, spkq.ctx, "Exist")
	switch _, err := spkq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (spkq *SubjectPublicKeysQuery) ExistX(ctx context.Context) bool {
	exist, err := spkq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the SubjectPublicKeysQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (spkq *SubjectPublicKeysQuery) Clone() *SubjectPublicKeysQuery {
	if spkq == nil {
		return nil
	}
	return &SubjectPublicKeysQuery{
		config:                spkq.config,
		ctx:                   spkq.ctx.Clone(),
		order:                 append([]subjectpublickeys.OrderOption{}, spkq.order...),
		inters:                append([]Interceptor{}, spkq.inters...),
		predicates:            append([]predicate.SubjectPublicKeys{}, spkq.predicates...),
		withPublicKeyScope:    spkq.withPublicKeyScope.Clone(),
		withIssuerPublicKeyID: spkq.withIssuerPublicKeyID.Clone(),
		// clone intermediate query.
		sql:  spkq.sql.Clone(),
		path: spkq.path,
	}
}

// WithPublicKeyScope tells the query-builder to eager-load the nodes that are connected to
// the "public_key_scope" edge. The optional arguments are used to configure the query builder of the edge.
func (spkq *SubjectPublicKeysQuery) WithPublicKeyScope(opts ...func(*PublicKeyScopesQuery)) *SubjectPublicKeysQuery {
	query := (&PublicKeyScopesClient{config: spkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spkq.withPublicKeyScope = query
	return spkq
}

// WithIssuerPublicKeyID tells the query-builder to eager-load the nodes that are connected to
// the "issuer_public_key_id" edge. The optional arguments are used to configure the query builder of the edge.
func (spkq *SubjectPublicKeysQuery) WithIssuerPublicKeyID(opts ...func(*IssuerPublicKeysQuery)) *SubjectPublicKeysQuery {
	query := (&IssuerPublicKeysClient{config: spkq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	spkq.withIssuerPublicKeyID = query
	return spkq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (spkq *SubjectPublicKeysQuery) GroupBy(field string, fields ...string) *SubjectPublicKeysGroupBy {
	spkq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &SubjectPublicKeysGroupBy{build: spkq}
	grbuild.flds = &spkq.ctx.Fields
	grbuild.label = subjectpublickeys.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (spkq *SubjectPublicKeysQuery) Select(fields ...string) *SubjectPublicKeysSelect {
	spkq.ctx.Fields = append(spkq.ctx.Fields, fields...)
	sbuild := &SubjectPublicKeysSelect{SubjectPublicKeysQuery: spkq}
	sbuild.label = subjectpublickeys.Label
	sbuild.flds, sbuild.scan = &spkq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a SubjectPublicKeysSelect configured with the given aggregations.
func (spkq *SubjectPublicKeysQuery) Aggregate(fns ...AggregateFunc) *SubjectPublicKeysSelect {
	return spkq.Select().Aggregate(fns...)
}

func (spkq *SubjectPublicKeysQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range spkq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, spkq); err != nil {
				return err
			}
		}
	}
	for _, f := range spkq.ctx.Fields {
		if !subjectpublickeys.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if spkq.path != nil {
		prev, err := spkq.path(ctx)
		if err != nil {
			return err
		}
		spkq.sql = prev
	}
	return nil
}

func (spkq *SubjectPublicKeysQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*SubjectPublicKeys, error) {
	var (
		nodes       = []*SubjectPublicKeys{}
		withFKs     = spkq.withFKs
		_spec       = spkq.querySpec()
		loadedTypes = [2]bool{
			spkq.withPublicKeyScope != nil,
			spkq.withIssuerPublicKeyID != nil,
		}
	)
	if spkq.withIssuerPublicKeyID != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, subjectpublickeys.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*SubjectPublicKeys).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &SubjectPublicKeys{config: spkq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, spkq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := spkq.withPublicKeyScope; query != nil {
		if err := spkq.loadPublicKeyScope(ctx, query, nodes, nil,
			func(n *SubjectPublicKeys, e *PublicKeyScopes) { n.Edges.PublicKeyScope = e }); err != nil {
			return nil, err
		}
	}
	if query := spkq.withIssuerPublicKeyID; query != nil {
		if err := spkq.loadIssuerPublicKeyID(ctx, query, nodes, nil,
			func(n *SubjectPublicKeys, e *IssuerPublicKeys) { n.Edges.IssuerPublicKeyID = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (spkq *SubjectPublicKeysQuery) loadPublicKeyScope(ctx context.Context, query *PublicKeyScopesQuery, nodes []*SubjectPublicKeys, init func(*SubjectPublicKeys), assign func(*SubjectPublicKeys, *PublicKeyScopes)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*SubjectPublicKeys)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.PublicKeyScopes(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(subjectpublickeys.PublicKeyScopeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.subject_public_keys_public_key_scope
		if fk == nil {
			return fmt.Errorf(`foreign-key "subject_public_keys_public_key_scope" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "subject_public_keys_public_key_scope" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (spkq *SubjectPublicKeysQuery) loadIssuerPublicKeyID(ctx context.Context, query *IssuerPublicKeysQuery, nodes []*SubjectPublicKeys, init func(*SubjectPublicKeys), assign func(*SubjectPublicKeys, *IssuerPublicKeys)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*SubjectPublicKeys)
	for i := range nodes {
		if nodes[i].issuer_public_keys_subject_public_key == nil {
			continue
		}
		fk := *nodes[i].issuer_public_keys_subject_public_key
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(issuerpublickeys.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "issuer_public_keys_subject_public_key" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (spkq *SubjectPublicKeysQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := spkq.querySpec()
	_spec.Node.Columns = spkq.ctx.Fields
	if len(spkq.ctx.Fields) > 0 {
		_spec.Unique = spkq.ctx.Unique != nil && *spkq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, spkq.driver, _spec)
}

func (spkq *SubjectPublicKeysQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(subjectpublickeys.Table, subjectpublickeys.Columns, sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString))
	_spec.From = spkq.sql
	if unique := spkq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if spkq.path != nil {
		_spec.Unique = true
	}
	if fields := spkq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subjectpublickeys.FieldID)
		for i := range fields {
			if fields[i] != subjectpublickeys.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := spkq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := spkq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := spkq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := spkq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (spkq *SubjectPublicKeysQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(spkq.driver.Dialect())
	t1 := builder.Table(subjectpublickeys.Table)
	columns := spkq.ctx.Fields
	if len(columns) == 0 {
		columns = subjectpublickeys.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if spkq.sql != nil {
		selector = spkq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if spkq.ctx.Unique != nil && *spkq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range spkq.predicates {
		p(selector)
	}
	for _, p := range spkq.order {
		p(selector)
	}
	if offset := spkq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := spkq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SubjectPublicKeysGroupBy is the group-by builder for SubjectPublicKeys entities.
type SubjectPublicKeysGroupBy struct {
	selector
	build *SubjectPublicKeysQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (spkgb *SubjectPublicKeysGroupBy) Aggregate(fns ...AggregateFunc) *SubjectPublicKeysGroupBy {
	spkgb.fns = append(spkgb.fns, fns...)
	return spkgb
}

// Scan applies the selector query and scans the result into the given value.
func (spkgb *SubjectPublicKeysGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spkgb.build.ctx, "GroupBy")
	if err := spkgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubjectPublicKeysQuery, *SubjectPublicKeysGroupBy](ctx, spkgb.build, spkgb, spkgb.build.inters, v)
}

func (spkgb *SubjectPublicKeysGroupBy) sqlScan(ctx context.Context, root *SubjectPublicKeysQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(spkgb.fns))
	for _, fn := range spkgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*spkgb.flds)+len(spkgb.fns))
		for _, f := range *spkgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*spkgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spkgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// SubjectPublicKeysSelect is the builder for selecting fields of SubjectPublicKeys entities.
type SubjectPublicKeysSelect struct {
	*SubjectPublicKeysQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (spks *SubjectPublicKeysSelect) Aggregate(fns ...AggregateFunc) *SubjectPublicKeysSelect {
	spks.fns = append(spks.fns, fns...)
	return spks
}

// Scan applies the selector query and scans the result into the given value.
func (spks *SubjectPublicKeysSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, spks.ctx, "Select")
	if err := spks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*SubjectPublicKeysQuery, *SubjectPublicKeysSelect](ctx, spks.SubjectPublicKeysQuery, spks, spks.inters, v)
}

func (spks *SubjectPublicKeysSelect) sqlScan(ctx context.Context, root *SubjectPublicKeysQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(spks.fns))
	for _, fn := range spks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*spks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := spks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
