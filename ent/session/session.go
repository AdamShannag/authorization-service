// Code generated by ent, DO NOT EDIT.

package session

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the session type in the database.
	Label = "session"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldSubject holds the string denoting the subject field in the database.
	FieldSubject = "subject"
	// FieldExtra holds the string denoting the extra field in the database.
	FieldExtra = "extra"
	// FieldSession holds the string denoting the session field in the database.
	FieldSession = "session"
	// EdgeAccessToken holds the string denoting the access_token edge name in mutations.
	EdgeAccessToken = "access_token"
	// EdgeAuthorizeCode holds the string denoting the authorize_code edge name in mutations.
	EdgeAuthorizeCode = "authorize_code"
	// EdgeRefreshToken holds the string denoting the refresh_token edge name in mutations.
	EdgeRefreshToken = "refresh_token"
	// EdgeIDSession holds the string denoting the id_session edge name in mutations.
	EdgeIDSession = "id_session"
	// EdgePkce holds the string denoting the pkce edge name in mutations.
	EdgePkce = "pkce"
	// Table holds the table name of the session in the database.
	Table = "sessions"
	// AccessTokenTable is the table that holds the access_token relation/edge.
	AccessTokenTable = "access_tokens"
	// AccessTokenInverseTable is the table name for the AccessTokens entity.
	// It exists in this package in order to avoid circular dependency with the "accesstokens" package.
	AccessTokenInverseTable = "access_tokens"
	// AccessTokenColumn is the table column denoting the access_token relation/edge.
	AccessTokenColumn = "session_access_token"
	// AuthorizeCodeTable is the table that holds the authorize_code relation/edge.
	AuthorizeCodeTable = "authorize_codes"
	// AuthorizeCodeInverseTable is the table name for the AuthorizeCodes entity.
	// It exists in this package in order to avoid circular dependency with the "authorizecodes" package.
	AuthorizeCodeInverseTable = "authorize_codes"
	// AuthorizeCodeColumn is the table column denoting the authorize_code relation/edge.
	AuthorizeCodeColumn = "session_authorize_code"
	// RefreshTokenTable is the table that holds the refresh_token relation/edge.
	RefreshTokenTable = "refresh_tokens"
	// RefreshTokenInverseTable is the table name for the RefreshTokens entity.
	// It exists in this package in order to avoid circular dependency with the "refreshtokens" package.
	RefreshTokenInverseTable = "refresh_tokens"
	// RefreshTokenColumn is the table column denoting the refresh_token relation/edge.
	RefreshTokenColumn = "session_refresh_token"
	// IDSessionTable is the table that holds the id_session relation/edge.
	IDSessionTable = "id_sessions"
	// IDSessionInverseTable is the table name for the IDSessions entity.
	// It exists in this package in order to avoid circular dependency with the "idsessions" package.
	IDSessionInverseTable = "id_sessions"
	// IDSessionColumn is the table column denoting the id_session relation/edge.
	IDSessionColumn = "session_id_session"
	// PkceTable is the table that holds the pkce relation/edge.
	PkceTable = "pkce_ss"
	// PkceInverseTable is the table name for the PKCES entity.
	// It exists in this package in order to avoid circular dependency with the "pkces" package.
	PkceInverseTable = "pkce_ss"
	// PkceColumn is the table column denoting the pkce relation/edge.
	PkceColumn = "session_pkce"
)

// Columns holds all SQL columns for session fields.
var Columns = []string{
	FieldID,
	FieldExpiresAt,
	FieldUsername,
	FieldSubject,
	FieldExtra,
	FieldSession,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Session queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// BySubject orders the results by the subject field.
func BySubject(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubject, opts...).ToFunc()
}

// ByAccessTokenCount orders the results by access_token count.
func ByAccessTokenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAccessTokenStep(), opts...)
	}
}

// ByAccessToken orders the results by access_token terms.
func ByAccessToken(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAccessTokenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAuthorizeCodeCount orders the results by authorize_code count.
func ByAuthorizeCodeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAuthorizeCodeStep(), opts...)
	}
}

// ByAuthorizeCode orders the results by authorize_code terms.
func ByAuthorizeCode(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorizeCodeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRefreshTokenCount orders the results by refresh_token count.
func ByRefreshTokenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRefreshTokenStep(), opts...)
	}
}

// ByRefreshToken orders the results by refresh_token terms.
func ByRefreshToken(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRefreshTokenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIDSessionCount orders the results by id_session count.
func ByIDSessionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIDSessionStep(), opts...)
	}
}

// ByIDSession orders the results by id_session terms.
func ByIDSession(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIDSessionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPkceCount orders the results by pkce count.
func ByPkceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPkceStep(), opts...)
	}
}

// ByPkce orders the results by pkce terms.
func ByPkce(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPkceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAccessTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AccessTokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AccessTokenTable, AccessTokenColumn),
	)
}
func newAuthorizeCodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorizeCodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AuthorizeCodeTable, AuthorizeCodeColumn),
	)
}
func newRefreshTokenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RefreshTokenInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RefreshTokenTable, RefreshTokenColumn),
	)
}
func newIDSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IDSessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IDSessionTable, IDSessionColumn),
	)
}
func newPkceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PkceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PkceTable, PkceColumn),
	)
}
