// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/pkces"
	"authorization-service/ent/request"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PKCES is the model entity for the PKCES schema.
type PKCES struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PKCESQuery when eager-loading is set.
	Edges        PKCESEdges `json:"edges"`
	request_pkce *string
	selectValues sql.SelectValues
}

// PKCESEdges holds the relations/edges for other nodes in the graph.
type PKCESEdges struct {
	// RequestID holds the value of the request_id edge.
	RequestID *Request `json:"request_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequestIDOrErr returns the RequestID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PKCESEdges) RequestIDOrErr() (*Request, error) {
	if e.loadedTypes[0] {
		if e.RequestID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: request.Label}
		}
		return e.RequestID, nil
	}
	return nil, &NotLoadedError{edge: "request_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PKCES) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pkces.FieldID:
			values[i] = new(sql.NullString)
		case pkces.ForeignKeys[0]: // request_pkce
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PKCES fields.
func (pk *PKCES) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pkces.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pk.ID = value.String
			}
		case pkces.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_pkce", values[i])
			} else if value.Valid {
				pk.request_pkce = new(string)
				*pk.request_pkce = value.String
			}
		default:
			pk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PKCES.
// This includes values selected through modifiers, order, etc.
func (pk *PKCES) Value(name string) (ent.Value, error) {
	return pk.selectValues.Get(name)
}

// QueryRequestID queries the "request_id" edge of the PKCES entity.
func (pk *PKCES) QueryRequestID() *RequestQuery {
	return NewPKCESClient(pk.config).QueryRequestID(pk)
}

// Update returns a builder for updating this PKCES.
// Note that you need to call PKCES.Unwrap() before calling this method if this PKCES
// was returned from a transaction, and the transaction was committed or rolled back.
func (pk *PKCES) Update() *PKCESUpdateOne {
	return NewPKCESClient(pk.config).UpdateOne(pk)
}

// Unwrap unwraps the PKCES entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pk *PKCES) Unwrap() *PKCES {
	_tx, ok := pk.config.driver.(*txDriver)
	if !ok {
		panic("ent: PKCES is not a transactional entity")
	}
	pk.config.driver = _tx.drv
	return pk
}

// String implements the fmt.Stringer.
func (pk *PKCES) String() string {
	var builder strings.Builder
	builder.WriteString("PKCES(")
	builder.WriteString(fmt.Sprintf("id=%v", pk.ID))
	builder.WriteByte(')')
	return builder.String()
}

// PKCESs is a parsable slice of PKCES.
type PKCESs []*PKCES
