// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/blacklistedjtis"
	"authorization-service/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BlacklistedJTIsDelete is the builder for deleting a BlacklistedJTIs entity.
type BlacklistedJTIsDelete struct {
	config
	hooks    []Hook
	mutation *BlacklistedJTIsMutation
}

// Where appends a list predicates to the BlacklistedJTIsDelete builder.
func (bjid *BlacklistedJTIsDelete) Where(ps ...predicate.BlacklistedJTIs) *BlacklistedJTIsDelete {
	bjid.mutation.Where(ps...)
	return bjid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (bjid *BlacklistedJTIsDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, bjid.sqlExec, bjid.mutation, bjid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (bjid *BlacklistedJTIsDelete) ExecX(ctx context.Context) int {
	n, err := bjid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (bjid *BlacklistedJTIsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(blacklistedjtis.Table, sqlgraph.NewFieldSpec(blacklistedjtis.FieldID, field.TypeString))
	if ps := bjid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, bjid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	bjid.mutation.done = true
	return affected, err
}

// BlacklistedJTIsDeleteOne is the builder for deleting a single BlacklistedJTIs entity.
type BlacklistedJTIsDeleteOne struct {
	bjid *BlacklistedJTIsDelete
}

// Where appends a list predicates to the BlacklistedJTIsDelete builder.
func (bjido *BlacklistedJTIsDeleteOne) Where(ps ...predicate.BlacklistedJTIs) *BlacklistedJTIsDeleteOne {
	bjido.bjid.mutation.Where(ps...)
	return bjido
}

// Exec executes the deletion query.
func (bjido *BlacklistedJTIsDeleteOne) Exec(ctx context.Context) error {
	n, err := bjido.bjid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{blacklistedjtis.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (bjido *BlacklistedJTIsDeleteOne) ExecX(ctx context.Context) {
	if err := bjido.Exec(ctx); err != nil {
		panic(err)
	}
}
