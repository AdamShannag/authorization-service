// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccessTokensColumns holds the columns for the "access_tokens" table.
	AccessTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "request_access_token", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// AccessTokensTable holds the schema information for the "access_tokens" table.
	AccessTokensTable = &schema.Table{
		Name:       "access_tokens",
		Columns:    AccessTokensColumns,
		PrimaryKey: []*schema.Column{AccessTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "access_tokens_requests_access_token",
				Columns:    []*schema.Column{AccessTokensColumns[1]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AuthorizeCodesColumns holds the columns for the "authorize_codes" table.
	AuthorizeCodesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "active", Type: field.TypeBool},
		{Name: "request_authorize_code", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// AuthorizeCodesTable holds the schema information for the "authorize_codes" table.
	AuthorizeCodesTable = &schema.Table{
		Name:       "authorize_codes",
		Columns:    AuthorizeCodesColumns,
		PrimaryKey: []*schema.Column{AuthorizeCodesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "authorize_codes_requests_authorize_code",
				Columns:    []*schema.Column{AuthorizeCodesColumns[2]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// BlacklistedJtIsColumns holds the columns for the "blacklisted_jt_is" table.
	BlacklistedJtIsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "expiry", Type: field.TypeTime},
	}
	// BlacklistedJtIsTable holds the schema information for the "blacklisted_jt_is" table.
	BlacklistedJtIsTable = &schema.Table{
		Name:       "blacklisted_jt_is",
		Columns:    BlacklistedJtIsColumns,
		PrimaryKey: []*schema.Column{BlacklistedJtIsColumns[0]},
	}
	// ClientsColumns holds the columns for the "clients" table.
	ClientsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "client_secret", Type: field.TypeBytes},
		{Name: "rotated_secrets", Type: field.TypeJSON},
		{Name: "redirect_uris", Type: field.TypeJSON},
		{Name: "grant_types", Type: field.TypeJSON},
		{Name: "response_types", Type: field.TypeJSON},
		{Name: "scopes", Type: field.TypeJSON},
		{Name: "audience", Type: field.TypeJSON, Nullable: true},
		{Name: "public", Type: field.TypeBool, Nullable: true},
	}
	// ClientsTable holds the schema information for the "clients" table.
	ClientsTable = &schema.Table{
		Name:       "clients",
		Columns:    ClientsColumns,
		PrimaryKey: []*schema.Column{ClientsColumns[0]},
	}
	// IDSessionsColumns holds the columns for the "id_sessions" table.
	IDSessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "request_id_session", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// IDSessionsTable holds the schema information for the "id_sessions" table.
	IDSessionsTable = &schema.Table{
		Name:       "id_sessions",
		Columns:    IDSessionsColumns,
		PrimaryKey: []*schema.Column{IDSessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "id_sessions_requests_id_session",
				Columns:    []*schema.Column{IDSessionsColumns[1]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IssuerPublicKeysColumns holds the columns for the "issuer_public_keys" table.
	IssuerPublicKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
	}
	// IssuerPublicKeysTable holds the schema information for the "issuer_public_keys" table.
	IssuerPublicKeysTable = &schema.Table{
		Name:       "issuer_public_keys",
		Columns:    IssuerPublicKeysColumns,
		PrimaryKey: []*schema.Column{IssuerPublicKeysColumns[0]},
	}
	// PkceSsColumns holds the columns for the "pkce_ss" table.
	PkceSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "request_pkce", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// PkceSsTable holds the schema information for the "pkce_ss" table.
	PkceSsTable = &schema.Table{
		Name:       "pkce_ss",
		Columns:    PkceSsColumns,
		PrimaryKey: []*schema.Column{PkceSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "pkce_ss_requests_pkce",
				Columns:    []*schema.Column{PkceSsColumns[1]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PublicKeyScopesColumns holds the columns for the "public_key_scopes" table.
	PublicKeyScopesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "json_web_key", Type: field.TypeJSON},
		{Name: "scopes", Type: field.TypeJSON},
		{Name: "subject_public_keys_public_key_scope", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// PublicKeyScopesTable holds the schema information for the "public_key_scopes" table.
	PublicKeyScopesTable = &schema.Table{
		Name:       "public_key_scopes",
		Columns:    PublicKeyScopesColumns,
		PrimaryKey: []*schema.Column{PublicKeyScopesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "public_key_scopes_subject_public_keys_public_key_scope",
				Columns:    []*schema.Column{PublicKeyScopesColumns[3]},
				RefColumns: []*schema.Column{SubjectPublicKeysColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RefreshTokensColumns holds the columns for the "refresh_tokens" table.
	RefreshTokensColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "active", Type: field.TypeBool},
		{Name: "request_refresh_token", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// RefreshTokensTable holds the schema information for the "refresh_tokens" table.
	RefreshTokensTable = &schema.Table{
		Name:       "refresh_tokens",
		Columns:    RefreshTokensColumns,
		PrimaryKey: []*schema.Column{RefreshTokensColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "refresh_tokens_requests_refresh_token",
				Columns:    []*schema.Column{RefreshTokensColumns[2]},
				RefColumns: []*schema.Column{RequestsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RequestsColumns holds the columns for the "requests" table.
	RequestsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "requested_at", Type: field.TypeTime},
		{Name: "scopes", Type: field.TypeJSON},
		{Name: "granted_scopes", Type: field.TypeJSON},
		{Name: "requested_audience", Type: field.TypeJSON},
		{Name: "granted_audience", Type: field.TypeJSON},
		{Name: "form", Type: field.TypeJSON},
		{Name: "lang", Type: field.TypeJSON, Nullable: true},
		{Name: "clients_requests", Type: field.TypeString, Nullable: true},
		{Name: "session_requests", Type: field.TypeString, Nullable: true},
	}
	// RequestsTable holds the schema information for the "requests" table.
	RequestsTable = &schema.Table{
		Name:       "requests",
		Columns:    RequestsColumns,
		PrimaryKey: []*schema.Column{RequestsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "requests_clients_requests",
				Columns:    []*schema.Column{RequestsColumns[8]},
				RefColumns: []*schema.Column{ClientsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "requests_sessions_requests",
				Columns:    []*schema.Column{RequestsColumns[9]},
				RefColumns: []*schema.Column{SessionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "expires_at", Type: field.TypeJSON},
		{Name: "username", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "extra", Type: field.TypeJSON, Nullable: true},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
	}
	// SubjectPublicKeysColumns holds the columns for the "subject_public_keys" table.
	SubjectPublicKeysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "issuer_public_keys_subject_public_key", Type: field.TypeString, Unique: true, Nullable: true},
	}
	// SubjectPublicKeysTable holds the schema information for the "subject_public_keys" table.
	SubjectPublicKeysTable = &schema.Table{
		Name:       "subject_public_keys",
		Columns:    SubjectPublicKeysColumns,
		PrimaryKey: []*schema.Column{SubjectPublicKeysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "subject_public_keys_issuer_public_keys_subject_public_key",
				Columns:    []*schema.Column{SubjectPublicKeysColumns[1]},
				RefColumns: []*schema.Column{IssuerPublicKeysColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccessTokensTable,
		AuthorizeCodesTable,
		BlacklistedJtIsTable,
		ClientsTable,
		IDSessionsTable,
		IssuerPublicKeysTable,
		PkceSsTable,
		PublicKeyScopesTable,
		RefreshTokensTable,
		RequestsTable,
		SessionsTable,
		SubjectPublicKeysTable,
		UsersTable,
	}
)

func init() {
	AccessTokensTable.ForeignKeys[0].RefTable = RequestsTable
	AuthorizeCodesTable.ForeignKeys[0].RefTable = RequestsTable
	IDSessionsTable.ForeignKeys[0].RefTable = RequestsTable
	PkceSsTable.ForeignKeys[0].RefTable = RequestsTable
	PublicKeyScopesTable.ForeignKeys[0].RefTable = SubjectPublicKeysTable
	RefreshTokensTable.ForeignKeys[0].RefTable = RequestsTable
	RequestsTable.ForeignKeys[0].RefTable = ClientsTable
	RequestsTable.ForeignKeys[1].RefTable = SessionsTable
	SubjectPublicKeysTable.ForeignKeys[0].RefTable = IssuerPublicKeysTable
}
