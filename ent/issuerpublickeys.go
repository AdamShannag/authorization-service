// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/subjectpublickeys"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// IssuerPublicKeys is the model entity for the IssuerPublicKeys schema.
type IssuerPublicKeys struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IssuerPublicKeysQuery when eager-loading is set.
	Edges        IssuerPublicKeysEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IssuerPublicKeysEdges holds the relations/edges for other nodes in the graph.
type IssuerPublicKeysEdges struct {
	// SubjectPublicKey holds the value of the subject_public_key edge.
	SubjectPublicKey *SubjectPublicKeys `json:"subject_public_key,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubjectPublicKeyOrErr returns the SubjectPublicKey value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IssuerPublicKeysEdges) SubjectPublicKeyOrErr() (*SubjectPublicKeys, error) {
	if e.loadedTypes[0] {
		if e.SubjectPublicKey == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subjectpublickeys.Label}
		}
		return e.SubjectPublicKey, nil
	}
	return nil, &NotLoadedError{edge: "subject_public_key"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IssuerPublicKeys) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case issuerpublickeys.FieldID:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IssuerPublicKeys fields.
func (ipk *IssuerPublicKeys) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case issuerpublickeys.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ipk.ID = value.String
			}
		default:
			ipk.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IssuerPublicKeys.
// This includes values selected through modifiers, order, etc.
func (ipk *IssuerPublicKeys) Value(name string) (ent.Value, error) {
	return ipk.selectValues.Get(name)
}

// QuerySubjectPublicKey queries the "subject_public_key" edge of the IssuerPublicKeys entity.
func (ipk *IssuerPublicKeys) QuerySubjectPublicKey() *SubjectPublicKeysQuery {
	return NewIssuerPublicKeysClient(ipk.config).QuerySubjectPublicKey(ipk)
}

// Update returns a builder for updating this IssuerPublicKeys.
// Note that you need to call IssuerPublicKeys.Unwrap() before calling this method if this IssuerPublicKeys
// was returned from a transaction, and the transaction was committed or rolled back.
func (ipk *IssuerPublicKeys) Update() *IssuerPublicKeysUpdateOne {
	return NewIssuerPublicKeysClient(ipk.config).UpdateOne(ipk)
}

// Unwrap unwraps the IssuerPublicKeys entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ipk *IssuerPublicKeys) Unwrap() *IssuerPublicKeys {
	_tx, ok := ipk.config.driver.(*txDriver)
	if !ok {
		panic("ent: IssuerPublicKeys is not a transactional entity")
	}
	ipk.config.driver = _tx.drv
	return ipk
}

// String implements the fmt.Stringer.
func (ipk *IssuerPublicKeys) String() string {
	var builder strings.Builder
	builder.WriteString("IssuerPublicKeys(")
	builder.WriteString(fmt.Sprintf("id=%v", ipk.ID))
	builder.WriteByte(')')
	return builder.String()
}

// IssuerPublicKeysSlice is a parsable slice of IssuerPublicKeys.
type IssuerPublicKeysSlice []*IssuerPublicKeys
