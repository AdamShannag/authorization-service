// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/clients"
	"authorization-service/ent/predicate"
	"authorization-service/ent/refreshtokens"
	"authorization-service/ent/session"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RefreshTokensQuery is the builder for querying RefreshTokens entities.
type RefreshTokensQuery struct {
	config
	ctx           *QueryContext
	order         []refreshtokens.OrderOption
	inters        []Interceptor
	predicates    []predicate.RefreshTokens
	withClientID  *ClientsQuery
	withSessionID *SessionQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the RefreshTokensQuery builder.
func (rtq *RefreshTokensQuery) Where(ps ...predicate.RefreshTokens) *RefreshTokensQuery {
	rtq.predicates = append(rtq.predicates, ps...)
	return rtq
}

// Limit the number of records to be returned by this query.
func (rtq *RefreshTokensQuery) Limit(limit int) *RefreshTokensQuery {
	rtq.ctx.Limit = &limit
	return rtq
}

// Offset to start from.
func (rtq *RefreshTokensQuery) Offset(offset int) *RefreshTokensQuery {
	rtq.ctx.Offset = &offset
	return rtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (rtq *RefreshTokensQuery) Unique(unique bool) *RefreshTokensQuery {
	rtq.ctx.Unique = &unique
	return rtq
}

// Order specifies how the records should be ordered.
func (rtq *RefreshTokensQuery) Order(o ...refreshtokens.OrderOption) *RefreshTokensQuery {
	rtq.order = append(rtq.order, o...)
	return rtq
}

// QueryClientID chains the current query on the "client_id" edge.
func (rtq *RefreshTokensQuery) QueryClientID() *ClientsQuery {
	query := (&ClientsClient{config: rtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(refreshtokens.Table, refreshtokens.FieldID, selector),
			sqlgraph.To(clients.Table, clients.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, refreshtokens.ClientIDTable, refreshtokens.ClientIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessionID chains the current query on the "session_id" edge.
func (rtq *RefreshTokensQuery) QuerySessionID() *SessionQuery {
	query := (&SessionClient{config: rtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := rtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := rtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(refreshtokens.Table, refreshtokens.FieldID, selector),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, refreshtokens.SessionIDTable, refreshtokens.SessionIDColumn),
		)
		fromU = sqlgraph.SetNeighbors(rtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first RefreshTokens entity from the query.
// Returns a *NotFoundError when no RefreshTokens was found.
func (rtq *RefreshTokensQuery) First(ctx context.Context) (*RefreshTokens, error) {
	nodes, err := rtq.Limit(1).All(setContextOp(ctx, rtq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{refreshtokens.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (rtq *RefreshTokensQuery) FirstX(ctx context.Context) *RefreshTokens {
	node, err := rtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first RefreshTokens ID from the query.
// Returns a *NotFoundError when no RefreshTokens ID was found.
func (rtq *RefreshTokensQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rtq.Limit(1).IDs(setContextOp(ctx, rtq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{refreshtokens.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (rtq *RefreshTokensQuery) FirstIDX(ctx context.Context) string {
	id, err := rtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single RefreshTokens entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one RefreshTokens entity is found.
// Returns a *NotFoundError when no RefreshTokens entities are found.
func (rtq *RefreshTokensQuery) Only(ctx context.Context) (*RefreshTokens, error) {
	nodes, err := rtq.Limit(2).All(setContextOp(ctx, rtq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{refreshtokens.Label}
	default:
		return nil, &NotSingularError{refreshtokens.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (rtq *RefreshTokensQuery) OnlyX(ctx context.Context) *RefreshTokens {
	node, err := rtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only RefreshTokens ID in the query.
// Returns a *NotSingularError when more than one RefreshTokens ID is found.
// Returns a *NotFoundError when no entities are found.
func (rtq *RefreshTokensQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = rtq.Limit(2).IDs(setContextOp(ctx, rtq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{refreshtokens.Label}
	default:
		err = &NotSingularError{refreshtokens.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (rtq *RefreshTokensQuery) OnlyIDX(ctx context.Context) string {
	id, err := rtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of RefreshTokensSlice.
func (rtq *RefreshTokensQuery) All(ctx context.Context) ([]*RefreshTokens, error) {
	ctx = setContextOp(ctx, rtq.ctx, "All")
	if err := rtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*RefreshTokens, *RefreshTokensQuery]()
	return withInterceptors[[]*RefreshTokens](ctx, rtq, qr, rtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (rtq *RefreshTokensQuery) AllX(ctx context.Context) []*RefreshTokens {
	nodes, err := rtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of RefreshTokens IDs.
func (rtq *RefreshTokensQuery) IDs(ctx context.Context) (ids []string, err error) {
	if rtq.ctx.Unique == nil && rtq.path != nil {
		rtq.Unique(true)
	}
	ctx = setContextOp(ctx, rtq.ctx, "IDs")
	if err = rtq.Select(refreshtokens.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (rtq *RefreshTokensQuery) IDsX(ctx context.Context) []string {
	ids, err := rtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (rtq *RefreshTokensQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, rtq.ctx, "Count")
	if err := rtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, rtq, querierCount[*RefreshTokensQuery](), rtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (rtq *RefreshTokensQuery) CountX(ctx context.Context) int {
	count, err := rtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (rtq *RefreshTokensQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, rtq.ctx, "Exist")
	switch _, err := rtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (rtq *RefreshTokensQuery) ExistX(ctx context.Context) bool {
	exist, err := rtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the RefreshTokensQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (rtq *RefreshTokensQuery) Clone() *RefreshTokensQuery {
	if rtq == nil {
		return nil
	}
	return &RefreshTokensQuery{
		config:        rtq.config,
		ctx:           rtq.ctx.Clone(),
		order:         append([]refreshtokens.OrderOption{}, rtq.order...),
		inters:        append([]Interceptor{}, rtq.inters...),
		predicates:    append([]predicate.RefreshTokens{}, rtq.predicates...),
		withClientID:  rtq.withClientID.Clone(),
		withSessionID: rtq.withSessionID.Clone(),
		// clone intermediate query.
		sql:  rtq.sql.Clone(),
		path: rtq.path,
	}
}

// WithClientID tells the query-builder to eager-load the nodes that are connected to
// the "client_id" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RefreshTokensQuery) WithClientID(opts ...func(*ClientsQuery)) *RefreshTokensQuery {
	query := (&ClientsClient{config: rtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rtq.withClientID = query
	return rtq
}

// WithSessionID tells the query-builder to eager-load the nodes that are connected to
// the "session_id" edge. The optional arguments are used to configure the query builder of the edge.
func (rtq *RefreshTokensQuery) WithSessionID(opts ...func(*SessionQuery)) *RefreshTokensQuery {
	query := (&SessionClient{config: rtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	rtq.withSessionID = query
	return rtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		RequestID string `json:"request_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.RefreshTokens.Query().
//		GroupBy(refreshtokens.FieldRequestID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (rtq *RefreshTokensQuery) GroupBy(field string, fields ...string) *RefreshTokensGroupBy {
	rtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &RefreshTokensGroupBy{build: rtq}
	grbuild.flds = &rtq.ctx.Fields
	grbuild.label = refreshtokens.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		RequestID string `json:"request_id,omitempty"`
//	}
//
//	client.RefreshTokens.Query().
//		Select(refreshtokens.FieldRequestID).
//		Scan(ctx, &v)
func (rtq *RefreshTokensQuery) Select(fields ...string) *RefreshTokensSelect {
	rtq.ctx.Fields = append(rtq.ctx.Fields, fields...)
	sbuild := &RefreshTokensSelect{RefreshTokensQuery: rtq}
	sbuild.label = refreshtokens.Label
	sbuild.flds, sbuild.scan = &rtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a RefreshTokensSelect configured with the given aggregations.
func (rtq *RefreshTokensQuery) Aggregate(fns ...AggregateFunc) *RefreshTokensSelect {
	return rtq.Select().Aggregate(fns...)
}

func (rtq *RefreshTokensQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range rtq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, rtq); err != nil {
				return err
			}
		}
	}
	for _, f := range rtq.ctx.Fields {
		if !refreshtokens.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if rtq.path != nil {
		prev, err := rtq.path(ctx)
		if err != nil {
			return err
		}
		rtq.sql = prev
	}
	return nil
}

func (rtq *RefreshTokensQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*RefreshTokens, error) {
	var (
		nodes       = []*RefreshTokens{}
		withFKs     = rtq.withFKs
		_spec       = rtq.querySpec()
		loadedTypes = [2]bool{
			rtq.withClientID != nil,
			rtq.withSessionID != nil,
		}
	)
	if rtq.withClientID != nil || rtq.withSessionID != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, refreshtokens.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*RefreshTokens).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &RefreshTokens{config: rtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, rtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := rtq.withClientID; query != nil {
		if err := rtq.loadClientID(ctx, query, nodes, nil,
			func(n *RefreshTokens, e *Clients) { n.Edges.ClientID = e }); err != nil {
			return nil, err
		}
	}
	if query := rtq.withSessionID; query != nil {
		if err := rtq.loadSessionID(ctx, query, nodes, nil,
			func(n *RefreshTokens, e *Session) { n.Edges.SessionID = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (rtq *RefreshTokensQuery) loadClientID(ctx context.Context, query *ClientsQuery, nodes []*RefreshTokens, init func(*RefreshTokens), assign func(*RefreshTokens, *Clients)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*RefreshTokens)
	for i := range nodes {
		if nodes[i].clients_refresh_token == nil {
			continue
		}
		fk := *nodes[i].clients_refresh_token
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(clients.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "clients_refresh_token" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (rtq *RefreshTokensQuery) loadSessionID(ctx context.Context, query *SessionQuery, nodes []*RefreshTokens, init func(*RefreshTokens), assign func(*RefreshTokens, *Session)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*RefreshTokens)
	for i := range nodes {
		if nodes[i].session_refresh_token == nil {
			continue
		}
		fk := *nodes[i].session_refresh_token
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(session.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "session_refresh_token" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (rtq *RefreshTokensQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := rtq.querySpec()
	_spec.Node.Columns = rtq.ctx.Fields
	if len(rtq.ctx.Fields) > 0 {
		_spec.Unique = rtq.ctx.Unique != nil && *rtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, rtq.driver, _spec)
}

func (rtq *RefreshTokensQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(refreshtokens.Table, refreshtokens.Columns, sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString))
	_spec.From = rtq.sql
	if unique := rtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if rtq.path != nil {
		_spec.Unique = true
	}
	if fields := rtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refreshtokens.FieldID)
		for i := range fields {
			if fields[i] != refreshtokens.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := rtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := rtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := rtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := rtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (rtq *RefreshTokensQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(rtq.driver.Dialect())
	t1 := builder.Table(refreshtokens.Table)
	columns := rtq.ctx.Fields
	if len(columns) == 0 {
		columns = refreshtokens.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if rtq.sql != nil {
		selector = rtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if rtq.ctx.Unique != nil && *rtq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range rtq.predicates {
		p(selector)
	}
	for _, p := range rtq.order {
		p(selector)
	}
	if offset := rtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := rtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// RefreshTokensGroupBy is the group-by builder for RefreshTokens entities.
type RefreshTokensGroupBy struct {
	selector
	build *RefreshTokensQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (rtgb *RefreshTokensGroupBy) Aggregate(fns ...AggregateFunc) *RefreshTokensGroupBy {
	rtgb.fns = append(rtgb.fns, fns...)
	return rtgb
}

// Scan applies the selector query and scans the result into the given value.
func (rtgb *RefreshTokensGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rtgb.build.ctx, "GroupBy")
	if err := rtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RefreshTokensQuery, *RefreshTokensGroupBy](ctx, rtgb.build, rtgb, rtgb.build.inters, v)
}

func (rtgb *RefreshTokensGroupBy) sqlScan(ctx context.Context, root *RefreshTokensQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(rtgb.fns))
	for _, fn := range rtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*rtgb.flds)+len(rtgb.fns))
		for _, f := range *rtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*rtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// RefreshTokensSelect is the builder for selecting fields of RefreshTokens entities.
type RefreshTokensSelect struct {
	*RefreshTokensQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (rts *RefreshTokensSelect) Aggregate(fns ...AggregateFunc) *RefreshTokensSelect {
	rts.fns = append(rts.fns, fns...)
	return rts
}

// Scan applies the selector query and scans the result into the given value.
func (rts *RefreshTokensSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, rts.ctx, "Select")
	if err := rts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*RefreshTokensQuery, *RefreshTokensSelect](ctx, rts.RefreshTokensQuery, rts, rts.inters, v)
}

func (rts *RefreshTokensSelect) sqlScan(ctx context.Context, root *RefreshTokensQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(rts.fns))
	for _, fn := range rts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*rts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := rts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
