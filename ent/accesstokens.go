// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/accesstokens"
	"authorization-service/ent/request"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AccessTokens is the model entity for the AccessTokens schema.
type AccessTokens struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AccessTokensQuery when eager-loading is set.
	Edges                AccessTokensEdges `json:"edges"`
	request_access_token *string
	selectValues         sql.SelectValues
}

// AccessTokensEdges holds the relations/edges for other nodes in the graph.
type AccessTokensEdges struct {
	// RequestID holds the value of the request_id edge.
	RequestID *Request `json:"request_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RequestIDOrErr returns the RequestID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AccessTokensEdges) RequestIDOrErr() (*Request, error) {
	if e.loadedTypes[0] {
		if e.RequestID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: request.Label}
		}
		return e.RequestID, nil
	}
	return nil, &NotLoadedError{edge: "request_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AccessTokens) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accesstokens.FieldID:
			values[i] = new(sql.NullString)
		case accesstokens.ForeignKeys[0]: // request_access_token
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AccessTokens fields.
func (at *AccessTokens) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accesstokens.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				at.ID = value.String
			}
		case accesstokens.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_access_token", values[i])
			} else if value.Valid {
				at.request_access_token = new(string)
				*at.request_access_token = value.String
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AccessTokens.
// This includes values selected through modifiers, order, etc.
func (at *AccessTokens) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// QueryRequestID queries the "request_id" edge of the AccessTokens entity.
func (at *AccessTokens) QueryRequestID() *RequestQuery {
	return NewAccessTokensClient(at.config).QueryRequestID(at)
}

// Update returns a builder for updating this AccessTokens.
// Note that you need to call AccessTokens.Unwrap() before calling this method if this AccessTokens
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AccessTokens) Update() *AccessTokensUpdateOne {
	return NewAccessTokensClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AccessTokens entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AccessTokens) Unwrap() *AccessTokens {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AccessTokens is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AccessTokens) String() string {
	var builder strings.Builder
	builder.WriteString("AccessTokens(")
	builder.WriteString(fmt.Sprintf("id=%v", at.ID))
	builder.WriteByte(')')
	return builder.String()
}

// AccessTokensSlice is a parsable slice of AccessTokens.
type AccessTokensSlice []*AccessTokens
