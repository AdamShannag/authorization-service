// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/accesstokens"
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/clients"
	"authorization-service/ent/idsessions"
	"authorization-service/ent/pkces"
	"authorization-service/ent/predicate"
	"authorization-service/ent/refreshtokens"
	"authorization-service/ent/request"
	"authorization-service/ent/session"
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"golang.org/x/text/language"
)

// RequestUpdate is the builder for updating Request entities.
type RequestUpdate struct {
	config
	hooks    []Hook
	mutation *RequestMutation
}

// Where appends a list predicates to the RequestUpdate builder.
func (ru *RequestUpdate) Where(ps ...predicate.Request) *RequestUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRequestedAt sets the "requestedAt" field.
func (ru *RequestUpdate) SetRequestedAt(t time.Time) *RequestUpdate {
	ru.mutation.SetRequestedAt(t)
	return ru
}

// SetScopes sets the "scopes" field.
func (ru *RequestUpdate) SetScopes(s []string) *RequestUpdate {
	ru.mutation.SetScopes(s)
	return ru
}

// AppendScopes appends s to the "scopes" field.
func (ru *RequestUpdate) AppendScopes(s []string) *RequestUpdate {
	ru.mutation.AppendScopes(s)
	return ru
}

// SetGrantedScopes sets the "granted_scopes" field.
func (ru *RequestUpdate) SetGrantedScopes(s []string) *RequestUpdate {
	ru.mutation.SetGrantedScopes(s)
	return ru
}

// AppendGrantedScopes appends s to the "granted_scopes" field.
func (ru *RequestUpdate) AppendGrantedScopes(s []string) *RequestUpdate {
	ru.mutation.AppendGrantedScopes(s)
	return ru
}

// SetRequestedAudience sets the "requested_audience" field.
func (ru *RequestUpdate) SetRequestedAudience(s []string) *RequestUpdate {
	ru.mutation.SetRequestedAudience(s)
	return ru
}

// AppendRequestedAudience appends s to the "requested_audience" field.
func (ru *RequestUpdate) AppendRequestedAudience(s []string) *RequestUpdate {
	ru.mutation.AppendRequestedAudience(s)
	return ru
}

// SetGrantedAudience sets the "granted_audience" field.
func (ru *RequestUpdate) SetGrantedAudience(s []string) *RequestUpdate {
	ru.mutation.SetGrantedAudience(s)
	return ru
}

// AppendGrantedAudience appends s to the "granted_audience" field.
func (ru *RequestUpdate) AppendGrantedAudience(s []string) *RequestUpdate {
	ru.mutation.AppendGrantedAudience(s)
	return ru
}

// SetForm sets the "form" field.
func (ru *RequestUpdate) SetForm(u url.Values) *RequestUpdate {
	ru.mutation.SetForm(u)
	return ru
}

// SetLang sets the "lang" field.
func (ru *RequestUpdate) SetLang(l language.Tag) *RequestUpdate {
	ru.mutation.SetLang(l)
	return ru
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (ru *RequestUpdate) SetNillableLang(l *language.Tag) *RequestUpdate {
	if l != nil {
		ru.SetLang(*l)
	}
	return ru
}

// ClearLang clears the value of the "lang" field.
func (ru *RequestUpdate) ClearLang() *RequestUpdate {
	ru.mutation.ClearLang()
	return ru
}

// SetClientIDID sets the "client_id" edge to the Clients entity by ID.
func (ru *RequestUpdate) SetClientIDID(id string) *RequestUpdate {
	ru.mutation.SetClientIDID(id)
	return ru
}

// SetNillableClientIDID sets the "client_id" edge to the Clients entity by ID if the given value is not nil.
func (ru *RequestUpdate) SetNillableClientIDID(id *string) *RequestUpdate {
	if id != nil {
		ru = ru.SetClientIDID(*id)
	}
	return ru
}

// SetClientID sets the "client_id" edge to the Clients entity.
func (ru *RequestUpdate) SetClientID(c *Clients) *RequestUpdate {
	return ru.SetClientIDID(c.ID)
}

// SetSessionIDID sets the "session_id" edge to the Session entity by ID.
func (ru *RequestUpdate) SetSessionIDID(id string) *RequestUpdate {
	ru.mutation.SetSessionIDID(id)
	return ru
}

// SetNillableSessionIDID sets the "session_id" edge to the Session entity by ID if the given value is not nil.
func (ru *RequestUpdate) SetNillableSessionIDID(id *string) *RequestUpdate {
	if id != nil {
		ru = ru.SetSessionIDID(*id)
	}
	return ru
}

// SetSessionID sets the "session_id" edge to the Session entity.
func (ru *RequestUpdate) SetSessionID(s *Session) *RequestUpdate {
	return ru.SetSessionIDID(s.ID)
}

// SetRefreshTokenID sets the "refresh_token" edge to the RefreshTokens entity by ID.
func (ru *RequestUpdate) SetRefreshTokenID(id string) *RequestUpdate {
	ru.mutation.SetRefreshTokenID(id)
	return ru
}

// SetNillableRefreshTokenID sets the "refresh_token" edge to the RefreshTokens entity by ID if the given value is not nil.
func (ru *RequestUpdate) SetNillableRefreshTokenID(id *string) *RequestUpdate {
	if id != nil {
		ru = ru.SetRefreshTokenID(*id)
	}
	return ru
}

// SetRefreshToken sets the "refresh_token" edge to the RefreshTokens entity.
func (ru *RequestUpdate) SetRefreshToken(r *RefreshTokens) *RequestUpdate {
	return ru.SetRefreshTokenID(r.ID)
}

// SetAuthorizeCodeID sets the "authorize_code" edge to the AuthorizeCodes entity by ID.
func (ru *RequestUpdate) SetAuthorizeCodeID(id string) *RequestUpdate {
	ru.mutation.SetAuthorizeCodeID(id)
	return ru
}

// SetNillableAuthorizeCodeID sets the "authorize_code" edge to the AuthorizeCodes entity by ID if the given value is not nil.
func (ru *RequestUpdate) SetNillableAuthorizeCodeID(id *string) *RequestUpdate {
	if id != nil {
		ru = ru.SetAuthorizeCodeID(*id)
	}
	return ru
}

// SetAuthorizeCode sets the "authorize_code" edge to the AuthorizeCodes entity.
func (ru *RequestUpdate) SetAuthorizeCode(a *AuthorizeCodes) *RequestUpdate {
	return ru.SetAuthorizeCodeID(a.ID)
}

// SetAccessTokenID sets the "access_token" edge to the AccessTokens entity by ID.
func (ru *RequestUpdate) SetAccessTokenID(id string) *RequestUpdate {
	ru.mutation.SetAccessTokenID(id)
	return ru
}

// SetNillableAccessTokenID sets the "access_token" edge to the AccessTokens entity by ID if the given value is not nil.
func (ru *RequestUpdate) SetNillableAccessTokenID(id *string) *RequestUpdate {
	if id != nil {
		ru = ru.SetAccessTokenID(*id)
	}
	return ru
}

// SetAccessToken sets the "access_token" edge to the AccessTokens entity.
func (ru *RequestUpdate) SetAccessToken(a *AccessTokens) *RequestUpdate {
	return ru.SetAccessTokenID(a.ID)
}

// SetIDSessionID sets the "id_session" edge to the IDSessions entity by ID.
func (ru *RequestUpdate) SetIDSessionID(id string) *RequestUpdate {
	ru.mutation.SetIDSessionID(id)
	return ru
}

// SetNillableIDSessionID sets the "id_session" edge to the IDSessions entity by ID if the given value is not nil.
func (ru *RequestUpdate) SetNillableIDSessionID(id *string) *RequestUpdate {
	if id != nil {
		ru = ru.SetIDSessionID(*id)
	}
	return ru
}

// SetIDSession sets the "id_session" edge to the IDSessions entity.
func (ru *RequestUpdate) SetIDSession(i *IDSessions) *RequestUpdate {
	return ru.SetIDSessionID(i.ID)
}

// SetPkceID sets the "pkce" edge to the PKCES entity by ID.
func (ru *RequestUpdate) SetPkceID(id string) *RequestUpdate {
	ru.mutation.SetPkceID(id)
	return ru
}

// SetNillablePkceID sets the "pkce" edge to the PKCES entity by ID if the given value is not nil.
func (ru *RequestUpdate) SetNillablePkceID(id *string) *RequestUpdate {
	if id != nil {
		ru = ru.SetPkceID(*id)
	}
	return ru
}

// SetPkce sets the "pkce" edge to the PKCES entity.
func (ru *RequestUpdate) SetPkce(p *PKCES) *RequestUpdate {
	return ru.SetPkceID(p.ID)
}

// Mutation returns the RequestMutation object of the builder.
func (ru *RequestUpdate) Mutation() *RequestMutation {
	return ru.mutation
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (ru *RequestUpdate) ClearClientID() *RequestUpdate {
	ru.mutation.ClearClientID()
	return ru
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (ru *RequestUpdate) ClearSessionID() *RequestUpdate {
	ru.mutation.ClearSessionID()
	return ru
}

// ClearRefreshToken clears the "refresh_token" edge to the RefreshTokens entity.
func (ru *RequestUpdate) ClearRefreshToken() *RequestUpdate {
	ru.mutation.ClearRefreshToken()
	return ru
}

// ClearAuthorizeCode clears the "authorize_code" edge to the AuthorizeCodes entity.
func (ru *RequestUpdate) ClearAuthorizeCode() *RequestUpdate {
	ru.mutation.ClearAuthorizeCode()
	return ru
}

// ClearAccessToken clears the "access_token" edge to the AccessTokens entity.
func (ru *RequestUpdate) ClearAccessToken() *RequestUpdate {
	ru.mutation.ClearAccessToken()
	return ru
}

// ClearIDSession clears the "id_session" edge to the IDSessions entity.
func (ru *RequestUpdate) ClearIDSession() *RequestUpdate {
	ru.mutation.ClearIDSession()
	return ru
}

// ClearPkce clears the "pkce" edge to the PKCES entity.
func (ru *RequestUpdate) ClearPkce() *RequestUpdate {
	ru.mutation.ClearPkce()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RequestUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RequestUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RequestUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RequestUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RequestUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RequestedAt(); ok {
		_spec.SetField(request.FieldRequestedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Scopes(); ok {
		_spec.SetField(request.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldScopes, value)
		})
	}
	if value, ok := ru.mutation.GrantedScopes(); ok {
		_spec.SetField(request.FieldGrantedScopes, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedGrantedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldGrantedScopes, value)
		})
	}
	if value, ok := ru.mutation.RequestedAudience(); ok {
		_spec.SetField(request.FieldRequestedAudience, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedRequestedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldRequestedAudience, value)
		})
	}
	if value, ok := ru.mutation.GrantedAudience(); ok {
		_spec.SetField(request.FieldGrantedAudience, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedGrantedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldGrantedAudience, value)
		})
	}
	if value, ok := ru.mutation.Form(); ok {
		_spec.SetField(request.FieldForm, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.Lang(); ok {
		_spec.SetField(request.FieldLang, field.TypeJSON, value)
	}
	if ru.mutation.LangCleared() {
		_spec.ClearField(request.FieldLang, field.TypeJSON)
	}
	if ru.mutation.ClientIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.ClientIDTable,
			Columns: []string{request.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ClientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.ClientIDTable,
			Columns: []string{request.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SessionIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.SessionIDTable,
			Columns: []string{request.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SessionIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.SessionIDTable,
			Columns: []string{request.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RefreshTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.RefreshTokenTable,
			Columns: []string{request.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RefreshTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.RefreshTokenTable,
			Columns: []string{request.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AuthorizeCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AuthorizeCodeTable,
			Columns: []string{request.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AuthorizeCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AuthorizeCodeTable,
			Columns: []string{request.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AccessTokenTable,
			Columns: []string{request.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AccessTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AccessTokenTable,
			Columns: []string{request.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.IDSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.IDSessionTable,
			Columns: []string{request.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.IDSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.IDSessionTable,
			Columns: []string{request.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.PkceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.PkceTable,
			Columns: []string{request.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.PkceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.PkceTable,
			Columns: []string{request.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RequestUpdateOne is the builder for updating a single Request entity.
type RequestUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestMutation
}

// SetRequestedAt sets the "requestedAt" field.
func (ruo *RequestUpdateOne) SetRequestedAt(t time.Time) *RequestUpdateOne {
	ruo.mutation.SetRequestedAt(t)
	return ruo
}

// SetScopes sets the "scopes" field.
func (ruo *RequestUpdateOne) SetScopes(s []string) *RequestUpdateOne {
	ruo.mutation.SetScopes(s)
	return ruo
}

// AppendScopes appends s to the "scopes" field.
func (ruo *RequestUpdateOne) AppendScopes(s []string) *RequestUpdateOne {
	ruo.mutation.AppendScopes(s)
	return ruo
}

// SetGrantedScopes sets the "granted_scopes" field.
func (ruo *RequestUpdateOne) SetGrantedScopes(s []string) *RequestUpdateOne {
	ruo.mutation.SetGrantedScopes(s)
	return ruo
}

// AppendGrantedScopes appends s to the "granted_scopes" field.
func (ruo *RequestUpdateOne) AppendGrantedScopes(s []string) *RequestUpdateOne {
	ruo.mutation.AppendGrantedScopes(s)
	return ruo
}

// SetRequestedAudience sets the "requested_audience" field.
func (ruo *RequestUpdateOne) SetRequestedAudience(s []string) *RequestUpdateOne {
	ruo.mutation.SetRequestedAudience(s)
	return ruo
}

// AppendRequestedAudience appends s to the "requested_audience" field.
func (ruo *RequestUpdateOne) AppendRequestedAudience(s []string) *RequestUpdateOne {
	ruo.mutation.AppendRequestedAudience(s)
	return ruo
}

// SetGrantedAudience sets the "granted_audience" field.
func (ruo *RequestUpdateOne) SetGrantedAudience(s []string) *RequestUpdateOne {
	ruo.mutation.SetGrantedAudience(s)
	return ruo
}

// AppendGrantedAudience appends s to the "granted_audience" field.
func (ruo *RequestUpdateOne) AppendGrantedAudience(s []string) *RequestUpdateOne {
	ruo.mutation.AppendGrantedAudience(s)
	return ruo
}

// SetForm sets the "form" field.
func (ruo *RequestUpdateOne) SetForm(u url.Values) *RequestUpdateOne {
	ruo.mutation.SetForm(u)
	return ruo
}

// SetLang sets the "lang" field.
func (ruo *RequestUpdateOne) SetLang(l language.Tag) *RequestUpdateOne {
	ruo.mutation.SetLang(l)
	return ruo
}

// SetNillableLang sets the "lang" field if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableLang(l *language.Tag) *RequestUpdateOne {
	if l != nil {
		ruo.SetLang(*l)
	}
	return ruo
}

// ClearLang clears the value of the "lang" field.
func (ruo *RequestUpdateOne) ClearLang() *RequestUpdateOne {
	ruo.mutation.ClearLang()
	return ruo
}

// SetClientIDID sets the "client_id" edge to the Clients entity by ID.
func (ruo *RequestUpdateOne) SetClientIDID(id string) *RequestUpdateOne {
	ruo.mutation.SetClientIDID(id)
	return ruo
}

// SetNillableClientIDID sets the "client_id" edge to the Clients entity by ID if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableClientIDID(id *string) *RequestUpdateOne {
	if id != nil {
		ruo = ruo.SetClientIDID(*id)
	}
	return ruo
}

// SetClientID sets the "client_id" edge to the Clients entity.
func (ruo *RequestUpdateOne) SetClientID(c *Clients) *RequestUpdateOne {
	return ruo.SetClientIDID(c.ID)
}

// SetSessionIDID sets the "session_id" edge to the Session entity by ID.
func (ruo *RequestUpdateOne) SetSessionIDID(id string) *RequestUpdateOne {
	ruo.mutation.SetSessionIDID(id)
	return ruo
}

// SetNillableSessionIDID sets the "session_id" edge to the Session entity by ID if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableSessionIDID(id *string) *RequestUpdateOne {
	if id != nil {
		ruo = ruo.SetSessionIDID(*id)
	}
	return ruo
}

// SetSessionID sets the "session_id" edge to the Session entity.
func (ruo *RequestUpdateOne) SetSessionID(s *Session) *RequestUpdateOne {
	return ruo.SetSessionIDID(s.ID)
}

// SetRefreshTokenID sets the "refresh_token" edge to the RefreshTokens entity by ID.
func (ruo *RequestUpdateOne) SetRefreshTokenID(id string) *RequestUpdateOne {
	ruo.mutation.SetRefreshTokenID(id)
	return ruo
}

// SetNillableRefreshTokenID sets the "refresh_token" edge to the RefreshTokens entity by ID if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableRefreshTokenID(id *string) *RequestUpdateOne {
	if id != nil {
		ruo = ruo.SetRefreshTokenID(*id)
	}
	return ruo
}

// SetRefreshToken sets the "refresh_token" edge to the RefreshTokens entity.
func (ruo *RequestUpdateOne) SetRefreshToken(r *RefreshTokens) *RequestUpdateOne {
	return ruo.SetRefreshTokenID(r.ID)
}

// SetAuthorizeCodeID sets the "authorize_code" edge to the AuthorizeCodes entity by ID.
func (ruo *RequestUpdateOne) SetAuthorizeCodeID(id string) *RequestUpdateOne {
	ruo.mutation.SetAuthorizeCodeID(id)
	return ruo
}

// SetNillableAuthorizeCodeID sets the "authorize_code" edge to the AuthorizeCodes entity by ID if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableAuthorizeCodeID(id *string) *RequestUpdateOne {
	if id != nil {
		ruo = ruo.SetAuthorizeCodeID(*id)
	}
	return ruo
}

// SetAuthorizeCode sets the "authorize_code" edge to the AuthorizeCodes entity.
func (ruo *RequestUpdateOne) SetAuthorizeCode(a *AuthorizeCodes) *RequestUpdateOne {
	return ruo.SetAuthorizeCodeID(a.ID)
}

// SetAccessTokenID sets the "access_token" edge to the AccessTokens entity by ID.
func (ruo *RequestUpdateOne) SetAccessTokenID(id string) *RequestUpdateOne {
	ruo.mutation.SetAccessTokenID(id)
	return ruo
}

// SetNillableAccessTokenID sets the "access_token" edge to the AccessTokens entity by ID if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableAccessTokenID(id *string) *RequestUpdateOne {
	if id != nil {
		ruo = ruo.SetAccessTokenID(*id)
	}
	return ruo
}

// SetAccessToken sets the "access_token" edge to the AccessTokens entity.
func (ruo *RequestUpdateOne) SetAccessToken(a *AccessTokens) *RequestUpdateOne {
	return ruo.SetAccessTokenID(a.ID)
}

// SetIDSessionID sets the "id_session" edge to the IDSessions entity by ID.
func (ruo *RequestUpdateOne) SetIDSessionID(id string) *RequestUpdateOne {
	ruo.mutation.SetIDSessionID(id)
	return ruo
}

// SetNillableIDSessionID sets the "id_session" edge to the IDSessions entity by ID if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillableIDSessionID(id *string) *RequestUpdateOne {
	if id != nil {
		ruo = ruo.SetIDSessionID(*id)
	}
	return ruo
}

// SetIDSession sets the "id_session" edge to the IDSessions entity.
func (ruo *RequestUpdateOne) SetIDSession(i *IDSessions) *RequestUpdateOne {
	return ruo.SetIDSessionID(i.ID)
}

// SetPkceID sets the "pkce" edge to the PKCES entity by ID.
func (ruo *RequestUpdateOne) SetPkceID(id string) *RequestUpdateOne {
	ruo.mutation.SetPkceID(id)
	return ruo
}

// SetNillablePkceID sets the "pkce" edge to the PKCES entity by ID if the given value is not nil.
func (ruo *RequestUpdateOne) SetNillablePkceID(id *string) *RequestUpdateOne {
	if id != nil {
		ruo = ruo.SetPkceID(*id)
	}
	return ruo
}

// SetPkce sets the "pkce" edge to the PKCES entity.
func (ruo *RequestUpdateOne) SetPkce(p *PKCES) *RequestUpdateOne {
	return ruo.SetPkceID(p.ID)
}

// Mutation returns the RequestMutation object of the builder.
func (ruo *RequestUpdateOne) Mutation() *RequestMutation {
	return ruo.mutation
}

// ClearClientID clears the "client_id" edge to the Clients entity.
func (ruo *RequestUpdateOne) ClearClientID() *RequestUpdateOne {
	ruo.mutation.ClearClientID()
	return ruo
}

// ClearSessionID clears the "session_id" edge to the Session entity.
func (ruo *RequestUpdateOne) ClearSessionID() *RequestUpdateOne {
	ruo.mutation.ClearSessionID()
	return ruo
}

// ClearRefreshToken clears the "refresh_token" edge to the RefreshTokens entity.
func (ruo *RequestUpdateOne) ClearRefreshToken() *RequestUpdateOne {
	ruo.mutation.ClearRefreshToken()
	return ruo
}

// ClearAuthorizeCode clears the "authorize_code" edge to the AuthorizeCodes entity.
func (ruo *RequestUpdateOne) ClearAuthorizeCode() *RequestUpdateOne {
	ruo.mutation.ClearAuthorizeCode()
	return ruo
}

// ClearAccessToken clears the "access_token" edge to the AccessTokens entity.
func (ruo *RequestUpdateOne) ClearAccessToken() *RequestUpdateOne {
	ruo.mutation.ClearAccessToken()
	return ruo
}

// ClearIDSession clears the "id_session" edge to the IDSessions entity.
func (ruo *RequestUpdateOne) ClearIDSession() *RequestUpdateOne {
	ruo.mutation.ClearIDSession()
	return ruo
}

// ClearPkce clears the "pkce" edge to the PKCES entity.
func (ruo *RequestUpdateOne) ClearPkce() *RequestUpdateOne {
	ruo.mutation.ClearPkce()
	return ruo
}

// Where appends a list predicates to the RequestUpdate builder.
func (ruo *RequestUpdateOne) Where(ps ...predicate.Request) *RequestUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RequestUpdateOne) Select(field string, fields ...string) *RequestUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Request entity.
func (ruo *RequestUpdateOne) Save(ctx context.Context) (*Request, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RequestUpdateOne) SaveX(ctx context.Context) *Request {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RequestUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RequestUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RequestUpdateOne) sqlSave(ctx context.Context) (_node *Request, err error) {
	_spec := sqlgraph.NewUpdateSpec(request.Table, request.Columns, sqlgraph.NewFieldSpec(request.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Request.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, request.FieldID)
		for _, f := range fields {
			if !request.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != request.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.RequestedAt(); ok {
		_spec.SetField(request.FieldRequestedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Scopes(); ok {
		_spec.SetField(request.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldScopes, value)
		})
	}
	if value, ok := ruo.mutation.GrantedScopes(); ok {
		_spec.SetField(request.FieldGrantedScopes, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedGrantedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldGrantedScopes, value)
		})
	}
	if value, ok := ruo.mutation.RequestedAudience(); ok {
		_spec.SetField(request.FieldRequestedAudience, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedRequestedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldRequestedAudience, value)
		})
	}
	if value, ok := ruo.mutation.GrantedAudience(); ok {
		_spec.SetField(request.FieldGrantedAudience, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedGrantedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, request.FieldGrantedAudience, value)
		})
	}
	if value, ok := ruo.mutation.Form(); ok {
		_spec.SetField(request.FieldForm, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.Lang(); ok {
		_spec.SetField(request.FieldLang, field.TypeJSON, value)
	}
	if ruo.mutation.LangCleared() {
		_spec.ClearField(request.FieldLang, field.TypeJSON)
	}
	if ruo.mutation.ClientIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.ClientIDTable,
			Columns: []string{request.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ClientIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.ClientIDTable,
			Columns: []string{request.ClientIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SessionIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.SessionIDTable,
			Columns: []string{request.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SessionIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   request.SessionIDTable,
			Columns: []string{request.SessionIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RefreshTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.RefreshTokenTable,
			Columns: []string{request.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RefreshTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.RefreshTokenTable,
			Columns: []string{request.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AuthorizeCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AuthorizeCodeTable,
			Columns: []string{request.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AuthorizeCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AuthorizeCodeTable,
			Columns: []string{request.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AccessTokenTable,
			Columns: []string{request.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AccessTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.AccessTokenTable,
			Columns: []string{request.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.IDSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.IDSessionTable,
			Columns: []string{request.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.IDSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.IDSessionTable,
			Columns: []string{request.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.PkceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.PkceTable,
			Columns: []string{request.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.PkceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   request.PkceTable,
			Columns: []string{request.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Request{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{request.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
