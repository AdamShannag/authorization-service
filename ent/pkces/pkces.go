// Code generated by ent, DO NOT EDIT.

package pkces

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the pkces type in the database.
	Label = "pkces"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRequestID holds the string denoting the request_id field in the database.
	FieldRequestID = "request_id"
	// FieldRequestedAt holds the string denoting the requestedat field in the database.
	FieldRequestedAt = "requested_at"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldGrantedScopes holds the string denoting the granted_scopes field in the database.
	FieldGrantedScopes = "granted_scopes"
	// FieldRequestedAudience holds the string denoting the requested_audience field in the database.
	FieldRequestedAudience = "requested_audience"
	// FieldGrantedAudience holds the string denoting the granted_audience field in the database.
	FieldGrantedAudience = "granted_audience"
	// FieldForm holds the string denoting the form field in the database.
	FieldForm = "form"
	// FieldLang holds the string denoting the lang field in the database.
	FieldLang = "lang"
	// EdgeClientID holds the string denoting the client_id edge name in mutations.
	EdgeClientID = "client_id"
	// EdgeSessionID holds the string denoting the session_id edge name in mutations.
	EdgeSessionID = "session_id"
	// Table holds the table name of the pkces in the database.
	Table = "pkce_ss"
	// ClientIDTable is the table that holds the client_id relation/edge.
	ClientIDTable = "pkce_ss"
	// ClientIDInverseTable is the table name for the Clients entity.
	// It exists in this package in order to avoid circular dependency with the "clients" package.
	ClientIDInverseTable = "clients"
	// ClientIDColumn is the table column denoting the client_id relation/edge.
	ClientIDColumn = "clients_pkce"
	// SessionIDTable is the table that holds the session_id relation/edge.
	SessionIDTable = "pkce_ss"
	// SessionIDInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionIDInverseTable = "sessions"
	// SessionIDColumn is the table column denoting the session_id relation/edge.
	SessionIDColumn = "session_pkce"
)

// Columns holds all SQL columns for pkces fields.
var Columns = []string{
	FieldID,
	FieldRequestID,
	FieldRequestedAt,
	FieldScopes,
	FieldGrantedScopes,
	FieldRequestedAudience,
	FieldGrantedAudience,
	FieldForm,
	FieldLang,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pkce_ss"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"clients_pkce",
	"session_pkce",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PKCES queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRequestID orders the results by the request_id field.
func ByRequestID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestID, opts...).ToFunc()
}

// ByRequestedAt orders the results by the requestedAt field.
func ByRequestedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestedAt, opts...).ToFunc()
}

// ByClientIDField orders the results by client_id field.
func ByClientIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newClientIDStep(), sql.OrderByField(field, opts...))
	}
}

// BySessionIDField orders the results by session_id field.
func BySessionIDField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionIDStep(), sql.OrderByField(field, opts...))
	}
}
func newClientIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ClientIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ClientIDTable, ClientIDColumn),
	)
}
func newSessionIDStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionIDInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SessionIDTable, SessionIDColumn),
	)
}
