// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/accesstokens"
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/clients"
	"authorization-service/ent/idsessions"
	"authorization-service/ent/pkces"
	"authorization-service/ent/refreshtokens"
	"authorization-service/ent/request"
	"authorization-service/ent/session"
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"golang.org/x/text/language"
)

// Request is the model entity for the Request schema.
type Request struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// RequestedAt holds the value of the "requestedAt" field.
	RequestedAt time.Time `json:"requestedAt,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// GrantedScopes holds the value of the "granted_scopes" field.
	GrantedScopes []string `json:"granted_scopes,omitempty"`
	// RequestedAudience holds the value of the "requested_audience" field.
	RequestedAudience []string `json:"requested_audience,omitempty"`
	// GrantedAudience holds the value of the "granted_audience" field.
	GrantedAudience []string `json:"granted_audience,omitempty"`
	// Form holds the value of the "form" field.
	Form url.Values `json:"form,omitempty"`
	// Lang holds the value of the "lang" field.
	Lang language.Tag `json:"lang,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestQuery when eager-loading is set.
	Edges            RequestEdges `json:"edges"`
	clients_requests *string
	session_requests *string
	selectValues     sql.SelectValues
}

// RequestEdges holds the relations/edges for other nodes in the graph.
type RequestEdges struct {
	// ClientID holds the value of the client_id edge.
	ClientID *Clients `json:"client_id,omitempty"`
	// SessionID holds the value of the session_id edge.
	SessionID *Session `json:"session_id,omitempty"`
	// RefreshToken holds the value of the refresh_token edge.
	RefreshToken *RefreshTokens `json:"refresh_token,omitempty"`
	// AuthorizeCode holds the value of the authorize_code edge.
	AuthorizeCode *AuthorizeCodes `json:"authorize_code,omitempty"`
	// AccessToken holds the value of the access_token edge.
	AccessToken *AccessTokens `json:"access_token,omitempty"`
	// IDSession holds the value of the id_session edge.
	IDSession *IDSessions `json:"id_session,omitempty"`
	// Pkce holds the value of the pkce edge.
	Pkce *PKCES `json:"pkce,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// ClientIDOrErr returns the ClientID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) ClientIDOrErr() (*Clients, error) {
	if e.loadedTypes[0] {
		if e.ClientID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: clients.Label}
		}
		return e.ClientID, nil
	}
	return nil, &NotLoadedError{edge: "client_id"}
}

// SessionIDOrErr returns the SessionID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) SessionIDOrErr() (*Session, error) {
	if e.loadedTypes[1] {
		if e.SessionID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: session.Label}
		}
		return e.SessionID, nil
	}
	return nil, &NotLoadedError{edge: "session_id"}
}

// RefreshTokenOrErr returns the RefreshToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) RefreshTokenOrErr() (*RefreshTokens, error) {
	if e.loadedTypes[2] {
		if e.RefreshToken == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: refreshtokens.Label}
		}
		return e.RefreshToken, nil
	}
	return nil, &NotLoadedError{edge: "refresh_token"}
}

// AuthorizeCodeOrErr returns the AuthorizeCode value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) AuthorizeCodeOrErr() (*AuthorizeCodes, error) {
	if e.loadedTypes[3] {
		if e.AuthorizeCode == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: authorizecodes.Label}
		}
		return e.AuthorizeCode, nil
	}
	return nil, &NotLoadedError{edge: "authorize_code"}
}

// AccessTokenOrErr returns the AccessToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) AccessTokenOrErr() (*AccessTokens, error) {
	if e.loadedTypes[4] {
		if e.AccessToken == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: accesstokens.Label}
		}
		return e.AccessToken, nil
	}
	return nil, &NotLoadedError{edge: "access_token"}
}

// IDSessionOrErr returns the IDSession value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) IDSessionOrErr() (*IDSessions, error) {
	if e.loadedTypes[5] {
		if e.IDSession == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: idsessions.Label}
		}
		return e.IDSession, nil
	}
	return nil, &NotLoadedError{edge: "id_session"}
}

// PkceOrErr returns the Pkce value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) PkceOrErr() (*PKCES, error) {
	if e.loadedTypes[6] {
		if e.Pkce == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: pkces.Label}
		}
		return e.Pkce, nil
	}
	return nil, &NotLoadedError{edge: "pkce"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Request) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case request.FieldScopes, request.FieldGrantedScopes, request.FieldRequestedAudience, request.FieldGrantedAudience, request.FieldForm, request.FieldLang:
			values[i] = new([]byte)
		case request.FieldID:
			values[i] = new(sql.NullString)
		case request.FieldRequestedAt:
			values[i] = new(sql.NullTime)
		case request.ForeignKeys[0]: // clients_requests
			values[i] = new(sql.NullString)
		case request.ForeignKeys[1]: // session_requests
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Request fields.
func (r *Request) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case request.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case request.FieldRequestedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field requestedAt", values[i])
			} else if value.Valid {
				r.RequestedAt = value.Time
			}
		case request.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case request.FieldGrantedScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field granted_scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.GrantedScopes); err != nil {
					return fmt.Errorf("unmarshal field granted_scopes: %w", err)
				}
			}
		case request.FieldRequestedAudience:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field requested_audience", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.RequestedAudience); err != nil {
					return fmt.Errorf("unmarshal field requested_audience: %w", err)
				}
			}
		case request.FieldGrantedAudience:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field granted_audience", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.GrantedAudience); err != nil {
					return fmt.Errorf("unmarshal field granted_audience: %w", err)
				}
			}
		case request.FieldForm:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field form", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Form); err != nil {
					return fmt.Errorf("unmarshal field form: %w", err)
				}
			}
		case request.FieldLang:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field lang", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &r.Lang); err != nil {
					return fmt.Errorf("unmarshal field lang: %w", err)
				}
			}
		case request.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field clients_requests", values[i])
			} else if value.Valid {
				r.clients_requests = new(string)
				*r.clients_requests = value.String
			}
		case request.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_requests", values[i])
			} else if value.Valid {
				r.session_requests = new(string)
				*r.session_requests = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Request.
// This includes values selected through modifiers, order, etc.
func (r *Request) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryClientID queries the "client_id" edge of the Request entity.
func (r *Request) QueryClientID() *ClientsQuery {
	return NewRequestClient(r.config).QueryClientID(r)
}

// QuerySessionID queries the "session_id" edge of the Request entity.
func (r *Request) QuerySessionID() *SessionQuery {
	return NewRequestClient(r.config).QuerySessionID(r)
}

// QueryRefreshToken queries the "refresh_token" edge of the Request entity.
func (r *Request) QueryRefreshToken() *RefreshTokensQuery {
	return NewRequestClient(r.config).QueryRefreshToken(r)
}

// QueryAuthorizeCode queries the "authorize_code" edge of the Request entity.
func (r *Request) QueryAuthorizeCode() *AuthorizeCodesQuery {
	return NewRequestClient(r.config).QueryAuthorizeCode(r)
}

// QueryAccessToken queries the "access_token" edge of the Request entity.
func (r *Request) QueryAccessToken() *AccessTokensQuery {
	return NewRequestClient(r.config).QueryAccessToken(r)
}

// QueryIDSession queries the "id_session" edge of the Request entity.
func (r *Request) QueryIDSession() *IDSessionsQuery {
	return NewRequestClient(r.config).QueryIDSession(r)
}

// QueryPkce queries the "pkce" edge of the Request entity.
func (r *Request) QueryPkce() *PKCESQuery {
	return NewRequestClient(r.config).QueryPkce(r)
}

// Update returns a builder for updating this Request.
// Note that you need to call Request.Unwrap() before calling this method if this Request
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Request) Update() *RequestUpdateOne {
	return NewRequestClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Request entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Request) Unwrap() *Request {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Request is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Request) String() string {
	var builder strings.Builder
	builder.WriteString("Request(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("requestedAt=")
	builder.WriteString(r.RequestedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", r.Scopes))
	builder.WriteString(", ")
	builder.WriteString("granted_scopes=")
	builder.WriteString(fmt.Sprintf("%v", r.GrantedScopes))
	builder.WriteString(", ")
	builder.WriteString("requested_audience=")
	builder.WriteString(fmt.Sprintf("%v", r.RequestedAudience))
	builder.WriteString(", ")
	builder.WriteString("granted_audience=")
	builder.WriteString(fmt.Sprintf("%v", r.GrantedAudience))
	builder.WriteString(", ")
	builder.WriteString("form=")
	builder.WriteString(fmt.Sprintf("%v", r.Form))
	builder.WriteString(", ")
	builder.WriteString("lang=")
	builder.WriteString(fmt.Sprintf("%v", r.Lang))
	builder.WriteByte(')')
	return builder.String()
}

// Requests is a parsable slice of Request.
type Requests []*Request
