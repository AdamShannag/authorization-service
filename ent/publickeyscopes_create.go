// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/subjectpublickeys"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	jose "gopkg.in/square/go-jose.v2"
)

// PublicKeyScopesCreate is the builder for creating a PublicKeyScopes entity.
type PublicKeyScopesCreate struct {
	config
	mutation *PublicKeyScopesMutation
	hooks    []Hook
}

// SetJSONWebKey sets the "json_web_key" field.
func (pksc *PublicKeyScopesCreate) SetJSONWebKey(jwk jose.JSONWebKey) *PublicKeyScopesCreate {
	pksc.mutation.SetJSONWebKey(jwk)
	return pksc
}

// SetScopes sets the "scopes" field.
func (pksc *PublicKeyScopesCreate) SetScopes(s []string) *PublicKeyScopesCreate {
	pksc.mutation.SetScopes(s)
	return pksc
}

// SetID sets the "id" field.
func (pksc *PublicKeyScopesCreate) SetID(s string) *PublicKeyScopesCreate {
	pksc.mutation.SetID(s)
	return pksc
}

// SetSubjectPublicKeyIDID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity by ID.
func (pksc *PublicKeyScopesCreate) SetSubjectPublicKeyIDID(id string) *PublicKeyScopesCreate {
	pksc.mutation.SetSubjectPublicKeyIDID(id)
	return pksc
}

// SetNillableSubjectPublicKeyIDID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity by ID if the given value is not nil.
func (pksc *PublicKeyScopesCreate) SetNillableSubjectPublicKeyIDID(id *string) *PublicKeyScopesCreate {
	if id != nil {
		pksc = pksc.SetSubjectPublicKeyIDID(*id)
	}
	return pksc
}

// SetSubjectPublicKeyID sets the "subject_public_key_id" edge to the SubjectPublicKeys entity.
func (pksc *PublicKeyScopesCreate) SetSubjectPublicKeyID(s *SubjectPublicKeys) *PublicKeyScopesCreate {
	return pksc.SetSubjectPublicKeyIDID(s.ID)
}

// Mutation returns the PublicKeyScopesMutation object of the builder.
func (pksc *PublicKeyScopesCreate) Mutation() *PublicKeyScopesMutation {
	return pksc.mutation
}

// Save creates the PublicKeyScopes in the database.
func (pksc *PublicKeyScopesCreate) Save(ctx context.Context) (*PublicKeyScopes, error) {
	return withHooks(ctx, pksc.sqlSave, pksc.mutation, pksc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pksc *PublicKeyScopesCreate) SaveX(ctx context.Context) *PublicKeyScopes {
	v, err := pksc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pksc *PublicKeyScopesCreate) Exec(ctx context.Context) error {
	_, err := pksc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pksc *PublicKeyScopesCreate) ExecX(ctx context.Context) {
	if err := pksc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pksc *PublicKeyScopesCreate) check() error {
	if _, ok := pksc.mutation.JSONWebKey(); !ok {
		return &ValidationError{Name: "json_web_key", err: errors.New(`ent: missing required field "PublicKeyScopes.json_web_key"`)}
	}
	if _, ok := pksc.mutation.Scopes(); !ok {
		return &ValidationError{Name: "scopes", err: errors.New(`ent: missing required field "PublicKeyScopes.scopes"`)}
	}
	return nil
}

func (pksc *PublicKeyScopesCreate) sqlSave(ctx context.Context) (*PublicKeyScopes, error) {
	if err := pksc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pksc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pksc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PublicKeyScopes.ID type: %T", _spec.ID.Value)
		}
	}
	pksc.mutation.id = &_node.ID
	pksc.mutation.done = true
	return _node, nil
}

func (pksc *PublicKeyScopesCreate) createSpec() (*PublicKeyScopes, *sqlgraph.CreateSpec) {
	var (
		_node = &PublicKeyScopes{config: pksc.config}
		_spec = sqlgraph.NewCreateSpec(publickeyscopes.Table, sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString))
	)
	if id, ok := pksc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pksc.mutation.JSONWebKey(); ok {
		_spec.SetField(publickeyscopes.FieldJSONWebKey, field.TypeJSON, value)
		_node.JSONWebKey = value
	}
	if value, ok := pksc.mutation.Scopes(); ok {
		_spec.SetField(publickeyscopes.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if nodes := pksc.mutation.SubjectPublicKeyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   publickeyscopes.SubjectPublicKeyIDTable,
			Columns: []string{publickeyscopes.SubjectPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subject_public_keys_public_key_scope = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PublicKeyScopesCreateBulk is the builder for creating many PublicKeyScopes entities in bulk.
type PublicKeyScopesCreateBulk struct {
	config
	builders []*PublicKeyScopesCreate
}

// Save creates the PublicKeyScopes entities in the database.
func (pkscb *PublicKeyScopesCreateBulk) Save(ctx context.Context) ([]*PublicKeyScopes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pkscb.builders))
	nodes := make([]*PublicKeyScopes, len(pkscb.builders))
	mutators := make([]Mutator, len(pkscb.builders))
	for i := range pkscb.builders {
		func(i int, root context.Context) {
			builder := pkscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PublicKeyScopesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pkscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pkscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pkscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pkscb *PublicKeyScopesCreateBulk) SaveX(ctx context.Context) []*PublicKeyScopes {
	v, err := pkscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pkscb *PublicKeyScopesCreateBulk) Exec(ctx context.Context) error {
	_, err := pkscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pkscb *PublicKeyScopesCreateBulk) ExecX(ctx context.Context) {
	if err := pkscb.Exec(ctx); err != nil {
		panic(err)
	}
}
