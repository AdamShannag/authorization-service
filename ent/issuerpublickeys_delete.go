// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/predicate"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IssuerPublicKeysDelete is the builder for deleting a IssuerPublicKeys entity.
type IssuerPublicKeysDelete struct {
	config
	hooks    []Hook
	mutation *IssuerPublicKeysMutation
}

// Where appends a list predicates to the IssuerPublicKeysDelete builder.
func (ipkd *IssuerPublicKeysDelete) Where(ps ...predicate.IssuerPublicKeys) *IssuerPublicKeysDelete {
	ipkd.mutation.Where(ps...)
	return ipkd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ipkd *IssuerPublicKeysDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ipkd.sqlExec, ipkd.mutation, ipkd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ipkd *IssuerPublicKeysDelete) ExecX(ctx context.Context) int {
	n, err := ipkd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ipkd *IssuerPublicKeysDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(issuerpublickeys.Table, sqlgraph.NewFieldSpec(issuerpublickeys.FieldID, field.TypeString))
	if ps := ipkd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ipkd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ipkd.mutation.done = true
	return affected, err
}

// IssuerPublicKeysDeleteOne is the builder for deleting a single IssuerPublicKeys entity.
type IssuerPublicKeysDeleteOne struct {
	ipkd *IssuerPublicKeysDelete
}

// Where appends a list predicates to the IssuerPublicKeysDelete builder.
func (ipkdo *IssuerPublicKeysDeleteOne) Where(ps ...predicate.IssuerPublicKeys) *IssuerPublicKeysDeleteOne {
	ipkdo.ipkd.mutation.Where(ps...)
	return ipkdo
}

// Exec executes the deletion query.
func (ipkdo *IssuerPublicKeysDeleteOne) Exec(ctx context.Context) error {
	n, err := ipkdo.ipkd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{issuerpublickeys.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ipkdo *IssuerPublicKeysDeleteOne) ExecX(ctx context.Context) {
	if err := ipkdo.Exec(ctx); err != nil {
		panic(err)
	}
}
