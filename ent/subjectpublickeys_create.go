// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/issuerpublickeys"
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/subjectpublickeys"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubjectPublicKeysCreate is the builder for creating a SubjectPublicKeys entity.
type SubjectPublicKeysCreate struct {
	config
	mutation *SubjectPublicKeysMutation
	hooks    []Hook
}

// SetID sets the "id" field.
func (spkc *SubjectPublicKeysCreate) SetID(s string) *SubjectPublicKeysCreate {
	spkc.mutation.SetID(s)
	return spkc
}

// SetPublicKeyScopeID sets the "public_key_scope" edge to the PublicKeyScopes entity by ID.
func (spkc *SubjectPublicKeysCreate) SetPublicKeyScopeID(id string) *SubjectPublicKeysCreate {
	spkc.mutation.SetPublicKeyScopeID(id)
	return spkc
}

// SetNillablePublicKeyScopeID sets the "public_key_scope" edge to the PublicKeyScopes entity by ID if the given value is not nil.
func (spkc *SubjectPublicKeysCreate) SetNillablePublicKeyScopeID(id *string) *SubjectPublicKeysCreate {
	if id != nil {
		spkc = spkc.SetPublicKeyScopeID(*id)
	}
	return spkc
}

// SetPublicKeyScope sets the "public_key_scope" edge to the PublicKeyScopes entity.
func (spkc *SubjectPublicKeysCreate) SetPublicKeyScope(p *PublicKeyScopes) *SubjectPublicKeysCreate {
	return spkc.SetPublicKeyScopeID(p.ID)
}

// SetIssuerPublicKeyIDID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity by ID.
func (spkc *SubjectPublicKeysCreate) SetIssuerPublicKeyIDID(id string) *SubjectPublicKeysCreate {
	spkc.mutation.SetIssuerPublicKeyIDID(id)
	return spkc
}

// SetNillableIssuerPublicKeyIDID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity by ID if the given value is not nil.
func (spkc *SubjectPublicKeysCreate) SetNillableIssuerPublicKeyIDID(id *string) *SubjectPublicKeysCreate {
	if id != nil {
		spkc = spkc.SetIssuerPublicKeyIDID(*id)
	}
	return spkc
}

// SetIssuerPublicKeyID sets the "issuer_public_key_id" edge to the IssuerPublicKeys entity.
func (spkc *SubjectPublicKeysCreate) SetIssuerPublicKeyID(i *IssuerPublicKeys) *SubjectPublicKeysCreate {
	return spkc.SetIssuerPublicKeyIDID(i.ID)
}

// Mutation returns the SubjectPublicKeysMutation object of the builder.
func (spkc *SubjectPublicKeysCreate) Mutation() *SubjectPublicKeysMutation {
	return spkc.mutation
}

// Save creates the SubjectPublicKeys in the database.
func (spkc *SubjectPublicKeysCreate) Save(ctx context.Context) (*SubjectPublicKeys, error) {
	return withHooks(ctx, spkc.sqlSave, spkc.mutation, spkc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spkc *SubjectPublicKeysCreate) SaveX(ctx context.Context) *SubjectPublicKeys {
	v, err := spkc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spkc *SubjectPublicKeysCreate) Exec(ctx context.Context) error {
	_, err := spkc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spkc *SubjectPublicKeysCreate) ExecX(ctx context.Context) {
	if err := spkc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spkc *SubjectPublicKeysCreate) check() error {
	return nil
}

func (spkc *SubjectPublicKeysCreate) sqlSave(ctx context.Context) (*SubjectPublicKeys, error) {
	if err := spkc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spkc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spkc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SubjectPublicKeys.ID type: %T", _spec.ID.Value)
		}
	}
	spkc.mutation.id = &_node.ID
	spkc.mutation.done = true
	return _node, nil
}

func (spkc *SubjectPublicKeysCreate) createSpec() (*SubjectPublicKeys, *sqlgraph.CreateSpec) {
	var (
		_node = &SubjectPublicKeys{config: spkc.config}
		_spec = sqlgraph.NewCreateSpec(subjectpublickeys.Table, sqlgraph.NewFieldSpec(subjectpublickeys.FieldID, field.TypeString))
	)
	if id, ok := spkc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if nodes := spkc.mutation.PublicKeyScopeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   subjectpublickeys.PublicKeyScopeTable,
			Columns: []string{subjectpublickeys.PublicKeyScopeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(publickeyscopes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spkc.mutation.IssuerPublicKeyIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   subjectpublickeys.IssuerPublicKeyIDTable,
			Columns: []string{subjectpublickeys.IssuerPublicKeyIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(issuerpublickeys.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.issuer_public_keys_subject_public_key = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubjectPublicKeysCreateBulk is the builder for creating many SubjectPublicKeys entities in bulk.
type SubjectPublicKeysCreateBulk struct {
	config
	builders []*SubjectPublicKeysCreate
}

// Save creates the SubjectPublicKeys entities in the database.
func (spkcb *SubjectPublicKeysCreateBulk) Save(ctx context.Context) ([]*SubjectPublicKeys, error) {
	specs := make([]*sqlgraph.CreateSpec, len(spkcb.builders))
	nodes := make([]*SubjectPublicKeys, len(spkcb.builders))
	mutators := make([]Mutator, len(spkcb.builders))
	for i := range spkcb.builders {
		func(i int, root context.Context) {
			builder := spkcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubjectPublicKeysMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spkcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spkcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spkcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spkcb *SubjectPublicKeysCreateBulk) SaveX(ctx context.Context) []*SubjectPublicKeys {
	v, err := spkcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spkcb *SubjectPublicKeysCreateBulk) Exec(ctx context.Context) error {
	_, err := spkcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spkcb *SubjectPublicKeysCreateBulk) ExecX(ctx context.Context) {
	if err := spkcb.Exec(ctx); err != nil {
		panic(err)
	}
}
