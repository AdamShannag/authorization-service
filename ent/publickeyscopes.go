// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/publickeyscopes"
	"authorization-service/ent/subjectpublickeys"
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	jose "gopkg.in/square/go-jose.v2"
)

// PublicKeyScopes is the model entity for the PublicKeyScopes schema.
type PublicKeyScopes struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// JSONWebKey holds the value of the "json_web_key" field.
	JSONWebKey jose.JSONWebKey `json:"json_web_key,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PublicKeyScopesQuery when eager-loading is set.
	Edges                                PublicKeyScopesEdges `json:"edges"`
	subject_public_keys_public_key_scope *string
	selectValues                         sql.SelectValues
}

// PublicKeyScopesEdges holds the relations/edges for other nodes in the graph.
type PublicKeyScopesEdges struct {
	// SubjectPublicKeyID holds the value of the subject_public_key_id edge.
	SubjectPublicKeyID *SubjectPublicKeys `json:"subject_public_key_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubjectPublicKeyIDOrErr returns the SubjectPublicKeyID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PublicKeyScopesEdges) SubjectPublicKeyIDOrErr() (*SubjectPublicKeys, error) {
	if e.loadedTypes[0] {
		if e.SubjectPublicKeyID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: subjectpublickeys.Label}
		}
		return e.SubjectPublicKeyID, nil
	}
	return nil, &NotLoadedError{edge: "subject_public_key_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PublicKeyScopes) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case publickeyscopes.FieldJSONWebKey, publickeyscopes.FieldScopes:
			values[i] = new([]byte)
		case publickeyscopes.FieldID:
			values[i] = new(sql.NullString)
		case publickeyscopes.ForeignKeys[0]: // subject_public_keys_public_key_scope
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PublicKeyScopes fields.
func (pks *PublicKeyScopes) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case publickeyscopes.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pks.ID = value.String
			}
		case publickeyscopes.FieldJSONWebKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field json_web_key", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pks.JSONWebKey); err != nil {
					return fmt.Errorf("unmarshal field json_web_key: %w", err)
				}
			}
		case publickeyscopes.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &pks.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case publickeyscopes.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject_public_keys_public_key_scope", values[i])
			} else if value.Valid {
				pks.subject_public_keys_public_key_scope = new(string)
				*pks.subject_public_keys_public_key_scope = value.String
			}
		default:
			pks.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PublicKeyScopes.
// This includes values selected through modifiers, order, etc.
func (pks *PublicKeyScopes) Value(name string) (ent.Value, error) {
	return pks.selectValues.Get(name)
}

// QuerySubjectPublicKeyID queries the "subject_public_key_id" edge of the PublicKeyScopes entity.
func (pks *PublicKeyScopes) QuerySubjectPublicKeyID() *SubjectPublicKeysQuery {
	return NewPublicKeyScopesClient(pks.config).QuerySubjectPublicKeyID(pks)
}

// Update returns a builder for updating this PublicKeyScopes.
// Note that you need to call PublicKeyScopes.Unwrap() before calling this method if this PublicKeyScopes
// was returned from a transaction, and the transaction was committed or rolled back.
func (pks *PublicKeyScopes) Update() *PublicKeyScopesUpdateOne {
	return NewPublicKeyScopesClient(pks.config).UpdateOne(pks)
}

// Unwrap unwraps the PublicKeyScopes entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pks *PublicKeyScopes) Unwrap() *PublicKeyScopes {
	_tx, ok := pks.config.driver.(*txDriver)
	if !ok {
		panic("ent: PublicKeyScopes is not a transactional entity")
	}
	pks.config.driver = _tx.drv
	return pks
}

// String implements the fmt.Stringer.
func (pks *PublicKeyScopes) String() string {
	var builder strings.Builder
	builder.WriteString("PublicKeyScopes(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pks.ID))
	builder.WriteString("json_web_key=")
	builder.WriteString(fmt.Sprintf("%v", pks.JSONWebKey))
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", pks.Scopes))
	builder.WriteByte(')')
	return builder.String()
}

// PublicKeyScopesSlice is a parsable slice of PublicKeyScopes.
type PublicKeyScopesSlice []*PublicKeyScopes
