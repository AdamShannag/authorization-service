// Code generated by ent, DO NOT EDIT.

package ent

import (
	"authorization-service/ent/accesstokens"
	"authorization-service/ent/authorizecodes"
	"authorization-service/ent/clients"
	"authorization-service/ent/idsessions"
	"authorization-service/ent/pkces"
	"authorization-service/ent/predicate"
	"authorization-service/ent/refreshtokens"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// ClientsUpdate is the builder for updating Clients entities.
type ClientsUpdate struct {
	config
	hooks    []Hook
	mutation *ClientsMutation
}

// Where appends a list predicates to the ClientsUpdate builder.
func (cu *ClientsUpdate) Where(ps ...predicate.Clients) *ClientsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetClientSecret sets the "client_secret" field.
func (cu *ClientsUpdate) SetClientSecret(b []byte) *ClientsUpdate {
	cu.mutation.SetClientSecret(b)
	return cu
}

// SetRotatedSecrets sets the "rotated_secrets" field.
func (cu *ClientsUpdate) SetRotatedSecrets(u [][]uint8) *ClientsUpdate {
	cu.mutation.SetRotatedSecrets(u)
	return cu
}

// AppendRotatedSecrets appends u to the "rotated_secrets" field.
func (cu *ClientsUpdate) AppendRotatedSecrets(u [][]uint8) *ClientsUpdate {
	cu.mutation.AppendRotatedSecrets(u)
	return cu
}

// SetRedirectUris sets the "redirect_uris" field.
func (cu *ClientsUpdate) SetRedirectUris(s []string) *ClientsUpdate {
	cu.mutation.SetRedirectUris(s)
	return cu
}

// AppendRedirectUris appends s to the "redirect_uris" field.
func (cu *ClientsUpdate) AppendRedirectUris(s []string) *ClientsUpdate {
	cu.mutation.AppendRedirectUris(s)
	return cu
}

// SetGrantTypes sets the "grant_types" field.
func (cu *ClientsUpdate) SetGrantTypes(s []string) *ClientsUpdate {
	cu.mutation.SetGrantTypes(s)
	return cu
}

// AppendGrantTypes appends s to the "grant_types" field.
func (cu *ClientsUpdate) AppendGrantTypes(s []string) *ClientsUpdate {
	cu.mutation.AppendGrantTypes(s)
	return cu
}

// SetResponseTypes sets the "response_types" field.
func (cu *ClientsUpdate) SetResponseTypes(s []string) *ClientsUpdate {
	cu.mutation.SetResponseTypes(s)
	return cu
}

// AppendResponseTypes appends s to the "response_types" field.
func (cu *ClientsUpdate) AppendResponseTypes(s []string) *ClientsUpdate {
	cu.mutation.AppendResponseTypes(s)
	return cu
}

// SetScopes sets the "scopes" field.
func (cu *ClientsUpdate) SetScopes(s []string) *ClientsUpdate {
	cu.mutation.SetScopes(s)
	return cu
}

// AppendScopes appends s to the "scopes" field.
func (cu *ClientsUpdate) AppendScopes(s []string) *ClientsUpdate {
	cu.mutation.AppendScopes(s)
	return cu
}

// SetAudience sets the "audience" field.
func (cu *ClientsUpdate) SetAudience(s []string) *ClientsUpdate {
	cu.mutation.SetAudience(s)
	return cu
}

// AppendAudience appends s to the "audience" field.
func (cu *ClientsUpdate) AppendAudience(s []string) *ClientsUpdate {
	cu.mutation.AppendAudience(s)
	return cu
}

// ClearAudience clears the value of the "audience" field.
func (cu *ClientsUpdate) ClearAudience() *ClientsUpdate {
	cu.mutation.ClearAudience()
	return cu
}

// SetPublic sets the "public" field.
func (cu *ClientsUpdate) SetPublic(b bool) *ClientsUpdate {
	cu.mutation.SetPublic(b)
	return cu
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (cu *ClientsUpdate) SetNillablePublic(b *bool) *ClientsUpdate {
	if b != nil {
		cu.SetPublic(*b)
	}
	return cu
}

// ClearPublic clears the value of the "public" field.
func (cu *ClientsUpdate) ClearPublic() *ClientsUpdate {
	cu.mutation.ClearPublic()
	return cu
}

// AddAccessTokenIDs adds the "access_token" edge to the AccessTokens entity by IDs.
func (cu *ClientsUpdate) AddAccessTokenIDs(ids ...string) *ClientsUpdate {
	cu.mutation.AddAccessTokenIDs(ids...)
	return cu
}

// AddAccessToken adds the "access_token" edges to the AccessTokens entity.
func (cu *ClientsUpdate) AddAccessToken(a ...*AccessTokens) *ClientsUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAccessTokenIDs(ids...)
}

// AddAuthorizeCodeIDs adds the "authorize_code" edge to the AuthorizeCodes entity by IDs.
func (cu *ClientsUpdate) AddAuthorizeCodeIDs(ids ...string) *ClientsUpdate {
	cu.mutation.AddAuthorizeCodeIDs(ids...)
	return cu
}

// AddAuthorizeCode adds the "authorize_code" edges to the AuthorizeCodes entity.
func (cu *ClientsUpdate) AddAuthorizeCode(a ...*AuthorizeCodes) *ClientsUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.AddAuthorizeCodeIDs(ids...)
}

// AddRefreshTokenIDs adds the "refresh_token" edge to the RefreshTokens entity by IDs.
func (cu *ClientsUpdate) AddRefreshTokenIDs(ids ...string) *ClientsUpdate {
	cu.mutation.AddRefreshTokenIDs(ids...)
	return cu
}

// AddRefreshToken adds the "refresh_token" edges to the RefreshTokens entity.
func (cu *ClientsUpdate) AddRefreshToken(r ...*RefreshTokens) *ClientsUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddRefreshTokenIDs(ids...)
}

// AddIDSessionIDs adds the "id_session" edge to the IDSessions entity by IDs.
func (cu *ClientsUpdate) AddIDSessionIDs(ids ...string) *ClientsUpdate {
	cu.mutation.AddIDSessionIDs(ids...)
	return cu
}

// AddIDSession adds the "id_session" edges to the IDSessions entity.
func (cu *ClientsUpdate) AddIDSession(i ...*IDSessions) *ClientsUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.AddIDSessionIDs(ids...)
}

// AddPkceIDs adds the "pkce" edge to the PKCES entity by IDs.
func (cu *ClientsUpdate) AddPkceIDs(ids ...string) *ClientsUpdate {
	cu.mutation.AddPkceIDs(ids...)
	return cu
}

// AddPkce adds the "pkce" edges to the PKCES entity.
func (cu *ClientsUpdate) AddPkce(p ...*PKCES) *ClientsUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPkceIDs(ids...)
}

// Mutation returns the ClientsMutation object of the builder.
func (cu *ClientsUpdate) Mutation() *ClientsMutation {
	return cu.mutation
}

// ClearAccessToken clears all "access_token" edges to the AccessTokens entity.
func (cu *ClientsUpdate) ClearAccessToken() *ClientsUpdate {
	cu.mutation.ClearAccessToken()
	return cu
}

// RemoveAccessTokenIDs removes the "access_token" edge to AccessTokens entities by IDs.
func (cu *ClientsUpdate) RemoveAccessTokenIDs(ids ...string) *ClientsUpdate {
	cu.mutation.RemoveAccessTokenIDs(ids...)
	return cu
}

// RemoveAccessToken removes "access_token" edges to AccessTokens entities.
func (cu *ClientsUpdate) RemoveAccessToken(a ...*AccessTokens) *ClientsUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAccessTokenIDs(ids...)
}

// ClearAuthorizeCode clears all "authorize_code" edges to the AuthorizeCodes entity.
func (cu *ClientsUpdate) ClearAuthorizeCode() *ClientsUpdate {
	cu.mutation.ClearAuthorizeCode()
	return cu
}

// RemoveAuthorizeCodeIDs removes the "authorize_code" edge to AuthorizeCodes entities by IDs.
func (cu *ClientsUpdate) RemoveAuthorizeCodeIDs(ids ...string) *ClientsUpdate {
	cu.mutation.RemoveAuthorizeCodeIDs(ids...)
	return cu
}

// RemoveAuthorizeCode removes "authorize_code" edges to AuthorizeCodes entities.
func (cu *ClientsUpdate) RemoveAuthorizeCode(a ...*AuthorizeCodes) *ClientsUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cu.RemoveAuthorizeCodeIDs(ids...)
}

// ClearRefreshToken clears all "refresh_token" edges to the RefreshTokens entity.
func (cu *ClientsUpdate) ClearRefreshToken() *ClientsUpdate {
	cu.mutation.ClearRefreshToken()
	return cu
}

// RemoveRefreshTokenIDs removes the "refresh_token" edge to RefreshTokens entities by IDs.
func (cu *ClientsUpdate) RemoveRefreshTokenIDs(ids ...string) *ClientsUpdate {
	cu.mutation.RemoveRefreshTokenIDs(ids...)
	return cu
}

// RemoveRefreshToken removes "refresh_token" edges to RefreshTokens entities.
func (cu *ClientsUpdate) RemoveRefreshToken(r ...*RefreshTokens) *ClientsUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveRefreshTokenIDs(ids...)
}

// ClearIDSession clears all "id_session" edges to the IDSessions entity.
func (cu *ClientsUpdate) ClearIDSession() *ClientsUpdate {
	cu.mutation.ClearIDSession()
	return cu
}

// RemoveIDSessionIDs removes the "id_session" edge to IDSessions entities by IDs.
func (cu *ClientsUpdate) RemoveIDSessionIDs(ids ...string) *ClientsUpdate {
	cu.mutation.RemoveIDSessionIDs(ids...)
	return cu
}

// RemoveIDSession removes "id_session" edges to IDSessions entities.
func (cu *ClientsUpdate) RemoveIDSession(i ...*IDSessions) *ClientsUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cu.RemoveIDSessionIDs(ids...)
}

// ClearPkce clears all "pkce" edges to the PKCES entity.
func (cu *ClientsUpdate) ClearPkce() *ClientsUpdate {
	cu.mutation.ClearPkce()
	return cu
}

// RemovePkceIDs removes the "pkce" edge to PKCES entities by IDs.
func (cu *ClientsUpdate) RemovePkceIDs(ids ...string) *ClientsUpdate {
	cu.mutation.RemovePkceIDs(ids...)
	return cu
}

// RemovePkce removes "pkce" edges to PKCES entities.
func (cu *ClientsUpdate) RemovePkce(p ...*PKCES) *ClientsUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePkceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClientsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClientsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClientsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClientsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClientsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(clients.Table, clients.Columns, sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ClientSecret(); ok {
		_spec.SetField(clients.FieldClientSecret, field.TypeBytes, value)
	}
	if value, ok := cu.mutation.RotatedSecrets(); ok {
		_spec.SetField(clients.FieldRotatedSecrets, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedRotatedSecrets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldRotatedSecrets, value)
		})
	}
	if value, ok := cu.mutation.RedirectUris(); ok {
		_spec.SetField(clients.FieldRedirectUris, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldRedirectUris, value)
		})
	}
	if value, ok := cu.mutation.GrantTypes(); ok {
		_spec.SetField(clients.FieldGrantTypes, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedGrantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldGrantTypes, value)
		})
	}
	if value, ok := cu.mutation.ResponseTypes(); ok {
		_spec.SetField(clients.FieldResponseTypes, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedResponseTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldResponseTypes, value)
		})
	}
	if value, ok := cu.mutation.Scopes(); ok {
		_spec.SetField(clients.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldScopes, value)
		})
	}
	if value, ok := cu.mutation.Audience(); ok {
		_spec.SetField(clients.FieldAudience, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldAudience, value)
		})
	}
	if cu.mutation.AudienceCleared() {
		_spec.ClearField(clients.FieldAudience, field.TypeJSON)
	}
	if value, ok := cu.mutation.Public(); ok {
		_spec.SetField(clients.FieldPublic, field.TypeBool, value)
	}
	if cu.mutation.PublicCleared() {
		_spec.ClearField(clients.FieldPublic, field.TypeBool)
	}
	if cu.mutation.AccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AccessTokenTable,
			Columns: []string{clients.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAccessTokenIDs(); len(nodes) > 0 && !cu.mutation.AccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AccessTokenTable,
			Columns: []string{clients.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AccessTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AccessTokenTable,
			Columns: []string{clients.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.AuthorizeCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AuthorizeCodeTable,
			Columns: []string{clients.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedAuthorizeCodeIDs(); len(nodes) > 0 && !cu.mutation.AuthorizeCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AuthorizeCodeTable,
			Columns: []string{clients.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AuthorizeCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AuthorizeCodeTable,
			Columns: []string{clients.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.RefreshTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.RefreshTokenTable,
			Columns: []string{clients.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedRefreshTokenIDs(); len(nodes) > 0 && !cu.mutation.RefreshTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.RefreshTokenTable,
			Columns: []string{clients.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RefreshTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.RefreshTokenTable,
			Columns: []string{clients.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.IDSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.IDSessionTable,
			Columns: []string{clients.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedIDSessionIDs(); len(nodes) > 0 && !cu.mutation.IDSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.IDSessionTable,
			Columns: []string{clients.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.IDSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.IDSessionTable,
			Columns: []string{clients.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PkceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.PkceTable,
			Columns: []string{clients.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPkceIDs(); len(nodes) > 0 && !cu.mutation.PkceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.PkceTable,
			Columns: []string{clients.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PkceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.PkceTable,
			Columns: []string{clients.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clients.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClientsUpdateOne is the builder for updating a single Clients entity.
type ClientsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ClientsMutation
}

// SetClientSecret sets the "client_secret" field.
func (cuo *ClientsUpdateOne) SetClientSecret(b []byte) *ClientsUpdateOne {
	cuo.mutation.SetClientSecret(b)
	return cuo
}

// SetRotatedSecrets sets the "rotated_secrets" field.
func (cuo *ClientsUpdateOne) SetRotatedSecrets(u [][]uint8) *ClientsUpdateOne {
	cuo.mutation.SetRotatedSecrets(u)
	return cuo
}

// AppendRotatedSecrets appends u to the "rotated_secrets" field.
func (cuo *ClientsUpdateOne) AppendRotatedSecrets(u [][]uint8) *ClientsUpdateOne {
	cuo.mutation.AppendRotatedSecrets(u)
	return cuo
}

// SetRedirectUris sets the "redirect_uris" field.
func (cuo *ClientsUpdateOne) SetRedirectUris(s []string) *ClientsUpdateOne {
	cuo.mutation.SetRedirectUris(s)
	return cuo
}

// AppendRedirectUris appends s to the "redirect_uris" field.
func (cuo *ClientsUpdateOne) AppendRedirectUris(s []string) *ClientsUpdateOne {
	cuo.mutation.AppendRedirectUris(s)
	return cuo
}

// SetGrantTypes sets the "grant_types" field.
func (cuo *ClientsUpdateOne) SetGrantTypes(s []string) *ClientsUpdateOne {
	cuo.mutation.SetGrantTypes(s)
	return cuo
}

// AppendGrantTypes appends s to the "grant_types" field.
func (cuo *ClientsUpdateOne) AppendGrantTypes(s []string) *ClientsUpdateOne {
	cuo.mutation.AppendGrantTypes(s)
	return cuo
}

// SetResponseTypes sets the "response_types" field.
func (cuo *ClientsUpdateOne) SetResponseTypes(s []string) *ClientsUpdateOne {
	cuo.mutation.SetResponseTypes(s)
	return cuo
}

// AppendResponseTypes appends s to the "response_types" field.
func (cuo *ClientsUpdateOne) AppendResponseTypes(s []string) *ClientsUpdateOne {
	cuo.mutation.AppendResponseTypes(s)
	return cuo
}

// SetScopes sets the "scopes" field.
func (cuo *ClientsUpdateOne) SetScopes(s []string) *ClientsUpdateOne {
	cuo.mutation.SetScopes(s)
	return cuo
}

// AppendScopes appends s to the "scopes" field.
func (cuo *ClientsUpdateOne) AppendScopes(s []string) *ClientsUpdateOne {
	cuo.mutation.AppendScopes(s)
	return cuo
}

// SetAudience sets the "audience" field.
func (cuo *ClientsUpdateOne) SetAudience(s []string) *ClientsUpdateOne {
	cuo.mutation.SetAudience(s)
	return cuo
}

// AppendAudience appends s to the "audience" field.
func (cuo *ClientsUpdateOne) AppendAudience(s []string) *ClientsUpdateOne {
	cuo.mutation.AppendAudience(s)
	return cuo
}

// ClearAudience clears the value of the "audience" field.
func (cuo *ClientsUpdateOne) ClearAudience() *ClientsUpdateOne {
	cuo.mutation.ClearAudience()
	return cuo
}

// SetPublic sets the "public" field.
func (cuo *ClientsUpdateOne) SetPublic(b bool) *ClientsUpdateOne {
	cuo.mutation.SetPublic(b)
	return cuo
}

// SetNillablePublic sets the "public" field if the given value is not nil.
func (cuo *ClientsUpdateOne) SetNillablePublic(b *bool) *ClientsUpdateOne {
	if b != nil {
		cuo.SetPublic(*b)
	}
	return cuo
}

// ClearPublic clears the value of the "public" field.
func (cuo *ClientsUpdateOne) ClearPublic() *ClientsUpdateOne {
	cuo.mutation.ClearPublic()
	return cuo
}

// AddAccessTokenIDs adds the "access_token" edge to the AccessTokens entity by IDs.
func (cuo *ClientsUpdateOne) AddAccessTokenIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.AddAccessTokenIDs(ids...)
	return cuo
}

// AddAccessToken adds the "access_token" edges to the AccessTokens entity.
func (cuo *ClientsUpdateOne) AddAccessToken(a ...*AccessTokens) *ClientsUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAccessTokenIDs(ids...)
}

// AddAuthorizeCodeIDs adds the "authorize_code" edge to the AuthorizeCodes entity by IDs.
func (cuo *ClientsUpdateOne) AddAuthorizeCodeIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.AddAuthorizeCodeIDs(ids...)
	return cuo
}

// AddAuthorizeCode adds the "authorize_code" edges to the AuthorizeCodes entity.
func (cuo *ClientsUpdateOne) AddAuthorizeCode(a ...*AuthorizeCodes) *ClientsUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.AddAuthorizeCodeIDs(ids...)
}

// AddRefreshTokenIDs adds the "refresh_token" edge to the RefreshTokens entity by IDs.
func (cuo *ClientsUpdateOne) AddRefreshTokenIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.AddRefreshTokenIDs(ids...)
	return cuo
}

// AddRefreshToken adds the "refresh_token" edges to the RefreshTokens entity.
func (cuo *ClientsUpdateOne) AddRefreshToken(r ...*RefreshTokens) *ClientsUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddRefreshTokenIDs(ids...)
}

// AddIDSessionIDs adds the "id_session" edge to the IDSessions entity by IDs.
func (cuo *ClientsUpdateOne) AddIDSessionIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.AddIDSessionIDs(ids...)
	return cuo
}

// AddIDSession adds the "id_session" edges to the IDSessions entity.
func (cuo *ClientsUpdateOne) AddIDSession(i ...*IDSessions) *ClientsUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.AddIDSessionIDs(ids...)
}

// AddPkceIDs adds the "pkce" edge to the PKCES entity by IDs.
func (cuo *ClientsUpdateOne) AddPkceIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.AddPkceIDs(ids...)
	return cuo
}

// AddPkce adds the "pkce" edges to the PKCES entity.
func (cuo *ClientsUpdateOne) AddPkce(p ...*PKCES) *ClientsUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPkceIDs(ids...)
}

// Mutation returns the ClientsMutation object of the builder.
func (cuo *ClientsUpdateOne) Mutation() *ClientsMutation {
	return cuo.mutation
}

// ClearAccessToken clears all "access_token" edges to the AccessTokens entity.
func (cuo *ClientsUpdateOne) ClearAccessToken() *ClientsUpdateOne {
	cuo.mutation.ClearAccessToken()
	return cuo
}

// RemoveAccessTokenIDs removes the "access_token" edge to AccessTokens entities by IDs.
func (cuo *ClientsUpdateOne) RemoveAccessTokenIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.RemoveAccessTokenIDs(ids...)
	return cuo
}

// RemoveAccessToken removes "access_token" edges to AccessTokens entities.
func (cuo *ClientsUpdateOne) RemoveAccessToken(a ...*AccessTokens) *ClientsUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAccessTokenIDs(ids...)
}

// ClearAuthorizeCode clears all "authorize_code" edges to the AuthorizeCodes entity.
func (cuo *ClientsUpdateOne) ClearAuthorizeCode() *ClientsUpdateOne {
	cuo.mutation.ClearAuthorizeCode()
	return cuo
}

// RemoveAuthorizeCodeIDs removes the "authorize_code" edge to AuthorizeCodes entities by IDs.
func (cuo *ClientsUpdateOne) RemoveAuthorizeCodeIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.RemoveAuthorizeCodeIDs(ids...)
	return cuo
}

// RemoveAuthorizeCode removes "authorize_code" edges to AuthorizeCodes entities.
func (cuo *ClientsUpdateOne) RemoveAuthorizeCode(a ...*AuthorizeCodes) *ClientsUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return cuo.RemoveAuthorizeCodeIDs(ids...)
}

// ClearRefreshToken clears all "refresh_token" edges to the RefreshTokens entity.
func (cuo *ClientsUpdateOne) ClearRefreshToken() *ClientsUpdateOne {
	cuo.mutation.ClearRefreshToken()
	return cuo
}

// RemoveRefreshTokenIDs removes the "refresh_token" edge to RefreshTokens entities by IDs.
func (cuo *ClientsUpdateOne) RemoveRefreshTokenIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.RemoveRefreshTokenIDs(ids...)
	return cuo
}

// RemoveRefreshToken removes "refresh_token" edges to RefreshTokens entities.
func (cuo *ClientsUpdateOne) RemoveRefreshToken(r ...*RefreshTokens) *ClientsUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveRefreshTokenIDs(ids...)
}

// ClearIDSession clears all "id_session" edges to the IDSessions entity.
func (cuo *ClientsUpdateOne) ClearIDSession() *ClientsUpdateOne {
	cuo.mutation.ClearIDSession()
	return cuo
}

// RemoveIDSessionIDs removes the "id_session" edge to IDSessions entities by IDs.
func (cuo *ClientsUpdateOne) RemoveIDSessionIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.RemoveIDSessionIDs(ids...)
	return cuo
}

// RemoveIDSession removes "id_session" edges to IDSessions entities.
func (cuo *ClientsUpdateOne) RemoveIDSession(i ...*IDSessions) *ClientsUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return cuo.RemoveIDSessionIDs(ids...)
}

// ClearPkce clears all "pkce" edges to the PKCES entity.
func (cuo *ClientsUpdateOne) ClearPkce() *ClientsUpdateOne {
	cuo.mutation.ClearPkce()
	return cuo
}

// RemovePkceIDs removes the "pkce" edge to PKCES entities by IDs.
func (cuo *ClientsUpdateOne) RemovePkceIDs(ids ...string) *ClientsUpdateOne {
	cuo.mutation.RemovePkceIDs(ids...)
	return cuo
}

// RemovePkce removes "pkce" edges to PKCES entities.
func (cuo *ClientsUpdateOne) RemovePkce(p ...*PKCES) *ClientsUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePkceIDs(ids...)
}

// Where appends a list predicates to the ClientsUpdate builder.
func (cuo *ClientsUpdateOne) Where(ps ...predicate.Clients) *ClientsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClientsUpdateOne) Select(field string, fields ...string) *ClientsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Clients entity.
func (cuo *ClientsUpdateOne) Save(ctx context.Context) (*Clients, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClientsUpdateOne) SaveX(ctx context.Context) *Clients {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClientsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClientsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClientsUpdateOne) sqlSave(ctx context.Context) (_node *Clients, err error) {
	_spec := sqlgraph.NewUpdateSpec(clients.Table, clients.Columns, sqlgraph.NewFieldSpec(clients.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Clients.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, clients.FieldID)
		for _, f := range fields {
			if !clients.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != clients.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.ClientSecret(); ok {
		_spec.SetField(clients.FieldClientSecret, field.TypeBytes, value)
	}
	if value, ok := cuo.mutation.RotatedSecrets(); ok {
		_spec.SetField(clients.FieldRotatedSecrets, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedRotatedSecrets(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldRotatedSecrets, value)
		})
	}
	if value, ok := cuo.mutation.RedirectUris(); ok {
		_spec.SetField(clients.FieldRedirectUris, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedRedirectUris(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldRedirectUris, value)
		})
	}
	if value, ok := cuo.mutation.GrantTypes(); ok {
		_spec.SetField(clients.FieldGrantTypes, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedGrantTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldGrantTypes, value)
		})
	}
	if value, ok := cuo.mutation.ResponseTypes(); ok {
		_spec.SetField(clients.FieldResponseTypes, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedResponseTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldResponseTypes, value)
		})
	}
	if value, ok := cuo.mutation.Scopes(); ok {
		_spec.SetField(clients.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldScopes, value)
		})
	}
	if value, ok := cuo.mutation.Audience(); ok {
		_spec.SetField(clients.FieldAudience, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedAudience(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, clients.FieldAudience, value)
		})
	}
	if cuo.mutation.AudienceCleared() {
		_spec.ClearField(clients.FieldAudience, field.TypeJSON)
	}
	if value, ok := cuo.mutation.Public(); ok {
		_spec.SetField(clients.FieldPublic, field.TypeBool, value)
	}
	if cuo.mutation.PublicCleared() {
		_spec.ClearField(clients.FieldPublic, field.TypeBool)
	}
	if cuo.mutation.AccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AccessTokenTable,
			Columns: []string{clients.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAccessTokenIDs(); len(nodes) > 0 && !cuo.mutation.AccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AccessTokenTable,
			Columns: []string{clients.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AccessTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AccessTokenTable,
			Columns: []string{clients.AccessTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(accesstokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.AuthorizeCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AuthorizeCodeTable,
			Columns: []string{clients.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedAuthorizeCodeIDs(); len(nodes) > 0 && !cuo.mutation.AuthorizeCodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AuthorizeCodeTable,
			Columns: []string{clients.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AuthorizeCodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.AuthorizeCodeTable,
			Columns: []string{clients.AuthorizeCodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(authorizecodes.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.RefreshTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.RefreshTokenTable,
			Columns: []string{clients.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedRefreshTokenIDs(); len(nodes) > 0 && !cuo.mutation.RefreshTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.RefreshTokenTable,
			Columns: []string{clients.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RefreshTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.RefreshTokenTable,
			Columns: []string{clients.RefreshTokenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(refreshtokens.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.IDSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.IDSessionTable,
			Columns: []string{clients.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedIDSessionIDs(); len(nodes) > 0 && !cuo.mutation.IDSessionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.IDSessionTable,
			Columns: []string{clients.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.IDSessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.IDSessionTable,
			Columns: []string{clients.IDSessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(idsessions.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PkceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.PkceTable,
			Columns: []string{clients.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPkceIDs(); len(nodes) > 0 && !cuo.mutation.PkceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.PkceTable,
			Columns: []string{clients.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PkceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   clients.PkceTable,
			Columns: []string{clients.PkceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pkces.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Clients{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{clients.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
