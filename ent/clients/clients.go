// Code generated by ent, DO NOT EDIT.

package clients

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the clients type in the database.
	Label = "clients"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClientSecret holds the string denoting the client_secret field in the database.
	FieldClientSecret = "client_secret"
	// FieldRotatedSecrets holds the string denoting the rotated_secrets field in the database.
	FieldRotatedSecrets = "rotated_secrets"
	// FieldRedirectUris holds the string denoting the redirect_uris field in the database.
	FieldRedirectUris = "redirect_uris"
	// FieldGrantTypes holds the string denoting the grant_types field in the database.
	FieldGrantTypes = "grant_types"
	// FieldResponseTypes holds the string denoting the response_types field in the database.
	FieldResponseTypes = "response_types"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldAudience holds the string denoting the audience field in the database.
	FieldAudience = "audience"
	// FieldPublic holds the string denoting the public field in the database.
	FieldPublic = "public"
	// EdgeRequests holds the string denoting the requests edge name in mutations.
	EdgeRequests = "requests"
	// Table holds the table name of the clients in the database.
	Table = "clients"
	// RequestsTable is the table that holds the requests relation/edge.
	RequestsTable = "requests"
	// RequestsInverseTable is the table name for the Request entity.
	// It exists in this package in order to avoid circular dependency with the "request" package.
	RequestsInverseTable = "requests"
	// RequestsColumn is the table column denoting the requests relation/edge.
	RequestsColumn = "clients_requests"
)

// Columns holds all SQL columns for clients fields.
var Columns = []string{
	FieldID,
	FieldClientSecret,
	FieldRotatedSecrets,
	FieldRedirectUris,
	FieldGrantTypes,
	FieldResponseTypes,
	FieldScopes,
	FieldAudience,
	FieldPublic,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Clients queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPublic orders the results by the public field.
func ByPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublic, opts...).ToFunc()
}

// ByRequestsCount orders the results by requests count.
func ByRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRequestsStep(), opts...)
	}
}

// ByRequests orders the results by requests terms.
func ByRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RequestsTable, RequestsColumn),
	)
}
